{"version":3,"file":"colorpicker.jsx","sourceRoot":"","sources":["colorpicker.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAA;AAE9B,OAAO,EAAE,cAAc,EAAE,MAAM,gBAAgB,CAAA;AAE/C,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAA;AACxC,OAAO,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAA;AACtC,OAAO,EACL,OAAO,EACP,cAAc,EACd,cAAc,GACf,MAAM,kBAAkB,CAAA;AAYzB,MAAM,CAAC,OAAO,UAAU,WAAW,CAAC,EAQ5B;QAR4B,EAClC,QAAQ,GAAG,KAAK,EAChB,oBAAoB,GAAG,IAAI,EAC3B,KAAK,EACL,QAAQ,EACR,IAAI,EACJ,KAAK,OAEC,EADH,IAAI,cAP2B,0EAQnC,CADQ;IAEP,OAAO,CACL,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CACnB;MAAA,CAAC,cAAc,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CACzC;QAAA,CAAC,MAAM,CACL,IAAI,CAAC,CAAC,IAAI,CAAC,CACX,OAAO,CAAC,CAAC,SAAS,CAAC,CACnB,SAAS,CAAC,SAAS,CACnB,IAAI,IAAI,CAAC,CAET;UAAA,CAAC,IAAI,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC,IAAI,CAAC,EAAE,IAAI,CAClD;UAAA,CAAC,2CAA2C,CAC9C;QAAA,EAAE,MAAM,CACV;MAAA,EAAE,cAAc,CAChB;MAAA,CAAC,cAAc,CAAC,SAAS,CAAC,eAAe,CACvC;QAAA,CAAC,cAAc,CACb,KAAK,CAAC,CAAC,KAAK,CAAC,CACb,QAAQ,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAG,KAAK,EAAE,KAAK,CAAC,CAAC,EAEhD;QAAA,CAAC,KAAK,CACJ,SAAS,CAAC,CAAC,CAAC,CAAC,CACb,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE;;YACd,CAAC,CAAC,eAAe,EAAE,CAAA;YACnB,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAG,MAAA,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,aAAa,0CAAE,KAAK,EAAE,KAAK,CAAC,CAAA;QAC5C,CAAC,CAAC,CACF,KAAK,CAAC,CAAC,KAAK,CAAC,EAEjB;MAAA,EAAE,cAAc,CAClB;IAAA,EAAE,OAAO,CAAC,CACX,CAAA;AACH,CAAC","sourcesContent":["import * as React from 'react'\n\nimport { HexColorPicker } from 'react-colorful'\n\nimport { Button } from '../../ui/button'\nimport { Input } from '../../ui/input'\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '../../ui/popover'\n\ntype Props = {\n  disabled?: boolean\n  icon?: React.ReactNode\n  label?: string\n  title?: string\n  stopCloseOnClickSelf?: boolean\n  color: string\n  onChange?: (color: string, skipHistoryStack: boolean) => void\n}\n\nexport default function ColorPicker({\n  disabled = false,\n  stopCloseOnClickSelf = true,\n  color,\n  onChange,\n  icon,\n  label,\n  ...rest\n}: Props) {\n  return (\n    <Popover modal={true}>\n      <PopoverTrigger asChild disabled={disabled}>\n        <Button\n          size={'sm'}\n          variant={'outline'}\n          className=\"h-8 w-8\"\n          {...rest}\n        >\n          <span className=\"size-4 rounded-full\">{icon}</span>\n          {/* <ChevronDownIcon className='size-4'/> */}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[200px] p-0\">\n        <HexColorPicker\n          color={color}\n          onChange={(color) => onChange?.(color, false)}\n        />\n        <Input\n          maxLength={7}\n          onChange={(e) => {\n            e.stopPropagation()\n            onChange?.(e?.currentTarget?.value, false)\n          }}\n          value={color}\n        />\n      </PopoverContent>\n    </Popover>\n  )\n}\n"]}