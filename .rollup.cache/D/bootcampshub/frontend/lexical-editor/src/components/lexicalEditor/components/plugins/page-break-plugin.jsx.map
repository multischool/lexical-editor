{"version":3,"file":"page-break-plugin.jsx","sourceRoot":"","sources":["page-break-plugin.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAA;AAEZ;;;;;;GAMG;AACH,OAAO,EAAE,SAAS,EAAO,MAAM,OAAO,CAAA;AAEtC,OAAO,EAAE,yBAAyB,EAAE,MAAM,uCAAuC,CAAA;AACjF,OAAO,EAAE,wBAAwB,EAAE,aAAa,EAAE,MAAM,gBAAgB,CAAA;AACxE,OAAO,EACL,aAAa,EACb,iBAAiB,EACjB,uBAAuB,EAEvB,aAAa,GACd,MAAM,SAAS,CAAA;AAEhB,OAAO,EAAE,oBAAoB,EAAE,aAAa,EAAE,MAAM,0BAA0B,CAAA;AAE9E,MAAM,CAAC,MAAM,iBAAiB,GAA8B,aAAa,EAAE,CAAA;AAE3E,MAAM,UAAU,eAAe;IAC7B,MAAM,CAAC,MAAM,CAAC,GAAG,yBAAyB,EAAE,CAAA;IAE5C,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC;YACtC,MAAM,IAAI,KAAK,CACb,4DAA4D,CAC7D,CAAA;QACH,CAAC;QAED,OAAO,aAAa,CAClB,MAAM,CAAC,eAAe,CACpB,iBAAiB,EACjB,GAAG,EAAE;YACH,MAAM,SAAS,GAAG,aAAa,EAAE,CAAA;YAEjC,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,EAAE,CAAC;gBAClC,OAAO,KAAK,CAAA;YACd,CAAC;YAED,MAAM,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,OAAO,EAAE,CAAA;YAC3C,IAAI,SAAS,KAAK,IAAI,EAAE,CAAC;gBACvB,MAAM,OAAO,GAAG,oBAAoB,EAAE,CAAA;gBACtC,wBAAwB,CAAC,OAAO,CAAC,CAAA;YACnC,CAAC;YAED,OAAO,IAAI,CAAA;QACb,CAAC,EACD,uBAAuB,CACxB,CACF,CAAA;IACH,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAA;IAEZ,OAAO,IAAI,CAAA;AACb,CAAC","sourcesContent":["'use client'\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { useEffect, JSX } from 'react'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport { $insertNodeToNearestRoot, mergeRegister } from '@lexical/utils'\nimport {\n  $getSelection,\n  $isRangeSelection,\n  COMMAND_PRIORITY_EDITOR,\n  LexicalCommand,\n  createCommand,\n} from 'lexical'\n\nimport { $createPageBreakNode, PageBreakNode } from '../nodes/page-break-node'\n\nexport const INSERT_PAGE_BREAK: LexicalCommand<undefined> = createCommand()\n\nexport function PageBreakPlugin(): JSX.Element | null {\n  const [editor] = useLexicalComposerContext()\n\n  useEffect(() => {\n    if (!editor.hasNodes([PageBreakNode])) {\n      throw new Error(\n        'PageBreakPlugin: PageBreakNode is not registered on editor'\n      )\n    }\n\n    return mergeRegister(\n      editor.registerCommand(\n        INSERT_PAGE_BREAK,\n        () => {\n          const selection = $getSelection()\n\n          if (!$isRangeSelection(selection)) {\n            return false\n          }\n\n          const focusNode = selection.focus.getNode()\n          if (focusNode !== null) {\n            const pgBreak = $createPageBreakNode()\n            $insertNodeToNearestRoot(pgBreak)\n          }\n\n          return true\n        },\n        COMMAND_PRIORITY_EDITOR\n      )\n    )\n  }, [editor])\n\n  return null\n}\n"]}