{"version":3,"file":"excalidraw-image.jsx","sourceRoot":"","sources":["excalidraw-image.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { useEffect, useState, JSX } from 'react'\n\nimport { exportToSvg } from '@excalidraw/excalidraw'\n// import {\n//   ExcalidrawElement,\n//   NonDeleted,\n// } from '@excalidraw/excalidraw/types/element/types'\n// import { AppState, BinaryFiles } from '@excalidraw/excalidraw/types/types'\n\ntype ExcalidrawElement = any\ntype NonDeleted = any\ntype AppState = any\ntype BinaryFiles = any\n\ntype ImageType = 'svg' | 'canvas'\n\ntype Dimension = 'inherit' | number\n\ntype Props = {\n  /**\n   * Configures the export setting for SVG/Canvas\n   */\n  appState: AppState\n  /**\n   * The css class applied to image to be rendered\n   */\n  className?: string\n  /**\n   * The Excalidraw elements to be rendered as an image\n   */\n  elements:any\n  /**\n   * The Excalidraw files associated with the elements\n   */\n  files: BinaryFiles\n  /**\n   * The height of the image to be rendered\n   */\n  height?: Dimension\n  /**\n   * The ref object to be used to render the image\n   */\n  imageContainerRef: React.MutableRefObject<HTMLDivElement | null>\n  /**\n   * The type of image to be rendered\n   */\n  imageType?: ImageType\n  /**\n   * The css class applied to the root element of this component\n   */\n  rootClassName?: string | null\n  /**\n   * The width of the image to be rendered\n   */\n  width?: Dimension\n}\n\n// exportToSvg has fonts from excalidraw.com\n// We don't want them to be used in open source\nconst removeStyleFromSvg_HACK = (svg: SVGElement) => {\n  const styleTag = svg?.firstElementChild?.firstElementChild\n\n  // Generated SVG is getting double-sized by height and width attributes\n  // We want to match the real size of the SVG element\n  const viewBox = svg.getAttribute('viewBox')\n  if (viewBox != null) {\n    const viewBoxDimensions = viewBox.split(' ')\n    svg.setAttribute('width', viewBoxDimensions[2])\n    svg.setAttribute('height', viewBoxDimensions[3])\n  }\n\n  if (styleTag && styleTag.tagName === 'style') {\n    styleTag.remove()\n  }\n}\n\n/**\n * @explorer-desc\n * A component for rendering Excalidraw elements as a static image\n */\nexport default function ExcalidrawImage({\n  elements,\n  files,\n  imageContainerRef,\n  appState,\n  rootClassName = null,\n  width = 'inherit',\n  height = 'inherit',\n}: Props): JSX.Element {\n  const [Svg, setSvg] = useState<SVGElement | null>(null)\n\n  useEffect(() => {\n    const setContent = async () => {\n      const svg: SVGElement = await exportToSvg({\n        appState,\n        elements,\n        files,\n      })\n      removeStyleFromSvg_HACK(svg)\n\n      svg.setAttribute('width', '100%')\n      svg.setAttribute('height', '100%')\n      svg.setAttribute('display', 'block')\n\n      setSvg(svg)\n    }\n    setContent()\n  }, [elements, files, appState])\n\n  const containerStyle: React.CSSProperties = {}\n  if (width !== 'inherit') {\n    containerStyle.width = `${width}px`\n  }\n  if (height !== 'inherit') {\n    containerStyle.height = `${height}px`\n  }\n\n  return (\n    <div\n      ref={(node) => {\n        if (node) {\n          if (imageContainerRef) {\n            imageContainerRef.current = node\n          }\n        }\n      }}\n      className={rootClassName ?? ''}\n      style={containerStyle}\n      dangerouslySetInnerHTML={{ __html: Svg?.outerHTML ?? '' }}\n    />\n  )\n}\n"]}