{"version":3,"file":"mention-commands.js","sourceRoot":"","sources":["mention-commands.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  $createTextNode,\n  $isParagraphNode,\n  $isTextNode,\n  $setSelection,\n  createCommand,\n  LexicalCommand,\n  LexicalNode,\n  TextNode,\n} from \"lexical\";\nimport { BeautifulMentionsItemData } from \"./BeautifulMentionsPluginProps\";\nimport {\n  $findBeautifulMentionNodes,\n  $getSelectionInfo,\n  $selectEnd,\n  getNextSibling,\n  getPreviousSibling,\n  getTextContent,\n} from \"./mention-utils\";\nimport {\n  $createBeautifulMentionNode,\n  BeautifulMentionNode,\n} from \"./MentionNode\";\nimport { $isPlaceholderNode } from \"./PlaceholderNode\";\n\nexport interface InsertMention {\n  /**\n   * The trigger that was used to insert the mention.\n   */\n  trigger: string;\n  /**\n   * The value to insert after the trigger.\n   */\n  value: string;\n  /**\n   * Whether to focus the editor after inserting the mention.\n   * @default true\n   */\n  focus?: boolean;\n  /**\n   * The data to associate with the mention.\n   */\n  data?: Record<string, BeautifulMentionsItemData>;\n}\n\nexport interface RemoveMentions {\n  /**\n   * The trigger to search for when removing mentions.\n   */\n  trigger: string;\n  /**\n   * An optional value to search for when removing mentions.\n   */\n  value?: string;\n  /**\n   * Whether to focus the editor after removing the mention.\n   * @default true\n   */\n  focus?: boolean;\n}\n\nexport interface RenameMentions {\n  /**\n   * The trigger to search for when renaming mentions.\n   */\n  trigger: string;\n  /**\n   * The new value to replace the old value with.\n   */\n  newValue: string;\n  /**\n   * An optional value to search for when renaming mentions.\n   */\n  value?: string;\n  /**\n   * Whether to focus the editor after renaming the mention.\n   * @default true\n   */\n  focus?: boolean;\n}\n\nexport interface HasMentions {\n  /**\n   * The trigger to search for when checking for mentions.\n   */\n  trigger: string;\n  /**\n   * An optional value to search for when checking for mentions.\n   */\n  value?: string;\n}\n\nexport interface OpenMentionMenu {\n  /**\n   * The trigger to insert when opening the mention menu.\n   */\n  trigger: string;\n}\n\nexport const INSERT_MENTION_COMMAND: LexicalCommand<InsertMention> =\n  createCommand(\"INSERT_MENTION_COMMAND\");\n\nexport const REMOVE_MENTIONS_COMMAND: LexicalCommand<RemoveMentions> =\n  createCommand(\"REMOVE_MENTIONS_COMMAND\");\n\nexport const RENAME_MENTIONS_COMMAND: LexicalCommand<RenameMentions> =\n  createCommand(\"RENAME_MENTIONS_COMMAND\");\n\nexport const OPEN_MENTION_MENU_COMMAND: LexicalCommand<OpenMentionMenu> =\n  createCommand(\"OPEN_MENTION_MENU_COMMAND\");\n\nexport function $insertTriggerAtSelection(\n  triggers: string[],\n  punctuation: string,\n  trigger: string,\n  autoSpace?: boolean,\n) {\n  return $insertMentionOrTrigger(\n    triggers,\n    punctuation,\n    trigger,\n    undefined,\n    undefined,\n    autoSpace,\n  );\n}\n\nexport function $insertMentionAtSelection(\n  triggers: string[],\n  punctuation: string,\n  trigger: string,\n  value: string,\n  data?: Record<string, BeautifulMentionsItemData>,\n  autoSpace?: boolean,\n) {\n  return $insertMentionOrTrigger(\n    triggers,\n    punctuation,\n    trigger,\n    value,\n    data,\n    autoSpace,\n  );\n}\n\nfunction $insertMentionOrTrigger(\n  triggers: string[],\n  punctuation: string,\n  trigger: string,\n  value?: string,\n  data?: Record<string, BeautifulMentionsItemData>,\n  autoSpace?: boolean,\n) {\n  const selectionInfo = $getSelectionInfo(triggers, punctuation);\n  if (!selectionInfo) {\n    return false;\n  }\n\n  const {\n    node,\n    selection,\n    wordCharBeforeCursor,\n    wordCharAfterCursor,\n    cursorAtStartOfNode,\n    cursorAtEndOfNode,\n    prevNode,\n    nextNode,\n  } = selectionInfo;\n\n  // Insert a mention node or a text node with the trigger to open the mention menu.\n  const mentionNode = value\n    ? $createBeautifulMentionNode(trigger, value, data)\n    : $createTextNode(trigger);\n\n  const nodes: LexicalNode[] = [];\n  // Insert a mention with a leading space\n  if (!($isParagraphNode(node) && cursorAtStartOfNode) && !$isTextNode(node)) {\n    if (autoSpace) {\n      nodes.push($createTextNode(\" \"));\n    }\n    nodes.push(mentionNode);\n    selection.insertNodes(nodes);\n    return true;\n  }\n\n  let spaceNode: TextNode | null = null;\n  if (\n    autoSpace &&\n    (wordCharBeforeCursor ||\n      (cursorAtStartOfNode && prevNode !== null && !$isTextNode(prevNode)))\n  ) {\n    nodes.push($createTextNode(\" \"));\n  }\n  nodes.push(mentionNode);\n  if (\n    autoSpace &&\n    (wordCharAfterCursor ||\n      (cursorAtEndOfNode && nextNode !== null && !$isTextNode(nextNode)))\n  ) {\n    spaceNode = $createTextNode(\" \");\n    nodes.push(spaceNode);\n  }\n\n  selection.insertNodes(nodes);\n\n  if (nodes.length > 1) {\n    if ($isTextNode(mentionNode)) {\n      mentionNode.select();\n    } else if (spaceNode) {\n      spaceNode.selectPrevious();\n    }\n  }\n\n  return true;\n}\n\nexport function $removeMention(trigger: string, value?: string, focus = true) {\n  let removed = false;\n  let prev: LexicalNode | null = null;\n  let next: LexicalNode | null = null;\n  const mentions = $findBeautifulMentionNodes();\n  for (const mention of mentions) {\n    const sameTrigger = mention.getTrigger() === trigger;\n    const sameValue = mention.getValue() === value;\n    if (sameTrigger && (sameValue || !value)) {\n      prev = getPreviousSibling(mention);\n      next = getNextSibling(mention);\n      mention.remove();\n      removed = true;\n      // Prevent double spaces\n      if (\n        $isTextNode(prev) &&\n        getTextContent(prev).endsWith(\" \") &&\n        next &&\n        getTextContent(next).startsWith(\" \")\n      ) {\n        prev.setTextContent(getTextContent(prev).slice(0, -1));\n      }\n      // Remove trailing space\n      if (\n        (next === null || $isPlaceholderNode(next)) &&\n        $isTextNode(prev) &&\n        getTextContent(prev).endsWith(\" \")\n      ) {\n        prev.setTextContent(getTextContent(prev).trimEnd());\n      }\n    }\n  }\n  if (removed && focus) {\n    focusEditor(prev, next);\n  } else if (!focus) {\n    $setSelection(null);\n  }\n  return removed;\n}\n\nexport function $renameMention(\n  trigger: string,\n  newValue: string,\n  value?: string,\n  focus = true,\n) {\n  const mentions = $findBeautifulMentionNodes();\n  let renamedMention: BeautifulMentionNode | null = null;\n  for (const mention of mentions) {\n    const sameTrigger = mention.getTrigger() === trigger;\n    const sameValue = mention.getValue() === value;\n    if (sameTrigger && (sameValue || !value)) {\n      renamedMention = mention;\n      mention.setValue(newValue);\n    }\n  }\n  if (renamedMention && focus) {\n    const prev = getPreviousSibling(renamedMention);\n    const next = getNextSibling(renamedMention);\n    focusEditor(prev, next);\n    if (next && $isTextNode(next)) {\n      next.select(0, 0);\n    } else {\n      $selectEnd();\n    }\n  } else if (!focus) {\n    $setSelection(null);\n  }\n  return renamedMention !== null;\n}\n\nfunction focusEditor(prev: LexicalNode | null, next: LexicalNode | null) {\n  if (next && $isTextNode(next)) {\n    next.select(0, 0);\n  } else if (prev && $isTextNode(prev)) {\n    prev.select();\n  } else {\n    $selectEnd();\n  }\n}\n"]}