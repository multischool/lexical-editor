{"version":3,"file":"toolbar-context.jsx","sourceRoot":"","sources":["toolbar-context.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAA;AAEZ,OAAO,EAAE,aAAa,EAAE,UAAU,EAAO,MAAM,OAAO,CAAA;AAItD,MAAM,OAAO,GAAG,aAAa,CAM1B;IACD,YAAY,EAAE,EAAmB;IACjC,cAAc,EAAE,GAAG,EAAE,GAAE,CAAC;IACxB,SAAS,EAAE,WAAW;IACtB,YAAY,EAAE,GAAG,EAAE,GAAE,CAAC;IACtB,SAAS,EAAE,GAAG,EAAE,GAAE,CAAC;CACpB,CAAC,CAAA;AAEF,MAAM,UAAU,cAAc,CAAC,EAC7B,YAAY,EACZ,cAAc,EACd,SAAS,EACT,YAAY,EACZ,SAAS,EACT,QAAQ,GAQT;IACC,OAAO,CACL,CAAC,OAAO,CAAC,QAAQ,CACf,KAAK,CAAC,CAAC,EAAE,YAAY,EAAE,cAAc,EAAE,SAAS,EAAE,YAAY,EAAE,SAAS,EAAE,CAAC,CAE5E;MAAA,CAAC,QAAQ,CACX;IAAA,EAAE,OAAO,CAAC,QAAQ,CAAC,CACpB,CAAA;AACH,CAAC;AAED,MAAM,UAAU,iBAAiB;IAC/B,OAAO,UAAU,CAAC,OAAO,CAAC,CAAA;AAC5B,CAAC","sourcesContent":["'use client'\n\nimport { createContext, useContext, JSX } from 'react'\n\nimport { LexicalEditor } from 'lexical'\n\nconst Context = createContext<{\n  activeEditor: LexicalEditor\n  $updateToolbar: () => void\n  blockType: string\n  setBlockType: (blockType: string) => void\n  showModal: (title: string, showModal: (onClose: () => void) => JSX.Element) => void\n}>({\n  activeEditor: {} as LexicalEditor,\n  $updateToolbar: () => {},\n  blockType: 'paragraph',\n  setBlockType: () => {},\n  showModal: () => {},\n})\n\nexport function ToolbarContext({\n  activeEditor,\n  $updateToolbar,\n  blockType,\n  setBlockType,\n  showModal,\n  children,\n}: {\n  activeEditor: LexicalEditor\n  $updateToolbar: () => void\n  blockType: string\n  setBlockType: (blockType: string) => void\n  showModal: (title: string, showModal: (onClose: () => void) => JSX.Element) => void\n  children: React.ReactNode\n}) {\n  return (\n    <Context.Provider\n      value={{ activeEditor, $updateToolbar, blockType, setBlockType, showModal }}\n    >\n      {children}\n    </Context.Provider>\n  )\n}\n\nexport function useToolbarContext() {\n  return useContext(Context)\n}\n"]}