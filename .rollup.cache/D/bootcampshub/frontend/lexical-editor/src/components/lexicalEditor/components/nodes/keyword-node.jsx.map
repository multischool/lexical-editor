{"version":3,"file":"keyword-node.jsx","sourceRoot":"","sources":["keyword-node.tsx"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAA;AAIlC,MAAM,OAAO,WAAY,SAAQ,QAAQ;IACvC,MAAM,CAAC,OAAO;QACZ,OAAO,SAAS,CAAA;IAClB,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,IAAiB;QAC5B,OAAO,IAAI,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAA;IACjD,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,cAAqC;QACrD,MAAM,IAAI,GAAG,kBAAkB,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;QACpD,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,MAAM,CAAC,CAAA;QACrC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,MAAM,CAAC,CAAA;QACrC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;QACjC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAA;QACnC,OAAO,IAAI,CAAA;IACb,CAAC;IAED,UAAU;QACR,uCACK,KAAK,CAAC,UAAU,EAAE,KACrB,IAAI,EAAE,SAAS,EACf,OAAO,EAAE,CAAC,IACX;IACH,CAAC;IAED,SAAS,CAAC,MAAoB;QAC5B,MAAM,GAAG,GAAG,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;QACnC,GAAG,CAAC,KAAK,CAAC,MAAM,GAAG,SAAS,CAAA;QAC5B,GAAG,CAAC,SAAS,GAAG,mCAAmC,CAAA;QACnD,OAAO,GAAG,CAAA;IACZ,CAAC;IAED,mBAAmB;QACjB,OAAO,KAAK,CAAA;IACd,CAAC;IAED,kBAAkB;QAChB,OAAO,KAAK,CAAA;IACd,CAAC;IAED,YAAY;QACV,OAAO,IAAI,CAAA;IACb,CAAC;CACF;AAED,MAAM,UAAU,kBAAkB,CAAC,OAAe;IAChD,OAAO,IAAI,WAAW,CAAC,OAAO,CAAC,CAAA;AACjC,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,IAAoC;IACjE,OAAO,IAAI,YAAY,WAAW,CAAA;AACpC,CAAC","sourcesContent":["import type { EditorConfig, LexicalNode, SerializedTextNode } from 'lexical'\nimport { TextNode } from 'lexical'\n\nexport type SerializedKeywordNode = SerializedTextNode\n\nexport class KeywordNode extends TextNode {\n  static getType(): string {\n    return 'keyword'\n  }\n\n  static clone(node: KeywordNode): KeywordNode {\n    return new KeywordNode(node.__text, node.__key)\n  }\n\n  static importJSON(serializedNode: SerializedKeywordNode): KeywordNode {\n    const node = $createKeywordNode(serializedNode.text)\n    node.setFormat(serializedNode.format)\n    node.setDetail(serializedNode.detail)\n    node.setMode(serializedNode.mode)\n    node.setStyle(serializedNode.style)\n    return node\n  }\n\n  exportJSON(): SerializedKeywordNode {\n    return {\n      ...super.exportJSON(),\n      type: 'keyword',\n      version: 1,\n    }\n  }\n\n  createDOM(config: EditorConfig): HTMLElement {\n    const dom = super.createDOM(config)\n    dom.style.cursor = 'default'\n    dom.className = 'keyword text-purple-900 font-bold'\n    return dom\n  }\n\n  canInsertTextBefore(): boolean {\n    return false\n  }\n\n  canInsertTextAfter(): boolean {\n    return false\n  }\n\n  isTextEntity(): true {\n    return true\n  }\n}\n\nexport function $createKeywordNode(keyword: string): KeywordNode {\n  return new KeywordNode(keyword)\n}\n\nexport function $isKeywordNode(node: LexicalNode | null | undefined): boolean {\n  return node instanceof KeywordNode\n}\n"]}