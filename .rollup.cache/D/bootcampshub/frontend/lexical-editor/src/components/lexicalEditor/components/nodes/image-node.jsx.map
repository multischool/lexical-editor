{"version":3,"file":"image-node.jsx","sourceRoot":"","sources":["image-node.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { Suspense, JSX } from 'react'\n\nimport type {\n  DOMConversionMap,\n  DOMConversionOutput,\n  DOMExportOutput,\n  EditorConfig,\n  LexicalEditor,\n  LexicalNode,\n  NodeKey,\n  SerializedEditor,\n  SerializedLexicalNode,\n  Spread,\n} from 'lexical'\nimport { $applyNodeReplacement, DecoratorNode, createEditor } from 'lexical'\n\nconst ImageComponent = React.lazy(() => import('../editor-ui/image-component'))\n\nexport interface ImagePayload {\n  altText: string\n  caption?: LexicalEditor\n  height?: number\n  key?: NodeKey\n  maxWidth?: number\n  showCaption?: boolean\n  src: string\n  width?: number\n  captionsEnabled?: boolean\n}\n\nfunction isGoogleDocCheckboxImg(img: HTMLImageElement): boolean {\n  return (\n    img.parentElement != null &&\n    img.parentElement.tagName === 'LI' &&\n    img.previousSibling === null &&\n    img.getAttribute('aria-roledescription') === 'checkbox'\n  )\n}\n\nfunction $convertImageElement(domNode: Node): null | DOMConversionOutput {\n  const img = domNode as HTMLImageElement\n  if (img.src.startsWith('file:///') || isGoogleDocCheckboxImg(img)) {\n    return null\n  }\n  const { alt: altText, src, width, height } = img\n  const node = $createImageNode({ altText, height, src, width })\n  return { node }\n}\n\nexport type SerializedImageNode = Spread<\n  {\n    altText: string\n    caption: SerializedEditor\n    height?: number\n    maxWidth: number\n    showCaption: boolean\n    src: string\n    width?: number\n  },\n  SerializedLexicalNode\n>\n\nexport class ImageNode extends DecoratorNode<JSX.Element> {\n  __src: string\n  __altText: string\n  __width: 'inherit' | number\n  __height: 'inherit' | number\n  __maxWidth: number\n  __showCaption: boolean\n  __caption: LexicalEditor\n  // Captions cannot yet be used within editor cells\n  __captionsEnabled: boolean\n\n  static getType(): string {\n    return 'image'\n  }\n\n  static clone(node: ImageNode): ImageNode {\n    return new ImageNode(\n      node.__src,\n      node.__altText,\n      node.__maxWidth,\n      node.__width,\n      node.__height,\n      node.__showCaption,\n      node.__caption,\n      node.__captionsEnabled,\n      node.__key\n    )\n  }\n\n  static importJSON(serializedNode: SerializedImageNode): ImageNode {\n    const { altText, height, width, maxWidth, caption, src, showCaption } =\n      serializedNode\n    const node = $createImageNode({\n      altText,\n      height,\n      maxWidth,\n      showCaption,\n      src,\n      width,\n    })\n    const nestedEditor = node.__caption\n    const editorState = nestedEditor.parseEditorState(caption.editorState)\n    if (!editorState.isEmpty()) {\n      nestedEditor.setEditorState(editorState)\n    }\n    return node\n  }\n\n  exportDOM(): DOMExportOutput {\n    const element = document.createElement('img')\n    element.setAttribute('src', this.__src)\n    element.setAttribute('alt', this.__altText)\n    element.setAttribute('width', this.__width.toString())\n    element.setAttribute('height', this.__height.toString())\n    return { element }\n  }\n\n  static importDOM(): DOMConversionMap | null {\n    return {\n      img: (node: Node) => ({\n        conversion: $convertImageElement,\n        priority: 0,\n      }),\n    }\n  }\n\n  constructor(\n    src: string,\n    altText: string,\n    maxWidth: number,\n    width?: 'inherit' | number,\n    height?: 'inherit' | number,\n    showCaption?: boolean,\n    caption?: LexicalEditor,\n    captionsEnabled?: boolean,\n    key?: NodeKey\n  ) {\n    super(key)\n    this.__src = src\n    this.__altText = altText\n    this.__maxWidth = maxWidth\n    this.__width = width || 'inherit'\n    this.__height = height || 'inherit'\n    this.__showCaption = showCaption || false\n    this.__caption =\n      caption ||\n      createEditor({\n        nodes: [],\n      })\n    this.__captionsEnabled = captionsEnabled || captionsEnabled === undefined\n  }\n\n  exportJSON(): SerializedImageNode {\n    return {\n      altText: this.getAltText(),\n      caption: this.__caption.toJSON(),\n      height: this.__height === 'inherit' ? 0 : this.__height,\n      maxWidth: this.__maxWidth,\n      showCaption: this.__showCaption,\n      src: this.getSrc(),\n      type: 'image',\n      version: 1,\n      width: this.__width === 'inherit' ? 0 : this.__width,\n    }\n  }\n\n  setWidthAndHeight(\n    width: 'inherit' | number,\n    height: 'inherit' | number\n  ): void {\n    const writable = this.getWritable()\n    writable.__width = width\n    writable.__height = height\n  }\n\n  setShowCaption(showCaption: boolean): void {\n    const writable = this.getWritable()\n    writable.__showCaption = showCaption\n  }\n\n  // View\n\n  createDOM(config: EditorConfig): HTMLElement {\n    const span = document.createElement('span')\n    const theme = config.theme\n    const className = theme.image\n    if (className !== undefined) {\n      span.className = className\n    }\n    return span\n  }\n\n  updateDOM(): false {\n    return false\n  }\n\n  getSrc(): string {\n    return this.__src\n  }\n\n  getAltText(): string {\n    return this.__altText\n  }\n\n  decorate(): JSX.Element {\n    return (\n      <Suspense fallback={null}>\n        <ImageComponent\n          src={this.__src}\n          altText={this.__altText}\n          width={this.__width}\n          height={this.__height}\n          maxWidth={this.__maxWidth}\n          nodeKey={this.getKey()}\n          showCaption={this.__showCaption}\n          caption={this.__caption}\n          captionsEnabled={this.__captionsEnabled}\n          resizable={true}\n        />\n      </Suspense>\n    )\n  }\n}\n\nexport function $createImageNode({\n  altText,\n  height,\n  maxWidth = 500,\n  captionsEnabled,\n  src,\n  width,\n  showCaption,\n  caption,\n  key,\n}: ImagePayload): ImageNode {\n  return $applyNodeReplacement(\n    new ImageNode(\n      src,\n      altText,\n      maxWidth,\n      width,\n      height,\n      showCaption,\n      caption,\n      captionsEnabled,\n      key\n    )\n  )\n}\n\nexport function $isImageNode(\n  node: LexicalNode | null | undefined\n): node is ImageNode {\n  return node instanceof ImageNode\n}\n"]}