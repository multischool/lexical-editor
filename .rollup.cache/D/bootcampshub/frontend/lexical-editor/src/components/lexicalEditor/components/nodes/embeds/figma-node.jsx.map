{"version":3,"file":"figma-node.jsx","sourceRoot":"","sources":["figma-node.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAA;AAG9B,OAAO,EAAE,0BAA0B,EAAE,MAAM,kDAAkD,CAAA;AAC7F,OAAO,EACL,kBAAkB,GAEnB,MAAM,0CAA0C,CAAA;AAoBjD,SAAS,cAAc,CAAC,EACtB,SAAS,EACT,MAAM,EACN,OAAO,EACP,UAAU,GACU;IACpB,OAAO,CACL,CAAC,0BAA0B,CACzB,SAAS,CAAC,CAAC,SAAS,CAAC,CACrB,MAAM,CAAC,CAAC,MAAM,CAAC,CACf,OAAO,CAAC,CAAC,OAAO,CAAC,CAEjB;MAAA,CAAC,MAAM,CACL,KAAK,CAAC,KAAK,CACX,MAAM,CAAC,KAAK,CACZ,GAAG,CAAC,CAAC;qCACwB,UAAU,EAAE,CAAC,CAC1C,eAAe,CAAC,CAAC,IAAI,CAAC,EAE1B;IAAA,EAAE,0BAA0B,CAAC,CAC9B,CAAA;AACH,CAAC;AASD,MAAM,OAAO,SAAU,SAAQ,kBAAkB;IAG/C,MAAM,CAAC,OAAO;QACZ,OAAO,OAAO,CAAA;IAChB,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,IAAe;QAC1B,OAAO,IAAI,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,CAAA;IAC5D,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,cAAmC;QACnD,MAAM,IAAI,GAAG,gBAAgB,CAAC,cAAc,CAAC,UAAU,CAAC,CAAA;QACxD,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,MAAM,CAAC,CAAA;QACrC,OAAO,IAAI,CAAA;IACb,CAAC;IAED,UAAU;QACR,uCACK,KAAK,CAAC,UAAU,EAAE,KACrB,UAAU,EAAE,IAAI,CAAC,IAAI,EACrB,IAAI,EAAE,OAAO,EACb,OAAO,EAAE,CAAC,IACX;IACH,CAAC;IAED,YAAY,EAAU,EAAE,MAA0B,EAAE,GAAa;QAC/D,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;QAClB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAA;IAChB,CAAC;IAED,SAAS;QACP,OAAO,KAAK,CAAA;IACd,CAAC;IAED,KAAK;QACH,OAAO,IAAI,CAAC,IAAI,CAAA;IAClB,CAAC;IAED,cAAc,CACZ,aAAmC,EACnC,qBAAyC;QAEzC,OAAO,8BAA8B,IAAI,CAAC,IAAI,EAAE,CAAA;IAClD,CAAC;IAED,QAAQ,CAAC,OAAsB,EAAE,MAAoB;QACnD,MAAM,eAAe,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,IAAI,EAAE,CAAA;QACrD,MAAM,SAAS,GAAG;YAChB,IAAI,EAAE,eAAe,CAAC,IAAI,IAAI,EAAE;YAChC,KAAK,EAAE,eAAe,CAAC,KAAK,IAAI,EAAE;SACnC,CAAA;QACD,OAAO,CACL,CAAC,cAAc,CACb,SAAS,CAAC,CAAC,SAAS,CAAC,CACrB,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CACtB,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CACvB,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EACtB,CACH,CAAA;IACH,CAAC;CACF;AAED,MAAM,UAAU,gBAAgB,CAAC,UAAkB;IACjD,OAAO,IAAI,SAAS,CAAC,UAAU,CAAC,CAAA;AAClC,CAAC;AAED,MAAM,UAAU,YAAY,CAC1B,IAAgD;IAEhD,OAAO,IAAI,YAAY,SAAS,CAAA;AAClC,CAAC","sourcesContent":["import * as React from 'react'\nimport { JSX } from 'react'\n\nimport { BlockWithAlignableContents } from '@lexical/react/LexicalBlockWithAlignableContents'\nimport {\n  DecoratorBlockNode,\n  SerializedDecoratorBlockNode,\n} from '@lexical/react/LexicalDecoratorBlockNode'\nimport type {\n  EditorConfig,\n  ElementFormatType,\n  LexicalEditor,\n  LexicalNode,\n  NodeKey,\n  Spread,\n} from 'lexical'\n\ntype FigmaComponentProps = Readonly<{\n  className: Readonly<{\n    base: string\n    focus: string\n  }>\n  format: ElementFormatType | null\n  nodeKey: NodeKey\n  documentID: string\n}>\n\nfunction FigmaComponent({\n  className,\n  format,\n  nodeKey,\n  documentID,\n}: FigmaComponentProps) {\n  return (\n    <BlockWithAlignableContents\n      className={className}\n      format={format}\n      nodeKey={nodeKey}\n    >\n      <iframe\n        width=\"560\"\n        height=\"315\"\n        src={`https://www.figma.com/embed?embed_host=lexical&url=\\\n        https://www.figma.com/file/${documentID}`}\n        allowFullScreen={true}\n      />\n    </BlockWithAlignableContents>\n  )\n}\n\nexport type SerializedFigmaNode = Spread<\n  {\n    documentID: string\n  },\n  SerializedDecoratorBlockNode\n>\n\nexport class FigmaNode extends DecoratorBlockNode {\n  __id: string\n\n  static getType(): string {\n    return 'figma'\n  }\n\n  static clone(node: FigmaNode): FigmaNode {\n    return new FigmaNode(node.__id, node.__format, node.__key)\n  }\n\n  static importJSON(serializedNode: SerializedFigmaNode): FigmaNode {\n    const node = $createFigmaNode(serializedNode.documentID)\n    node.setFormat(serializedNode.format)\n    return node\n  }\n\n  exportJSON(): SerializedFigmaNode {\n    return {\n      ...super.exportJSON(),\n      documentID: this.__id,\n      type: 'figma',\n      version: 1,\n    }\n  }\n\n  constructor(id: string, format?: ElementFormatType, key?: NodeKey) {\n    super(format, key)\n    this.__id = id\n  }\n\n  updateDOM(): false {\n    return false\n  }\n\n  getId(): string {\n    return this.__id\n  }\n\n  getTextContent(\n    _includeInert?: boolean | undefined,\n    _includeDirectionless?: false | undefined\n  ): string {\n    return `https://www.figma.com/file/${this.__id}`\n  }\n\n  decorate(_editor: LexicalEditor, config: EditorConfig): JSX.Element {\n    const embedBlockTheme = config.theme.embedBlock || {}\n    const className = {\n      base: embedBlockTheme.base || '',\n      focus: embedBlockTheme.focus || '',\n    }\n    return (\n      <FigmaComponent\n        className={className}\n        format={this.__format}\n        nodeKey={this.getKey()}\n        documentID={this.__id}\n      />\n    )\n  }\n}\n\nexport function $createFigmaNode(documentID: string): FigmaNode {\n  return new FigmaNode(documentID)\n}\n\nexport function $isFigmaNode(\n  node: FigmaNode | LexicalNode | null | undefined\n): node is FigmaNode {\n  return node instanceof FigmaNode\n}\n"]}