{"version":3,"file":"context-menu-plugin.jsx","sourceRoot":"","sources":["context-menu-plugin.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client'\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { useCallback, useMemo, JSX } from 'react'\nimport * as React from 'react'\n\nimport dynamic from 'next/dynamic'\n\nimport { $isLinkNode, TOGGLE_LINK_COMMAND } from '@lexical/link'\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport { MenuOption } from '@lexical/react/LexicalContextMenuPlugin'\nimport { PopoverPortal } from '@radix-ui/react-popover'\nimport {\n  $getNearestNodeFromDOMNode,\n  $getSelection,\n  $isRangeSelection,\n  COPY_COMMAND,\n  CUT_COMMAND,\n  type LexicalNode,\n  PASTE_COMMAND,\n} from 'lexical'\n\nimport { Command, CommandItem, CommandList } from '../../ui/command'\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '../../ui/popover'\n\nconst LexicalContextMenuPlugin = dynamic(\n  () => import('./default/lexical-context-menu-plugin'),\n  { ssr: false }\n)\n\nexport class ContextMenuOption extends MenuOption {\n  title: string\n  onSelect: (targetNode: LexicalNode | null) => void\n  constructor(\n    title: string,\n    options: {\n      onSelect: (targetNode: LexicalNode | null) => void\n    }\n  ) {\n    super(title)\n    this.title = title\n    this.onSelect = options.onSelect.bind(this)\n  }\n}\n\nexport function ContextMenuPlugin(): JSX.Element {\n  const [editor] = useLexicalComposerContext()\n  const [isOpen, setIsOpen] = React.useState(false)\n\n  const defaultOptions = useMemo(() => {\n    return [\n      new ContextMenuOption(`Copy`, {\n        onSelect: (_node) => {\n          editor.dispatchCommand(COPY_COMMAND, null)\n        },\n      }),\n      new ContextMenuOption(`Cut`, {\n        onSelect: (_node) => {\n          editor.dispatchCommand(CUT_COMMAND, null)\n        },\n      }),\n      new ContextMenuOption(`Paste`, {\n        onSelect: (_node) => {\n          navigator.clipboard.read().then(async function (...args) {\n            const data = new DataTransfer()\n\n            const items = await navigator.clipboard.read()\n            const item = items[0]\n\n            const permission = await navigator.permissions.query({\n              // @ts-expect-error These types are incorrect.\n              name: 'clipboard-read',\n            })\n            if (permission.state === 'denied') {\n              alert('Not allowed to paste from clipboard.')\n              return\n            }\n\n            for (const type of item.types) {\n              const dataString = await (await item.getType(type)).text()\n              data.setData(type, dataString)\n            }\n\n            const event = new ClipboardEvent('paste', {\n              clipboardData: data,\n            })\n\n            editor.dispatchCommand(PASTE_COMMAND, event)\n          })\n        },\n      }),\n      new ContextMenuOption(`Paste as Plain Text`, {\n        onSelect: (_node) => {\n          navigator.clipboard.read().then(async function (...args) {\n            const permission = await navigator.permissions.query({\n              // @ts-expect-error These types are incorrect.\n              name: 'clipboard-read',\n            })\n\n            if (permission.state === 'denied') {\n              alert('Not allowed to paste from clipboard.')\n              return\n            }\n\n            const data = new DataTransfer()\n            const items = await navigator.clipboard.readText()\n            data.setData('text/plain', items)\n\n            const event = new ClipboardEvent('paste', {\n              clipboardData: data,\n            })\n            editor.dispatchCommand(PASTE_COMMAND, event)\n          })\n        },\n      }),\n      new ContextMenuOption(`Delete Node`, {\n        onSelect: (_node) => {\n          const selection = $getSelection()\n          if ($isRangeSelection(selection)) {\n            const currentNode = selection.anchor.getNode()\n            const ancestorNodeWithRootAsParent = currentNode.getParents().at(-2)\n\n            ancestorNodeWithRootAsParent?.remove()\n          }\n        },\n      }),\n    ]\n  }, [editor])\n\n  const [options, setOptions] = React.useState(defaultOptions)\n\n  const onSelectOption = useCallback(\n    (\n      selectedOption: ContextMenuOption,\n      targetNode: LexicalNode | null,\n      closeMenu: () => void\n    ) => {\n      editor.update(() => {\n        selectedOption.onSelect(targetNode)\n        closeMenu()\n      })\n    },\n    [editor]\n  )\n\n  const onWillOpen = (event: MouseEvent) => {\n    let newOptions = defaultOptions\n    setIsOpen(true)\n    editor.update(() => {\n      const node = $getNearestNodeFromDOMNode(event.target as Element)\n      if (node) {\n        const parent = node.getParent()\n        if ($isLinkNode(parent)) {\n          newOptions = [\n            new ContextMenuOption(`Remove Link`, {\n              onSelect: (_node) => {\n                editor.dispatchCommand(TOGGLE_LINK_COMMAND, null)\n              },\n            }),\n            ...defaultOptions,\n          ]\n        }\n      }\n    })\n    setOptions(newOptions)\n  }\n\n  return (\n    <LexicalContextMenuPlugin\n      options={options}\n      onSelectOption={(option, targetNode) => {\n        onSelectOption(option as ContextMenuOption, targetNode, () => {\n          setIsOpen(false)\n        })\n      }}\n      onWillOpen={onWillOpen}\n      onOpen={() => {\n        setIsOpen(true)\n      }}\n      onClose={() => {\n        setIsOpen(false)\n      }}\n      menuRenderFn={(\n        anchorElementRef,\n        { options: _options, selectOptionAndCleanUp },\n        { setMenuRef }\n      ) => {\n        return anchorElementRef.current ? (\n          <Popover open={isOpen} onOpenChange={setIsOpen}>\n            <PopoverPortal container={anchorElementRef.current}>\n              <div>\n                <PopoverTrigger\n                  ref={setMenuRef}\n                  style={{\n                    marginLeft: anchorElementRef.current?.style.width,\n                    userSelect: 'none',\n                  }}\n                />\n                <PopoverContent className=\"w-[200px] p-1\">\n                  <Command>\n                    <CommandList>\n                      {options.map((option) => (\n                        <CommandItem\n                          key={option.key}\n                          onSelect={() => {\n                            selectOptionAndCleanUp(option)\n                          }}\n                        >\n                          {option.title}\n                        </CommandItem>\n                      ))}\n                    </CommandList>\n                  </Command>\n                </PopoverContent>\n              </div>\n            </PopoverPortal>\n          </Popover>\n        ) : null\n      }}\n    />\n  )\n}\n"]}