{"version":3,"file":"font-format-toolbar-plugin.jsx","sourceRoot":"","sources":["font-format-toolbar-plugin.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAA;AAEZ,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAA;AAEhC,OAAO,EAAE,iBAAiB,EAAE,MAAM,gBAAgB,CAAA;AAClD,OAAO,EACL,iBAAiB,EAEjB,mBAAmB,GAEpB,MAAM,SAAS,CAAA;AAChB,OAAO,EACL,QAAQ,EACR,QAAQ,EACR,UAAU,EACV,iBAAiB,EACjB,aAAa,GACd,MAAM,cAAc,CAAA;AAErB,OAAO,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAA;AAE3C,OAAO,EAAE,iBAAiB,EAAE,MAAM,+BAA+B,CAAA;AACjE,OAAO,EAAE,uBAAuB,EAAE,MAAM,uCAAuC,CAAA;AAE/E,MAAM,KAAK,GAAuD;IAChE,IAAI,EAAE,QAAQ;IACd,MAAM,EAAE,UAAU;IAClB,SAAS,EAAE,aAAa;IACxB,aAAa,EAAE,iBAAiB;IAChC,IAAI,EAAE,QAAQ;CACN,CAAA;AAEV,MAAM,UAAU,uBAAuB,CAAC,EACtC,MAAM,GAGP;IACC,MAAM,EAAE,YAAY,EAAE,GAAG,iBAAiB,EAAE,CAAA;IAC5C,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,QAAQ,CAAU,KAAK,CAAC,CAAA;IAE5D,MAAM,cAAc,GAAG,CAAC,SAAwB,EAAE,EAAE;QAClD,IAAI,iBAAiB,CAAC,SAAS,CAAC,IAAI,iBAAiB,CAAC,SAAS,CAAC,EAAE,CAAC;YACjE,aAAa;YACb,aAAa,CAAC,SAAS,CAAC,SAAS,CAAC,MAAwB,CAAC,CAAC,CAAA;QAC9D,CAAC;IACH,CAAC,CAAA;IAED,uBAAuB,CAAC,cAAc,CAAC,CAAA;IAEvC,MAAM,IAAI,GAAG,KAAK,CAAC,MAAwB,CAAsB,CAAA;IAEjE,OAAO,CACL,CAAC,MAAM,CACL,UAAU,CAAC,aAAa,CACxB,OAAO,CAAC,SAAS,CACjB,IAAI,CAAC,IAAI,CACT,cAAc,CAAC,CAAC,UAAU,CAAC,CAC3B,OAAO,CAAC,CAAC,UAAU,CAAC,CACpB,eAAe,CAAC,CAAC,aAAa,CAAC,CAC/B,OAAO,CAAC,CAAC,GAAG,EAAE;YACZ,YAAY,CAAC,eAAe,CAC1B,mBAAmB,EACnB,MAAwB,CACzB,CAAA;QACH,CAAC,CAAC,CAEF;MAAA,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAC3B;IAAA,EAAE,MAAM,CAAC,CACV,CAAA;AACH,CAAC","sourcesContent":["'use client'\n\nimport { useState } from 'react'\n\nimport { $isTableSelection } from '@lexical/table'\nimport {\n  $isRangeSelection,\n  BaseSelection,\n  FORMAT_TEXT_COMMAND,\n  TextFormatType,\n} from 'lexical'\nimport {\n  BoldIcon,\n  CodeIcon,\n  ItalicIcon,\n  StrikethroughIcon,\n  UnderlineIcon,\n} from 'lucide-react'\n\nimport { Toggle } from '../../../ui/toggle'\n\nimport { useToolbarContext } from '../../context/toolbar-context'\nimport { useUpdateToolbarHandler } from '../../editor-hooks/use-update-toolbar'\n\nconst Icons: Partial<Record<TextFormatType, React.ElementType>> = {\n  bold: BoldIcon,\n  italic: ItalicIcon,\n  underline: UnderlineIcon,\n  strikethrough: StrikethroughIcon,\n  code: CodeIcon,\n} as const\n\nexport function FontFormatToolbarPlugin({\n  format,\n}: {\n  format: Omit<TextFormatType, 'highlight' | 'subscript' | 'superscript'>\n}) {\n  const { activeEditor } = useToolbarContext()\n  const [isSelected, setIsSelected] = useState<boolean>(false)\n\n  const $updateToolbar = (selection: BaseSelection) => {\n    if ($isRangeSelection(selection) || $isTableSelection(selection)) {\n      // @ts-ignore\n      setIsSelected(selection.hasFormat(format as TextFormatType))\n    }\n  }\n\n  useUpdateToolbarHandler($updateToolbar)\n\n  const Icon = Icons[format as TextFormatType] as React.ElementType\n\n  return (\n    <Toggle\n      aria-label=\"Toggle bold\"\n      variant=\"outline\"\n      size=\"sm\"\n      defaultPressed={isSelected}\n      pressed={isSelected}\n      onPressedChange={setIsSelected}\n      onClick={() => {\n        activeEditor.dispatchCommand(\n          FORMAT_TEXT_COMMAND,\n          format as TextFormatType\n        )\n      }}\n    >\n      <Icon className=\"h-4 w-4\" />\n    </Toggle>\n  )\n}\n"]}