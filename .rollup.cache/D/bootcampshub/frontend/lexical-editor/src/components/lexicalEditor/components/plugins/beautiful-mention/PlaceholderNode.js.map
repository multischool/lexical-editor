{"version":3,"file":"PlaceholderNode.js","sourceRoot":"","sources":["PlaceholderNode.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,qBAAqB,EAGrB,WAAW,GAIZ,MAAM,SAAS,CAAC;AAIjB,qDAAqD;AACrD,MAAM,OAAO,eAAgB,SAAQ,WAAW;IAC9C,MAAM,CAAC,OAAO;QACZ,OAAO,aAAa,CAAC;IACvB,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,IAAqB;QAChC,OAAO,IAAI,eAAe,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7D,CAAC;IAED,YACU,aAAqB,EAC7B,GAAa;QAEb,KAAK,CAAC,GAAG,CAAC,CAAC;QAHH,kBAAa,GAAb,aAAa,CAAQ;IAI/B,CAAC;IAED,SAAS,CAAC,CAAe;QACvB,MAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC9C,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,QAAQ,CAAC;QACjC,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;QAC9B,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,CAAC;QAC3B,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC;QAC7B,OAAO,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;QAC5B,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,SAAS;QACP,OAAO,KAAK,CAAC;IACf,CAAC;IAED,MAAM,CAAC,SAAS;QACd,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,CAA4B;QAC5C,OAAO,sBAAsB,EAAE,CAAC;IAClC,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC;IACd,CAAC;IAED,UAAU;QACR,uCACK,KAAK,CAAC,UAAU,EAAE,KACrB,IAAI,EAAE,aAAa,IACnB;IACJ,CAAC;IAED,cAAc;QACZ,OAAO,EAAE,CAAC;IACZ,CAAC;CACF;AAED,MAAM,UAAU,sBAAsB,CAAC,WAAW,GAAG,EAAE;IACrD,MAAM,eAAe,GAAG,IAAI,eAAe,CAAC,WAAW,CAAC,CAAC;IACzD,OAAO,qBAAqB,CAAC,eAAe,CAAC,CAAC;AAChD,CAAC;AAED,MAAM,UAAU,kBAAkB,CAChC,IAAoC;IAEpC,OAAO,IAAI,YAAY,eAAe,CAAC;AACzC,CAAC","sourcesContent":["import {\n  $applyNodeReplacement,\n  DOMConversionMap,\n  EditorConfig,\n  ElementNode,\n  SerializedElementNode,\n  type LexicalNode,\n  type NodeKey,\n} from \"lexical\";\n\nexport type SerializedPlaceholderNode = SerializedElementNode;\n\n/* eslint @typescript-eslint/no-unused-vars: \"off\" */\nexport class PlaceholderNode extends ElementNode {\n  static getType(): string {\n    return \"placeholder\";\n  }\n\n  static clone(node: PlaceholderNode): PlaceholderNode {\n    return new PlaceholderNode(node.__textContent, node.__key);\n  }\n\n  constructor(\n    private __textContent: string,\n    key?: NodeKey,\n  ) {\n    super(key);\n  }\n\n  createDOM(_: EditorConfig): HTMLImageElement {\n    const element = document.createElement(\"img\");\n    element.style.display = \"inline\";\n    element.style.border = \"none\";\n    element.style.margin = \"0\";\n    element.style.height = \"1px\";\n    element.style.width = \"1px\";\n    return element;\n  }\n\n  updateDOM(): boolean {\n    return false;\n  }\n\n  static importDOM(): DOMConversionMap | null {\n    return null;\n  }\n\n  static importJSON(_: SerializedPlaceholderNode): PlaceholderNode {\n    return $createPlaceholderNode();\n  }\n\n  isInline(): boolean {\n    return true;\n  }\n\n  exportJSON(): SerializedPlaceholderNode {\n    return {\n      ...super.exportJSON(),\n      type: \"placeholder\",\n    };\n  }\n\n  getTextContent(): string {\n    return \"\";\n  }\n}\n\nexport function $createPlaceholderNode(textContent = \"\"): PlaceholderNode {\n  const placeholderNode = new PlaceholderNode(textContent);\n  return $applyNodeReplacement(placeholderNode);\n}\n\nexport function $isPlaceholderNode(\n  node: LexicalNode | null | undefined,\n): node is PlaceholderNode {\n  return node instanceof PlaceholderNode;\n}\n"]}