{"version":3,"file":"poll-node.jsx","sourceRoot":"","sources":["poll-node.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { Suspense, JSX } from 'react'\n\nimport {\n  DOMConversionMap,\n  DOMConversionOutput,\n  DOMExportOutput,\n  DecoratorNode,\n  LexicalNode,\n  NodeKey,\n  SerializedLexicalNode,\n  Spread,\n} from 'lexical'\n\nexport type Options = ReadonlyArray<Option>\n\nexport type Option = Readonly<{\n  text: string\n  uid: string\n  votes: Array<number>\n}>\n\nconst PollComponent = React.lazy(() => import('../editor-ui/poll-component'))\n\nfunction createUID(): string {\n  return Math.random()\n    .toString(36)\n    .replace(/[^a-z]+/g, '')\n    .substr(0, 5)\n}\n\nexport function createPollOption(text = ''): Option {\n  return {\n    text,\n    uid: createUID(),\n    votes: [],\n  }\n}\n\nfunction cloneOption(\n  option: Option,\n  text: string,\n  votes?: Array<number>\n): Option {\n  return {\n    text,\n    uid: option.uid,\n    votes: votes || Array.from(option.votes),\n  }\n}\n\nexport type SerializedPollNode = Spread<\n  {\n    question: string\n    options: Options\n  },\n  SerializedLexicalNode\n>\n\nfunction $convertPollElement(domNode: HTMLElement): DOMConversionOutput | null {\n  const question = domNode.getAttribute('data-lexical-poll-question')\n  const options = domNode.getAttribute('data-lexical-poll-options')\n  if (question !== null && options !== null) {\n    const node = $createPollNode(question, JSON.parse(options))\n    return { node }\n  }\n  return null\n}\n\nexport class PollNode extends DecoratorNode<JSX.Element> {\n  __question: string\n  __options: Options\n\n  static getType(): string {\n    return 'poll'\n  }\n\n  static clone(node: PollNode): PollNode {\n    return new PollNode(node.__question, node.__options, node.__key)\n  }\n\n  static importJSON(serializedNode: SerializedPollNode): PollNode {\n    const node = $createPollNode(\n      serializedNode.question,\n      serializedNode.options\n    )\n    serializedNode.options.forEach(node.addOption)\n    return node\n  }\n\n  constructor(question: string, options: Options, key?: NodeKey) {\n    super(key)\n    this.__question = question\n    this.__options = options\n  }\n\n  exportJSON(): SerializedPollNode {\n    return {\n      options: this.__options,\n      question: this.__question,\n      type: 'poll',\n      version: 1,\n    }\n  }\n\n  addOption(option: Option): void {\n    const self = this.getWritable()\n    const options = Array.from(self.__options)\n    options.push(option)\n    self.__options = options\n  }\n\n  deleteOption(option: Option): void {\n    const self = this.getWritable()\n    const options = Array.from(self.__options)\n    const index = options.indexOf(option)\n    options.splice(index, 1)\n    self.__options = options\n  }\n\n  setOptionText(option: Option, text: string): void {\n    const self = this.getWritable()\n    const clonedOption = cloneOption(option, text)\n    const options = Array.from(self.__options)\n    const index = options.indexOf(option)\n    options[index] = clonedOption\n    self.__options = options\n  }\n\n  toggleVote(option: Option, clientID: number): void {\n    const self = this.getWritable()\n    const votes = option.votes\n    const votesClone = Array.from(votes)\n    const voteIndex = votes.indexOf(clientID)\n    if (voteIndex === -1) {\n      votesClone.push(clientID)\n    } else {\n      votesClone.splice(voteIndex, 1)\n    }\n    const clonedOption = cloneOption(option, option.text, votesClone)\n    const options = Array.from(self.__options)\n    const index = options.indexOf(option)\n    options[index] = clonedOption\n    self.__options = options\n  }\n\n  static importDOM(): DOMConversionMap | null {\n    return {\n      span: (domNode: HTMLElement) => {\n        if (!domNode.hasAttribute('data-lexical-poll-question')) {\n          return null\n        }\n        return {\n          conversion: $convertPollElement,\n          priority: 2,\n        }\n      },\n    }\n  }\n\n  exportDOM(): DOMExportOutput {\n    const element = document.createElement('span')\n    element.setAttribute('data-lexical-poll-question', this.__question)\n    element.setAttribute(\n      'data-lexical-poll-options',\n      JSON.stringify(this.__options)\n    )\n    return { element }\n  }\n\n  createDOM(): HTMLElement {\n    const elem = document.createElement('span')\n    elem.style.display = 'inline-block'\n    return elem\n  }\n\n  updateDOM(): false {\n    return false\n  }\n\n  decorate(): JSX.Element {\n    return (\n      <Suspense fallback={null}>\n        <PollComponent\n          question={this.__question}\n          options={this.__options}\n          nodeKey={this.__key}\n        />\n      </Suspense>\n    )\n  }\n}\n\nexport function $createPollNode(question: string, options: Options): PollNode {\n  return new PollNode(question, options)\n}\n\nexport function $isPollNode(\n  node: LexicalNode | null | undefined\n): node is PollNode {\n  return node instanceof PollNode\n}\n"]}