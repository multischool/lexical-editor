{"version":3,"file":"floating-link-context.jsx","sourceRoot":"","sources":["floating-link-context.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAA;AAG3D,OAAO,EAAE,yBAAyB,EAAE,MAAM,uCAAuC,CAAC;AAClF,MAAM,OAAO,GAAG,aAAa,CAG1B;IACD,cAAc,EAAE,KAAK;IACrB,iBAAiB,EAAE,GAAG,EAAE,GAAE,CAAC;CAC5B,CAAC,CAAA;AAEF,MAAM,UAAU,mBAAmB,CAAC,EAClC,QAAQ,GAGT;IACC,MAAM,CAAC,cAAc,EAAE,iBAAiB,CAAC,GAAG,QAAQ,CAAU,KAAK,CAAC,CAAA;IACpE,MAAM,CAAC,MAAM,CAAC,GAAG,yBAAyB,EAAE,CAAA;IAE9C,qDAAqD;IACrD,4BAA4B;IAC5B,qDAAqD;IACrD,wDAAwD;IACxD,+CAA+C;IAE/C,iEAAiE;IACjE,+CAA+C;IAC/C,UAAU;IACV,OAAO;IAEP,sBAAsB;IAEpB,OAAO,CACL,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,cAAc,EAAE,iBAAiB,EAAE,CAAC,CAC7D;MAAA,CAAC,QAAQ,CACX;IAAA,EAAE,OAAO,CAAC,QAAQ,CAAC,CACpB,CAAA;AACH,CAAC;AAED,MAAM,UAAU,sBAAsB;IACpC,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,KAAK,CACb,kEAAkE,CACnE,CAAA;IACH,CAAC;IACD,OAAO,UAAU,CAAC,OAAO,CAAC,CAAA;AAC5B,CAAC","sourcesContent":["import { createContext, useContext, useState } from 'react'\nimport { $generateHtmlFromNodes } from '@lexical/html';\nimport { LexicalEditor } from 'lexical';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nconst Context = createContext<{\n  isLinkEditMode: boolean\n  setIsLinkEditMode: (isLinkEditMode: boolean) => void\n}>({\n  isLinkEditMode: false,\n  setIsLinkEditMode: () => {},\n})\n\nexport function FloatingLinkContext({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const [isLinkEditMode, setIsLinkEditMode] = useState<boolean>(false)\n  const [editor] = useLexicalComposerContext()\n\n//   const handleClick = (editor: LexicalEditor) => {\n//     editor.update(() => {\n//       const editorState = editor.getEditorState();\n//       const jsonString = JSON.stringify(editorState);\n//       console.log('jsonString', jsonString);\n  \n//       const htmlString = $generateHtmlFromNodes(editor, null);\n//       console.log('htmlString', htmlString);\n//     });\n//   };\n\n// handleClick(editor)\n  \n  return (\n    <Context.Provider value={{ isLinkEditMode, setIsLinkEditMode }}>\n      {children}\n    </Context.Provider>\n  )\n}\n\nexport function useFloatingLinkContext() {\n  if (!Context) {\n    throw new Error(\n      'useFloatingLinkContext must be used within a FloatingLinkContext'\n    )\n  }\n  return useContext(Context)\n}\n"]}