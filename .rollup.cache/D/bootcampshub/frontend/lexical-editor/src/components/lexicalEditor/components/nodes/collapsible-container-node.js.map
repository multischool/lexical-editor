{"version":3,"file":"collapsible-container-node.js","sourceRoot":"","sources":["collapsible-container-node.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  DOMConversionMap,\n  DOMConversionOutput,\n  DOMExportOutput,\n  EditorConfig,\n  ElementNode,\n  LexicalEditor,\n  LexicalNode,\n  NodeKey,\n  SerializedElementNode,\n  Spread,\n  isHTMLElement,\n} from 'lexical'\n\nimport { IS_CHROME } from '../shared/environment'\nimport { invariant } from '../shared/invariant'\nimport { setDomHiddenUntilFound } from '../utils/collapsible'\n\ntype SerializedCollapsibleContainerNode = Spread<\n  {\n    open: boolean\n  },\n  SerializedElementNode\n>\n\nexport function $convertDetailsElement(\n  domNode: HTMLDetailsElement\n): DOMConversionOutput | null {\n  const isOpen = domNode.open !== undefined ? domNode.open : true\n  const node = $createCollapsibleContainerNode(isOpen)\n  return {\n    node,\n  }\n}\n\nexport class CollapsibleContainerNode extends ElementNode {\n  __open: boolean\n\n  constructor(open: boolean, key?: NodeKey) {\n    super(key)\n    this.__open = open\n  }\n\n  static getType(): string {\n    return 'collapsible-container'\n  }\n\n  static clone(node: CollapsibleContainerNode): CollapsibleContainerNode {\n    return new CollapsibleContainerNode(node.__open, node.__key)\n  }\n\n  createDOM(config: EditorConfig, editor: LexicalEditor): HTMLElement {\n    // details is not well supported in Chrome #5582\n    let dom: HTMLElement\n    if (IS_CHROME) {\n      dom = document.createElement('div')\n      dom.setAttribute('open', '')\n    } else {\n      const detailsDom = document.createElement('details')\n      detailsDom.open = this.__open\n      detailsDom.addEventListener('toggle', () => {\n        const open = editor.getEditorState().read(() => this.getOpen())\n        if (open !== detailsDom.open) {\n          editor.update(() => this.toggleOpen())\n        }\n      })\n      dom = detailsDom\n    }\n    dom.classList.add('Collapsible__container')\n\n    return dom\n  }\n\n  updateDOM(\n    prevNode: CollapsibleContainerNode,\n    dom: HTMLDetailsElement\n  ): boolean {\n    const currentOpen = this.__open\n    if (prevNode.__open !== currentOpen) {\n      // details is not well supported in Chrome #5582\n      if (IS_CHROME) {\n        const contentDom = dom.children[1]\n        invariant(\n          isHTMLElement(contentDom),\n          'Expected contentDom to be an HTMLElement'\n        )\n        if (currentOpen) {\n          dom.setAttribute('open', '')\n          contentDom.hidden = false\n        } else {\n          dom.removeAttribute('open')\n          setDomHiddenUntilFound(contentDom)\n        }\n      } else {\n        dom.open = this.__open\n      }\n    }\n\n    return false\n  }\n\n  static importDOM(): DOMConversionMap<HTMLDetailsElement> | null {\n    return {\n      details: (domNode: HTMLDetailsElement) => {\n        return {\n          conversion: $convertDetailsElement,\n          priority: 1,\n        }\n      },\n    }\n  }\n\n  static importJSON(\n    serializedNode: SerializedCollapsibleContainerNode\n  ): CollapsibleContainerNode {\n    const node = $createCollapsibleContainerNode(serializedNode.open)\n    return node\n  }\n\n  exportDOM(): DOMExportOutput {\n    const element = document.createElement('details')\n    element.classList.add('Collapsible__container')\n    element.setAttribute('open', this.__open.toString())\n    return { element }\n  }\n\n  exportJSON(): SerializedCollapsibleContainerNode {\n    return {\n      ...super.exportJSON(),\n      open: this.__open,\n      type: 'collapsible-container',\n      version: 1,\n    }\n  }\n\n  setOpen(open: boolean): void {\n    const writable = this.getWritable()\n    writable.__open = open\n  }\n\n  getOpen(): boolean {\n    return this.getLatest().__open\n  }\n\n  toggleOpen(): void {\n    this.setOpen(!this.getOpen())\n  }\n}\n\nexport function $createCollapsibleContainerNode(\n  isOpen: boolean\n): CollapsibleContainerNode {\n  return new CollapsibleContainerNode(isOpen)\n}\n\nexport function $isCollapsibleContainerNode(\n  node: LexicalNode | null | undefined\n): node is CollapsibleContainerNode {\n  return node instanceof CollapsibleContainerNode\n}\n"]}