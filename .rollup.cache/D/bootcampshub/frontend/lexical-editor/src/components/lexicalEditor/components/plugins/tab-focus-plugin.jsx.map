{"version":3,"file":"tab-focus-plugin.jsx","sourceRoot":"","sources":["tab-focus-plugin.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAA;AAEZ;;;;;;GAMG;AACH,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAA;AAEjC,OAAO,EAAE,yBAAyB,EAAE,MAAM,uCAAuC,CAAA;AACjF,OAAO,EACL,aAAa,EACb,iBAAiB,EACjB,aAAa,EACb,aAAa,GACd,MAAM,SAAS,CAAA;AAEhB,MAAM,oBAAoB,GAAG,CAAC,CAAA;AAC9B,MAAM,qBAAqB,GAAG,GAAG,CAAA;AAEjC,IAAI,uBAAuB,GAAG,CAAC,CAAA;AAC/B,IAAI,4BAA4B,GAAG,KAAK,CAAA;AAExC,SAAS,2BAA2B;IAClC,MAAM,CAAC,gBAAgB,CACrB,SAAS,EACT,CAAC,KAAoB,EAAE,EAAE;QACvB,MAAM;QACN,IAAI,KAAK,CAAC,GAAG,KAAK,KAAK,EAAE,CAAC;YACxB,uBAAuB,GAAG,KAAK,CAAC,SAAS,CAAA;QAC3C,CAAC;IACH,CAAC,EACD,IAAI,CACL,CAAA;AACH,CAAC;AAED,MAAM,UAAU,cAAc;IAC5B,MAAM,CAAC,MAAM,CAAC,GAAG,yBAAyB,EAAE,CAAA;IAE5C,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,4BAA4B,EAAE,CAAC;YAClC,2BAA2B,EAAE,CAAA;YAC7B,4BAA4B,GAAG,IAAI,CAAA;QACrC,CAAC;QAED,OAAO,MAAM,CAAC,eAAe,CAC3B,aAAa,EACb,CAAC,KAAiB,EAAE,EAAE;YACpB,MAAM,SAAS,GAAG,aAAa,EAAE,CAAA;YACjC,IAAI,iBAAiB,CAAC,SAAS,CAAC,EAAE,CAAC;gBACjC,IACE,uBAAuB,GAAG,qBAAqB;oBAC/C,KAAK,CAAC,SAAS,EACf,CAAC;oBACD,aAAa,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,CAAA;gBAClC,CAAC;YACH,CAAC;YACD,OAAO,KAAK,CAAA;QACd,CAAC,EACD,oBAAoB,CACrB,CAAA;IACH,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAA;IAEZ,OAAO,IAAI,CAAA;AACb,CAAC","sourcesContent":["'use client'\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { useEffect } from 'react'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport {\n  $getSelection,\n  $isRangeSelection,\n  $setSelection,\n  FOCUS_COMMAND,\n} from 'lexical'\n\nconst COMMAND_PRIORITY_LOW = 1\nconst TAB_TO_FOCUS_INTERVAL = 100\n\nlet lastTabKeyDownTimestamp = 0\nlet hasRegisteredKeyDownListener = false\n\nfunction registerKeyTimeStampTracker() {\n  window.addEventListener(\n    'keydown',\n    (event: KeyboardEvent) => {\n      // Tab\n      if (event.key === 'Tab') {\n        lastTabKeyDownTimestamp = event.timeStamp\n      }\n    },\n    true\n  )\n}\n\nexport function TabFocusPlugin(): null {\n  const [editor] = useLexicalComposerContext()\n\n  useEffect(() => {\n    if (!hasRegisteredKeyDownListener) {\n      registerKeyTimeStampTracker()\n      hasRegisteredKeyDownListener = true\n    }\n\n    return editor.registerCommand(\n      FOCUS_COMMAND,\n      (event: FocusEvent) => {\n        const selection = $getSelection()\n        if ($isRangeSelection(selection)) {\n          if (\n            lastTabKeyDownTimestamp + TAB_TO_FOCUS_INTERVAL >\n            event.timeStamp\n          ) {\n            $setSelection(selection.clone())\n          }\n        }\n        return false\n      },\n      COMMAND_PRIORITY_LOW\n    )\n  }, [editor])\n\n  return null\n}\n"]}