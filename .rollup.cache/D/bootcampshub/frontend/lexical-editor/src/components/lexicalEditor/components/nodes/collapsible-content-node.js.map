{"version":3,"file":"collapsible-content-node.js","sourceRoot":"","sources":["collapsible-content-node.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  DOMConversionMap,\n  DOMConversionOutput,\n  DOMExportOutput,\n  EditorConfig,\n  ElementNode,\n  LexicalEditor,\n  LexicalNode,\n  SerializedElementNode,\n} from 'lexical'\n\nimport { IS_CHROME } from '../shared/environment'\nimport { invariant } from '../shared/invariant'\nimport { domOnBeforeMatch, setDomHiddenUntilFound } from '../utils/collapsible'\nimport { $isCollapsibleContainerNode } from '../nodes/collapsible-container-node'\n\ntype SerializedCollapsibleContentNode = SerializedElementNode\n\nexport function $convertCollapsibleContentElement(\n  domNode: HTMLElement\n): DOMConversionOutput | null {\n  const node = $createCollapsibleContentNode()\n  return {\n    node,\n  }\n}\n\nexport class CollapsibleContentNode extends ElementNode {\n  static getType(): string {\n    return 'collapsible-content'\n  }\n\n  static clone(node: CollapsibleContentNode): CollapsibleContentNode {\n    return new CollapsibleContentNode(node.__key)\n  }\n\n  createDOM(config: EditorConfig, editor: LexicalEditor): HTMLElement {\n    const dom = document.createElement('div')\n    dom.classList.add('pt-0', 'pr-1', 'pb-1', 'pl-4')\n    if (IS_CHROME) {\n      editor.getEditorState().read(() => {\n        const containerNode = this.getParentOrThrow()\n        invariant(\n          $isCollapsibleContainerNode(containerNode),\n          'Expected parent node to be a CollapsibleContainerNode'\n        )\n        if (!containerNode.__open) {\n          setDomHiddenUntilFound(dom)\n        }\n      })\n      domOnBeforeMatch(dom, () => {\n        editor.update(() => {\n          const containerNode = this.getParentOrThrow().getLatest()\n          invariant(\n            $isCollapsibleContainerNode(containerNode),\n            'Expected parent node to be a CollapsibleContainerNode'\n          )\n          if (!containerNode.__open) {\n            containerNode.toggleOpen()\n          }\n        })\n      })\n    }\n    return dom\n  }\n\n  updateDOM(prevNode: CollapsibleContentNode, dom: HTMLElement): boolean {\n    return false\n  }\n\n  static importDOM(): DOMConversionMap | null {\n    return {\n      div: (domNode: HTMLElement) => {\n        if (!domNode.hasAttribute('data-lexical-collapsible-content')) {\n          return null\n        }\n        return {\n          conversion: $convertCollapsibleContentElement,\n          priority: 2,\n        }\n      },\n    }\n  }\n\n  exportDOM(): DOMExportOutput {\n    const element = document.createElement('div')\n    element.classList.add('pt-0', 'pr-1', 'pb-1', 'pl-4')\n    element.setAttribute('data-lexical-collapsible-content', 'true')\n    return { element }\n  }\n\n  static importJSON(\n    serializedNode: SerializedCollapsibleContentNode\n  ): CollapsibleContentNode {\n    return $createCollapsibleContentNode()\n  }\n\n  isShadowRoot(): boolean {\n    return true\n  }\n\n  exportJSON(): SerializedCollapsibleContentNode {\n    return {\n      ...super.exportJSON(),\n      type: 'collapsible-content',\n      version: 1,\n    }\n  }\n}\n\nexport function $createCollapsibleContentNode(): CollapsibleContentNode {\n  return new CollapsibleContentNode()\n}\n\nexport function $isCollapsibleContentNode(\n  node: LexicalNode | null | undefined\n): node is CollapsibleContentNode {\n  return node instanceof CollapsibleContentNode\n}\n"]}