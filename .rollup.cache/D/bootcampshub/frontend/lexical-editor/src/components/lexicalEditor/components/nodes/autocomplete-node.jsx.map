{"version":3,"file":"autocomplete-node.jsx","sourceRoot":"","sources":["autocomplete-node.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAA;AAW9B,OAAO,EAAE,aAAa,EAAE,MAAM,SAAS,CAAA;AAEvC,OAAO,EAAE,4BAA4B,EAAE,MAAM,wCAAwC,CAAA;AACrF,OAAO,EAAE,IAAI,IAAI,IAAI,EAAE,MAAM,gCAAgC,CAAA;AAiB7D,MAAM,OAAO,gBAAiB,SAAQ,aAAiC;IAWrE,MAAM,CAAC,KAAK,CAAC,IAAsB;QACjC,OAAO,IAAI,gBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAA;IACtD,CAAC;IAED,MAAM,CAAC,OAAO;QACZ,OAAO,cAAc,CAAA;IACvB,CAAC;IAED,MAAM,CAAC,UAAU,CACf,cAA0C;QAE1C,MAAM,IAAI,GAAG,uBAAuB,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;QACzD,OAAO,IAAI,CAAA;IACb,CAAC;IAED,UAAU;QACR,uCACK,KAAK,CAAC,UAAU,EAAE,KACrB,IAAI,EAAE,cAAc,EACpB,IAAI,EAAE,IAAI,CAAC,MAAM,EACjB,OAAO,EAAE,CAAC,IACX;IACH,CAAC;IAED,YAAY,IAAY,EAAE,GAAa;QACrC,KAAK,CAAC,GAAG,CAAC,CAAA;QACV,IAAI,CAAC,MAAM,GAAG,IAAI,CAAA;IACpB,CAAC;IAED,SAAS,CACP,QAAiB,EACjB,GAAgB,EAChB,MAAoB;QAEpB,OAAO,KAAK,CAAA;IACd,CAAC;IAED,SAAS,CAAC,MAAoB;QAC5B,OAAO,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAA;IACvC,CAAC;IAED,QAAQ,CAAC,MAAqB,EAAE,MAAoB;QAClD,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,EAAE,CAAC;YACzB,OAAO,IAAI,CAAA;QACb,CAAC;QACD,OAAO,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,EAAG,CAAA;IACxE,CAAC;CACF;AAED,MAAM,UAAU,uBAAuB,CAAC,IAAY;IAClD,OAAO,IAAI,gBAAgB,CAAC,IAAI,CAAC,CAAA;AACnC,CAAC;AAED,SAAS,qBAAqB,CAAC,EAC7B,SAAS,GAGV;IACC,MAAM,CAAC,UAAU,CAAC,GAAG,4BAA4B,EAAE,CAAA;IACnD,MAAM,aAAa,GAAG,MAAM,CAAC,SAAS,CAAC,aAAa,CAAA;IACpD,MAAM,QAAQ,GACZ,aAAa,KAAK,SAAS;QACzB,CAAC,CAAC,aAAa,CAAC,MAAM;QACtB,CAAC,CAAC,MAAM,CAAC,UAAU,IAAI,GAAG,IAAI,MAAM,CAAC,WAAW,IAAI,GAAG,CAAA;IAC3D,OAAO,CACL,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,CAAC,UAAU,CAAC,OAAO,CAC5C;MAAA,CAAC,UAAU,CAAE,CAAA,CAAC,QAAQ,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,OAAO,CACrD;IAAA,EAAE,IAAI,CAAC,CACR,CAAA;AACH,CAAC","sourcesContent":["import * as React from 'react'\nimport { JSX } from 'react'\n\nimport type {\n  EditorConfig,\n  EditorThemeClassName,\n  LexicalEditor,\n  NodeKey,\n  SerializedLexicalNode,\n  Spread,\n} from 'lexical'\nimport { DecoratorNode } from 'lexical'\n\nimport { useSharedAutocompleteContext } from '../context/shared-autocomplete-context'\nimport { uuid as UUID } from '../plugins/autocomplete-plugin'\n\ndeclare global {\n  interface Navigator {\n    userAgentData?: {\n      mobile: boolean\n    }\n  }\n}\n\nexport type SerializedAutocompleteNode = Spread<\n  {\n    uuid: string\n  },\n  SerializedLexicalNode\n>\n\nexport class AutocompleteNode extends DecoratorNode<JSX.Element | null> {\n  /**\n   * A unique uuid is generated for each session and assigned to the instance.\n   * This helps to:\n   * - Ensures max one Autocomplete node per session.\n   * - Ensure that when collaboration is enabled, this node is not shown in\n   *   other sessions.\n   * See https://github.com/facebook/lexical/blob/master/packages/lexical-playground/src/plugins/AutocompletePlugin/index.tsx#L39\n   */\n  __uuid: string\n\n  static clone(node: AutocompleteNode): AutocompleteNode {\n    return new AutocompleteNode(node.__uuid, node.__key)\n  }\n\n  static getType(): 'autocomplete' {\n    return 'autocomplete'\n  }\n\n  static importJSON(\n    serializedNode: SerializedAutocompleteNode\n  ): AutocompleteNode {\n    const node = $createAutocompleteNode(serializedNode.uuid)\n    return node\n  }\n\n  exportJSON(): SerializedAutocompleteNode {\n    return {\n      ...super.exportJSON(),\n      type: 'autocomplete',\n      uuid: this.__uuid,\n      version: 1,\n    }\n  }\n\n  constructor(uuid: string, key?: NodeKey) {\n    super(key)\n    this.__uuid = uuid\n  }\n\n  updateDOM(\n    prevNode: unknown,\n    dom: HTMLElement,\n    config: EditorConfig\n  ): boolean {\n    return false\n  }\n\n  createDOM(config: EditorConfig): HTMLElement {\n    return document.createElement('span')\n  }\n\n  decorate(editor: LexicalEditor, config: EditorConfig): JSX.Element | null {\n    if (this.__uuid !== UUID) {\n      return null\n    }\n    return <AutocompleteComponent className={config.theme.autocomplete} />\n  }\n}\n\nexport function $createAutocompleteNode(uuid: string): AutocompleteNode {\n  return new AutocompleteNode(uuid)\n}\n\nfunction AutocompleteComponent({\n  className,\n}: {\n  className: EditorThemeClassName\n}): JSX.Element {\n  const [suggestion] = useSharedAutocompleteContext()\n  const userAgentData = window.navigator.userAgentData\n  const isMobile =\n    userAgentData !== undefined\n      ? userAgentData.mobile\n      : window.innerWidth <= 800 && window.innerHeight <= 600\n  return (\n    <span className={className} spellCheck=\"false\">\n      {suggestion} {isMobile ? '(SWIPE \\u2B95)' : '(TAB)'}\n    </span>\n  )\n}\n"]}