{"version":3,"file":"max-length-plugin.jsx","sourceRoot":"","sources":["max-length-plugin.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAA;AAEZ;;;;;;GAMG;AACH,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAA;AAEjC,OAAO,EAAE,yBAAyB,EAAE,MAAM,uCAAuC,CAAA;AACjF,OAAO,EAAE,0BAA0B,EAAE,MAAM,oBAAoB,CAAA;AAC/D,OAAO,EAAE,mBAAmB,EAAE,MAAM,gBAAgB,CAAA;AACpD,OAAO,EACL,aAAa,EACb,iBAAiB,EAEjB,QAAQ,GACT,MAAM,SAAS,CAAA;AAEhB,MAAM,UAAU,eAAe,CAAC,EAAE,SAAS,EAAyB;IAClE,MAAM,CAAC,MAAM,CAAC,GAAG,yBAAyB,EAAE,CAAA;IAE5C,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,uBAAuB,GAAuB,IAAI,CAAA;QAEtD,OAAO,MAAM,CAAC,qBAAqB,CAAC,QAAQ,EAAE,CAAC,QAAkB,EAAE,EAAE;YACnE,MAAM,SAAS,GAAG,aAAa,EAAE,CAAA;YACjC,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,EAAE,CAAC;gBAC9D,OAAM;YACR,CAAC;YACD,MAAM,eAAe,GAAG,MAAM,CAAC,cAAc,EAAE,CAAA;YAC/C,MAAM,mBAAmB,GAAG,eAAe,CAAC,IAAI,CAAC,GAAG,EAAE,CACpD,QAAQ,CAAC,kBAAkB,EAAE,CAC9B,CAAA;YACD,MAAM,eAAe,GAAG,QAAQ,CAAC,kBAAkB,EAAE,CAAA;YACrD,IAAI,mBAAmB,KAAK,eAAe,EAAE,CAAC;gBAC5C,MAAM,QAAQ,GAAG,eAAe,GAAG,SAAS,CAAA;gBAC5C,MAAM,MAAM,GAAG,SAAS,CAAC,MAAM,CAAA;gBAE/B,IAAI,QAAQ,GAAG,CAAC,EAAE,CAAC;oBACjB,mDAAmD;oBACnD,yCAAyC;oBACzC,IACE,mBAAmB,KAAK,SAAS;wBACjC,uBAAuB,KAAK,eAAe,EAC3C,CAAC;wBACD,uBAAuB,GAAG,eAAe,CAAA;wBACzC,mBAAmB,CAAC,MAAM,EAAE,eAAe,CAAC,CAAA;oBAC9C,CAAC;yBAAM,CAAC;wBACN,0BAA0B,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAA;oBACtD,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAA;IACJ,CAAC,EAAE,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAA;IAEvB,OAAO,IAAI,CAAA;AACb,CAAC","sourcesContent":["'use client'\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { useEffect } from 'react'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport { $trimTextContentFromAnchor } from '@lexical/selection'\nimport { $restoreEditorState } from '@lexical/utils'\nimport {\n  $getSelection,\n  $isRangeSelection,\n  EditorState,\n  RootNode,\n} from 'lexical'\n\nexport function MaxLengthPlugin({ maxLength }: { maxLength: number }): null {\n  const [editor] = useLexicalComposerContext()\n\n  useEffect(() => {\n    let lastRestoredEditorState: EditorState | null = null\n\n    return editor.registerNodeTransform(RootNode, (rootNode: RootNode) => {\n      const selection = $getSelection()\n      if (!$isRangeSelection(selection) || !selection.isCollapsed()) {\n        return\n      }\n      const prevEditorState = editor.getEditorState()\n      const prevTextContentSize = prevEditorState.read(() =>\n        rootNode.getTextContentSize()\n      )\n      const textContentSize = rootNode.getTextContentSize()\n      if (prevTextContentSize !== textContentSize) {\n        const delCount = textContentSize - maxLength\n        const anchor = selection.anchor\n\n        if (delCount > 0) {\n          // Restore the old editor state instead if the last\n          // text content was already at the limit.\n          if (\n            prevTextContentSize === maxLength &&\n            lastRestoredEditorState !== prevEditorState\n          ) {\n            lastRestoredEditorState = prevEditorState\n            $restoreEditorState(editor, prevEditorState)\n          } else {\n            $trimTextContentFromAnchor(editor, anchor, delCount)\n          }\n        }\n      }\n    })\n  }, [editor, maxLength])\n\n  return null\n}\n"]}