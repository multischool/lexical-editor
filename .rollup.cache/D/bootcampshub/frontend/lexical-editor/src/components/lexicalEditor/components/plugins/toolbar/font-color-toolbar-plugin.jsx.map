{"version":3,"file":"font-color-toolbar-plugin.jsx","sourceRoot":"","sources":["font-color-toolbar-plugin.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAA;AAEZ,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAA;AAE7C,OAAO,EACL,kCAAkC,EAClC,eAAe,GAChB,MAAM,oBAAoB,CAAA;AAC3B,OAAO,EAAE,aAAa,EAAE,iBAAiB,EAAiB,MAAM,SAAS,CAAA;AACzE,OAAO,EAAE,YAAY,EAAE,MAAM,cAAc,CAAA;AAE3C,OAAO,EAAE,iBAAiB,EAAE,MAAM,+BAA+B,CAAA;AACjE,OAAO,EAAE,uBAAuB,EAAE,MAAM,uCAAuC,CAAA;AAC/E,OAAO,WAAW,MAAM,6BAA6B,CAAA;AAErD,MAAM,UAAU,sBAAsB;IACpC,MAAM,EAAE,YAAY,EAAE,GAAG,iBAAiB,EAAE,CAAA;IAE5C,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAA;IAElD,MAAM,cAAc,GAAG,CAAC,SAAwB,EAAE,EAAE;QAClD,IAAI,iBAAiB,CAAC,SAAS,CAAC,EAAE,CAAC;YACjC,YAAY,CACV,kCAAkC,CAAC,SAAS,EAAE,OAAO,EAAE,MAAM,CAAC,CAC/D,CAAA;QACH,CAAC;IACH,CAAC,CAAA;IAED,uBAAuB,CAAC,cAAc,CAAC,CAAA;IAEvC,MAAM,cAAc,GAAG,WAAW,CAChC,CAAC,MAA8B,EAAE,gBAA0B,EAAE,EAAE;QAC7D,YAAY,CAAC,MAAM,CACjB,GAAG,EAAE;YACH,MAAM,SAAS,GAAG,aAAa,EAAE,CAAA;YACjC,IAAI,SAAS,KAAK,IAAI,EAAE,CAAC;gBACvB,eAAe,CAAC,SAAS,EAAE,MAAM,CAAC,CAAA;YACpC,CAAC;QACH,CAAC,EACD,gBAAgB,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,EAAE,CAC5C,CAAA;IACH,CAAC,EACD,CAAC,YAAY,CAAC,CACf,CAAA;IAED,MAAM,iBAAiB,GAAG,WAAW,CACnC,CAAC,KAAa,EAAE,gBAAyB,EAAE,EAAE;QAC3C,cAAc,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,gBAAgB,CAAC,CAAA;IACpD,CAAC,EACD,CAAC,cAAc,CAAC,CACjB,CAAA;IAED,OAAO,CACL,CAAC,WAAW,CACV,IAAI,CAAC,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,QAAQ,EAAG,CAAC,CAC1C,KAAK,CAAC,CAAC,SAAS,CAAC,CACjB,QAAQ,CAAC,CAAC,iBAAiB,CAAC,CAC5B,KAAK,CAAC,YAAY,EAClB,CACH,CAAA;AACH,CAAC","sourcesContent":["'use client'\n\nimport { useCallback, useState } from 'react'\n\nimport {\n  $getSelectionStyleValueForProperty,\n  $patchStyleText,\n} from '@lexical/selection'\nimport { $getSelection, $isRangeSelection, BaseSelection } from 'lexical'\nimport { BaselineIcon } from 'lucide-react'\n\nimport { useToolbarContext } from '../../context/toolbar-context'\nimport { useUpdateToolbarHandler } from '../../editor-hooks/use-update-toolbar'\nimport ColorPicker from '../../editor-ui/colorpicker'\n\nexport function FontColorToolbarPlugin() {\n  const { activeEditor } = useToolbarContext()\n\n  const [fontColor, setFontColor] = useState('#000')\n\n  const $updateToolbar = (selection: BaseSelection) => {\n    if ($isRangeSelection(selection)) {\n      setFontColor(\n        $getSelectionStyleValueForProperty(selection, 'color', '#000')\n      )\n    }\n  }\n\n  useUpdateToolbarHandler($updateToolbar)\n\n  const applyStyleText = useCallback(\n    (styles: Record<string, string>, skipHistoryStack?: boolean) => {\n      activeEditor.update(\n        () => {\n          const selection = $getSelection()\n          if (selection !== null) {\n            $patchStyleText(selection, styles)\n          }\n        },\n        skipHistoryStack ? { tag: 'historic' } : {}\n      )\n    },\n    [activeEditor]\n  )\n\n  const onFontColorSelect = useCallback(\n    (value: string, skipHistoryStack: boolean) => {\n      applyStyleText({ color: value }, skipHistoryStack)\n    },\n    [applyStyleText]\n  )\n\n  return (\n    <ColorPicker\n      icon={<BaselineIcon className=\"size-4\" />}\n      color={fontColor}\n      onChange={onFontColorSelect}\n      title=\"text color\"\n    />\n  )\n}\n"]}