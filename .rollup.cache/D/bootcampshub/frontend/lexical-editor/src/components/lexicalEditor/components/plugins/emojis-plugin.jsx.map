{"version":3,"file":"emojis-plugin.jsx","sourceRoot":"","sources":["emojis-plugin.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAA;AAEZ;;;;;;GAMG;AACH,OAAO,EAAE,SAAS,EAAO,MAAM,OAAO,CAAA;AAGtC,OAAO,EAAE,yBAAyB,EAAE,MAAM,uCAAuC,CAAA;AAEjF,OAAO,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAA;AAElC,OAAO,EAAE,gBAAgB,EAAE,SAAS,EAAE,MAAM,qBAAqB,CAAA;AAEjE,MAAM,MAAM,GAAkC,IAAI,GAAG,CAAC;IACpD,CAAC,IAAI,EAAE,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;IAClC,CAAC,IAAI,EAAE,CAAC,sBAAsB,EAAE,IAAI,CAAC,CAAC;IACtC,CAAC,IAAI,EAAE,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;IACpC,CAAC,IAAI,EAAE,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;CAC7B,CAAC,CAAA;AAEF,SAAS,sBAAsB,CAAC,IAAc;IAC5C,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,EAAE,CAAA;IAElC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACrC,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;QAEzE,IAAI,SAAS,KAAK,SAAS,EAAE,CAAC;YAC5B,MAAM,CAAC,UAAU,EAAE,SAAS,CAAC,GAAG,SAAS,CAAA;YACzC,IAAI,UAAU,CAAA;YAEd,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;gBACZ,CAAC;gBAAA,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;YACvC,CAAC;iBAAM,CAAC;gBACN,CAAC;gBAAA,CAAC,EAAE,UAAU,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAA;YAC5C,CAAC;YAED,MAAM,SAAS,GAAG,gBAAgB,CAAC,UAAU,EAAE,SAAS,CAAC,CAAA;YACzD,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;YAC7B,OAAO,SAAS,CAAA;QAClB,CAAC;IACH,CAAC;IAED,OAAO,IAAI,CAAA;AACb,CAAC;AAED,SAAS,kBAAkB,CAAC,IAAc;IACxC,IAAI,UAAU,GAAoB,IAAI,CAAA;IAEtC,OAAO,UAAU,KAAK,IAAI,EAAE,CAAC;QAC3B,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,EAAE,CAAC;YAC/B,OAAM;QACR,CAAC;QAED,UAAU,GAAG,sBAAsB,CAAC,UAAU,CAAC,CAAA;IACjD,CAAC;AACH,CAAC;AAED,SAAS,SAAS,CAAC,MAAqB;IACtC,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC;YAClC,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAA;QACrE,CAAC;QAED,OAAO,MAAM,CAAC,qBAAqB,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAA;IACnE,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAA;AACd,CAAC;AAED,MAAM,UAAU,YAAY;IAC1B,MAAM,CAAC,MAAM,CAAC,GAAG,yBAAyB,EAAE,CAAA;IAC5C,SAAS,CAAC,MAAM,CAAC,CAAA;IACjB,OAAO,IAAI,CAAA;AACb,CAAC","sourcesContent":["'use client'\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { useEffect, JSX } from 'react'\nimport { createPortal } from 'react-dom'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport type { LexicalEditor } from 'lexical'\nimport { TextNode } from 'lexical'\n\nimport { $createEmojiNode, EmojiNode } from '../nodes/emoji-node'\n\nconst emojis: Map<string, [string, string]> = new Map([\n  [':)', ['emoji happysmile', 'üôÇ']],\n  [':D', ['emoji veryhappysmile', 'üòÄ']],\n  [':(', ['emoji unhappysmile', 'üôÅ']],\n  ['<3', ['emoji heart', '‚ù§']],\n])\n\nfunction $findAndTransformEmoji(node: TextNode): null | TextNode {\n  const text = node.getTextContent()\n\n  for (let i = 0; i < text.length; i++) {\n    const emojiData = emojis.get(text[i]) || emojis.get(text.slice(i, i + 2))\n\n    if (emojiData !== undefined) {\n      const [emojiStyle, emojiText] = emojiData\n      let targetNode\n\n      if (i === 0) {\n        ;[targetNode] = node.splitText(i + 2)\n      } else {\n        ;[, targetNode] = node.splitText(i, i + 2)\n      }\n\n      const emojiNode = $createEmojiNode(emojiStyle, emojiText)\n      targetNode.replace(emojiNode)\n      return emojiNode\n    }\n  }\n\n  return null\n}\n\nfunction $textNodeTransform(node: TextNode): void {\n  let targetNode: TextNode | null = node\n\n  while (targetNode !== null) {\n    if (!targetNode.isSimpleText()) {\n      return\n    }\n\n    targetNode = $findAndTransformEmoji(targetNode)\n  }\n}\n\nfunction useEmojis(editor: LexicalEditor): void {\n  useEffect(() => {\n    if (!editor.hasNodes([EmojiNode])) {\n      throw new Error('EmojisPlugin: EmojiNode not registered on editor')\n    }\n\n    return editor.registerNodeTransform(TextNode, $textNodeTransform)\n  }, [editor])\n}\n\nexport function EmojisPlugin(): JSX.Element | null {\n  const [editor] = useLexicalComposerContext()\n  useEmojis(editor)\n  return null\n}\n"]}