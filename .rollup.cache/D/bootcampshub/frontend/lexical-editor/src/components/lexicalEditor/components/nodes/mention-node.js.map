{"version":3,"file":"mention-node.js","sourceRoot":"","sources":["mention-node.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  $applyNodeReplacement,\n  type DOMConversionMap,\n  type DOMConversionOutput,\n  type DOMExportOutput,\n  type EditorConfig,\n  type LexicalNode,\n  type NodeKey,\n  type SerializedTextNode,\n  type Spread,\n  TextNode,\n} from 'lexical'\n\nexport type SerializedMentionNode = Spread<\n  {\n    mentionName: string\n  },\n  SerializedTextNode\n>\n\nfunction $convertMentionElement(\n  domNode: HTMLElement\n): DOMConversionOutput | null {\n  const textContent = domNode.textContent\n\n  if (textContent !== null) {\n    const node = $createMentionNode(textContent)\n    return {\n      node,\n    }\n  }\n\n  return null\n}\n\nconst mentionStyle = 'background-color: rgba(24, 119, 232, 0.2)'\nexport class MentionNode extends TextNode {\n  __mention: string\n\n  static getType(): string {\n    return 'mention'\n  }\n\n  static clone(node: MentionNode): MentionNode {\n    return new MentionNode(node.__mention, node.__text, node.__key)\n  }\n  static importJSON(serializedNode: SerializedMentionNode): MentionNode {\n    const node = $createMentionNode(serializedNode.mentionName)\n    node.setTextContent(serializedNode.text)\n    node.setFormat(serializedNode.format)\n    node.setDetail(serializedNode.detail)\n    node.setMode(serializedNode.mode)\n    node.setStyle(serializedNode.style)\n    return node\n  }\n\n  constructor(mentionName: string, text?: string, key?: NodeKey) {\n    super(text ?? mentionName, key)\n    this.__mention = mentionName\n  }\n\n  exportJSON(): SerializedMentionNode {\n    return {\n      ...super.exportJSON(),\n      mentionName: this.__mention,\n      type: 'mention',\n      version: 1,\n    }\n  }\n\n  createDOM(config: EditorConfig): HTMLElement {\n    const dom = super.createDOM(config)\n    dom.style.cssText = mentionStyle\n    dom.className = 'mention'\n    return dom\n  }\n\n  exportDOM(): DOMExportOutput {\n    const element = document.createElement('span')\n    element.setAttribute('data-lexical-mention', 'true')\n    element.textContent = this.__text\n    return { element }\n  }\n\n  static importDOM(): DOMConversionMap | null {\n    return {\n      span: (domNode: HTMLElement) => {\n        if (!domNode.hasAttribute('data-lexical-mention')) {\n          return null\n        }\n        return {\n          conversion: $convertMentionElement,\n          priority: 1,\n        }\n      },\n    }\n  }\n\n  isTextEntity(): true {\n    return true\n  }\n\n  canInsertTextBefore(): boolean {\n    return false\n  }\n\n  canInsertTextAfter(): boolean {\n    return false\n  }\n}\n\nexport function $createMentionNode(mentionName: string): MentionNode {\n  const mentionNode = new MentionNode(mentionName)\n  mentionNode.setMode('segmented').toggleDirectionless()\n  return $applyNodeReplacement(mentionNode)\n}\n\nexport function $isMentionNode(\n  node: LexicalNode | null | undefined\n): node is MentionNode {\n  return node instanceof MentionNode\n}\n"]}