{"version":3,"file":"toolbar-plugin.jsx","sourceRoot":"","sources":["toolbar-plugin.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAA;AAEZ,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAA;AACjC,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAA;AAEhC,OAAO,EAAE,yBAAyB,EAAE,MAAM,uCAAuC,CAAA;AACjF,OAAO,EAAE,yBAAyB,EAAE,wBAAwB,EAAE,MAAM,SAAS,CAAA;AAE7E,OAAO,EAAE,cAAc,EAAE,MAAM,+BAA+B,CAAA;AAE9D,OAAO,EAAE,cAAc,EAAE,MAAM,8BAA8B,CAAA;AAE7D,MAAM,UAAU,aAAa,CAAC,EAC5B,QAAQ,GAKT;IACC,MAAM,CAAC,MAAM,CAAC,GAAG,yBAAyB,EAAE,CAAA;IAE5C,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAA;IACxD,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,QAAQ,CAAS,WAAW,CAAC,CAAA;IAE/D,MAAM,CAAC,KAAK,EAAE,SAAS,CAAC,GAAG,cAAc,EAAE,CAAA;IAE3C,MAAM,cAAc,GAAG,GAAG,EAAE,GAAE,CAAC,CAAA;IAE/B,SAAS,CAAC,GAAG,EAAE;QACb,OAAO,YAAY,CAAC,eAAe,CACjC,wBAAwB,EACxB,CAAC,QAAQ,EAAE,SAAS,EAAE,EAAE;YACtB,eAAe,CAAC,SAAS,CAAC,CAAA;YAC1B,OAAO,KAAK,CAAA;QACd,CAAC,EACD,yBAAyB,CAC1B,CAAA;IACH,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAA;IAEZ,OAAO,CACL,CAAC,cAAc,CACb,YAAY,CAAC,CAAC,YAAY,CAAC,CAC3B,cAAc,CAAC,CAAC,cAAc,CAAC,CAC/B,SAAS,CAAC,CAAC,SAAS,CAAC,CACrB,YAAY,CAAC,CAAC,YAAY,CAAC,CAC3B,SAAS,CAAC,CAAC,SAAS,CAAC,CAErB;MAAA,CAAC,KAAK,CAEN;;MAAA,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,CAAC,CAE1B;;IAAA,EAAE,cAAc,CAAC,CAClB,CAAA;AACH,CAAC","sourcesContent":["'use client'\n\nimport { useEffect } from 'react'\nimport { useState } from 'react'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport { COMMAND_PRIORITY_CRITICAL, SELECTION_CHANGE_COMMAND } from 'lexical'\n\nimport { ToolbarContext } from '../../context/toolbar-context'\n\nimport { useEditorModal } from '../../editor-hooks/use-modal'\n\nexport function ToolbarPlugin({\n  children,\n}: {\n  children: (props: {\n    blockType: string\n  }) => React.ReactNode\n}) {\n  const [editor] = useLexicalComposerContext()\n\n  const [activeEditor, setActiveEditor] = useState(editor)\n  const [blockType, setBlockType] = useState<string>('paragraph')\n\n  const [modal, showModal] = useEditorModal()\n\n  const $updateToolbar = () => {}\n\n  useEffect(() => {\n    return activeEditor.registerCommand(\n      SELECTION_CHANGE_COMMAND,\n      (_payload, newEditor) => {\n        setActiveEditor(newEditor)\n        return false\n      },\n      COMMAND_PRIORITY_CRITICAL\n    )\n  }, [editor])\n\n  return (\n    <ToolbarContext\n      activeEditor={activeEditor}\n      $updateToolbar={$updateToolbar}\n      blockType={blockType}\n      setBlockType={setBlockType}\n      showModal={showModal}\n    >\n      {modal}\n\n      {children({ blockType })}\n\n    </ToolbarContext>\n  )\n}\n"]}