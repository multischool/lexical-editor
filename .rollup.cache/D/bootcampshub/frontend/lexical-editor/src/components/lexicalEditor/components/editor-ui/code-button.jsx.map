{"version":3,"file":"code-button.jsx","sourceRoot":"","sources":["code-button.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAA;AAC9B,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAA;AAEhC,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAA;AAC3C,OAAO,EACL,0BAA0B,EAC1B,aAAa,EACb,aAAa,GAEd,MAAM,SAAS,CAAA;AAChB,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAA;AAExD,OAAO,EAAE,WAAW,EAAE,MAAM,8BAA8B,CAAA;AAO1D,MAAM,UAAU,UAAU,CAAC,EAAE,MAAM,EAAE,cAAc,EAAS;IAC1D,MAAM,CAAC,eAAe,EAAE,gBAAgB,CAAC,GAAG,QAAQ,CAAU,KAAK,CAAC,CAAA;IAEpE,MAAM,iBAAiB,GAAG,WAAW,CAAC,GAAG,EAAE;QACzC,gBAAgB,CAAC,KAAK,CAAC,CAAA;IACzB,CAAC,EAAE,IAAI,CAAC,CAAA;IAER,KAAK,UAAU,WAAW;QACxB,MAAM,WAAW,GAAG,cAAc,EAAE,CAAA;QAEpC,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,OAAM;QACR,CAAC;QAED,IAAI,OAAO,GAAG,EAAE,CAAA;QAEhB,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE;YACjB,MAAM,QAAQ,GAAG,0BAA0B,CAAC,WAAW,CAAC,CAAA;YAExD,IAAI,WAAW,CAAC,QAAQ,CAAC,EAAE,CAAC;gBAC1B,OAAO,GAAG,QAAQ,CAAC,cAAc,EAAE,CAAA;YACrC,CAAC;YAED,MAAM,SAAS,GAAG,aAAa,EAAE,CAAA;YACjC,aAAa,CAAC,SAAS,CAAC,CAAA;QAC1B,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC;YACH,MAAM,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,CAAA;YAC5C,gBAAgB,CAAC,IAAI,CAAC,CAAA;YACtB,iBAAiB,EAAE,CAAA;QACrB,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,OAAO,CAAC,KAAK,CAAC,kBAAkB,EAAE,GAAG,CAAC,CAAA;QACxC,CAAC;IACH,CAAC;IAED,OAAO,CACL,CAAC,MAAM,CACL,SAAS,CAAC,sHAAsH,CAChI,OAAO,CAAC,CAAC,WAAW,CAAC,CACrB,UAAU,CAAC,MAAM,CAEjB;MAAA,CAAC,eAAe,CAAC,CAAC,CAAC,CACjB,CAAC,eAAe,CAAC,SAAS,CAAC,QAAQ,EAAG,CACvC,CAAC,CAAC,CAAC,CACF,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,EAAG,CAChC,CACH;IAAA,EAAE,MAAM,CAAC,CACV,CAAA;AACH,CAAC","sourcesContent":["import * as React from 'react'\nimport { useState } from 'react'\n\nimport { $isCodeNode } from '@lexical/code'\nimport {\n  $getNearestNodeFromDOMNode,\n  $getSelection,\n  $setSelection,\n  LexicalEditor,\n} from 'lexical'\nimport { CircleCheckIcon, CopyIcon } from 'lucide-react'\n\nimport { useDebounce } from '../editor-hooks/use-debounce'\n\ninterface Props {\n  editor: LexicalEditor\n  getCodeDOMNode: () => HTMLElement | null\n}\n\nexport function CopyButton({ editor, getCodeDOMNode }: Props) {\n  const [isCopyCompleted, setCopyCompleted] = useState<boolean>(false)\n\n  const removeSuccessIcon = useDebounce(() => {\n    setCopyCompleted(false)\n  }, 1000)\n\n  async function handleClick(): Promise<void> {\n    const codeDOMNode = getCodeDOMNode()\n\n    if (!codeDOMNode) {\n      return\n    }\n\n    let content = ''\n\n    editor.update(() => {\n      const codeNode = $getNearestNodeFromDOMNode(codeDOMNode)\n\n      if ($isCodeNode(codeNode)) {\n        content = codeNode.getTextContent()\n      }\n\n      const selection = $getSelection()\n      $setSelection(selection)\n    })\n\n    try {\n      await navigator.clipboard.writeText(content)\n      setCopyCompleted(true)\n      removeSuccessIcon()\n    } catch (err) {\n      console.error('Failed to copy: ', err)\n    }\n  }\n\n  return (\n    <button\n      className=\"flex shrink-0 cursor-pointer items-center rounded border border-transparent bg-none p-1 uppercase text-foreground/50\"\n      onClick={handleClick}\n      aria-label=\"copy\"\n    >\n      {isCopyCompleted ? (\n        <CircleCheckIcon className=\"size-4\" />\n      ) : (\n        <CopyIcon className=\"size-4\" />\n      )}\n    </button>\n  )\n}\n"]}