{"version":3,"file":"element-format-toolbar-plugin.jsx","sourceRoot":"","sources":["element-format-toolbar-plugin.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client'\n\nimport { useState } from 'react'\n\nimport { $isLinkNode } from '@lexical/link'\nimport { $findMatchingParent } from '@lexical/utils'\nimport {\n  $isElementNode,\n  $isRangeSelection,\n  BaseSelection,\n  ElementFormatType,\n  FORMAT_ELEMENT_COMMAND,\n  INDENT_CONTENT_COMMAND,\n  OUTDENT_CONTENT_COMMAND,\n} from 'lexical'\nimport { IndentIncreaseIcon } from 'lucide-react'\nimport { IndentDecreaseIcon } from 'lucide-react'\nimport { AlignLeftIcon } from 'lucide-react'\nimport { AlignJustifyIcon } from 'lucide-react'\nimport { AlignCenterIcon, AlignRightIcon } from 'lucide-react'\n\nimport { Separator } from '../../../ui/separator'\nimport { ToggleGroup, ToggleGroupItem } from '../../../ui/toggle-group'\n\nimport { useToolbarContext } from '../../context/toolbar-context'\nimport { useUpdateToolbarHandler } from '../../editor-hooks/use-update-toolbar'\nimport { getSelectedNode } from '../../utils/get-selected-node'\n\nconst ELEMENT_FORMAT_OPTIONS: {\n  [key in Exclude<ElementFormatType, 'start' | 'end' | ''>]: {\n    icon: React.ReactNode\n    iconRTL: string\n    name: string\n  }\n} = {\n  left: {\n    icon: <AlignLeftIcon className=\"size-4\" />,\n    iconRTL: 'left-align',\n    name: 'Left Align',\n  },\n  center: {\n    icon: <AlignCenterIcon className=\"size-4\" />,\n    iconRTL: 'center-align',\n    name: 'Center Align',\n  },\n  right: {\n    icon: <AlignRightIcon className=\"size-4\" />,\n    iconRTL: 'right-align',\n    name: 'Right Align',\n  },\n  justify: {\n    icon: <AlignJustifyIcon className=\"size-4\" />,\n    iconRTL: 'justify-align',\n    name: 'Justify Align',\n  },\n} as const\n\nexport function ElementFormatToolbarPlugin() {\n  const { activeEditor } = useToolbarContext()\n  const [elementFormat, setElementFormat] = useState<ElementFormatType>('left')\n\n  const $updateToolbar = (selection: BaseSelection) => {\n    if ($isRangeSelection(selection)) {\n      const node = getSelectedNode(selection)\n      const parent = node.getParent()\n\n      let matchingParent\n      if ($isLinkNode(parent)) {\n        // If node is a link, we need to fetch the parent paragraph node to set format\n        matchingParent = $findMatchingParent(\n          node,\n          (parentNode) => $isElementNode(parentNode) && !parentNode.isInline()\n        )\n      }\n      setElementFormat(\n        $isElementNode(matchingParent)\n          ? matchingParent.getFormatType()\n          : $isElementNode(node)\n            ? node.getFormatType()\n            : parent?.getFormatType() || 'left'\n      )\n    }\n  }\n\n  useUpdateToolbarHandler($updateToolbar)\n\n  const handleValueChange = (value: string) => {\n    if (!value) return // Prevent unselecting current value\n\n    setElementFormat(value as ElementFormatType)\n\n    if (value === 'indent') {\n      activeEditor.dispatchCommand(INDENT_CONTENT_COMMAND, undefined)\n    } else if (value === 'outdent') {\n      activeEditor.dispatchCommand(OUTDENT_CONTENT_COMMAND, undefined)\n    } else {\n      activeEditor.dispatchCommand(\n        FORMAT_ELEMENT_COMMAND,\n        value as ElementFormatType\n      )\n    }\n  }\n\n  return (\n    <ToggleGroup\n      type=\"single\"\n      value={elementFormat}\n      defaultValue={elementFormat}\n      onValueChange={handleValueChange}\n      className=\"flex gap-1\"\n    >\n      {/* Alignment toggles */}\n      {Object.entries(ELEMENT_FORMAT_OPTIONS).map(([value, option]) => (\n        <ToggleGroupItem\n          key={value}\n          value={value}\n          variant={'outline'}\n          aria-label={option.name}\n          size=\"sm\"\n          className=\"h-8 w-8 p-0\"\n        >\n          {option.icon}\n        </ToggleGroupItem>\n      ))}\n\n      <Separator orientation=\"vertical\" className=\"h-8\" />\n      {/* Indentation toggles */}\n      <ToggleGroupItem\n        value=\"outdent\"\n        aria-label=\"Outdent\"\n        variant={'outline'}\n        size=\"sm\"\n        className=\"h-8 w-8\"\n      >\n        <IndentDecreaseIcon className=\"size-4\" />\n      </ToggleGroupItem>\n\n      <ToggleGroupItem\n        value=\"indent\"\n        variant={'outline'}\n        aria-label=\"Indent\"\n        size=\"sm\"\n        className=\"h-8 w-8\"\n      >\n        <IndentIncreaseIcon className=\"size-4\" />\n      </ToggleGroupItem>\n    </ToggleGroup>\n  )\n}\n"]}