{"version":3,"file":"format-code-block.jsx","sourceRoot":"","sources":["format-code-block.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,eAAe,CAAA;AAC/C,OAAO,EAAE,cAAc,EAAE,MAAM,oBAAoB,CAAA;AACnD,OAAO,EAAE,aAAa,EAAE,iBAAiB,EAAE,MAAM,SAAS,CAAA;AAE1D,OAAO,EAAE,iBAAiB,EAAE,MAAM,kCAAkC,CAAA;AACpE,OAAO,EAAE,UAAU,EAAE,MAAM,uBAAuB,CAAA;AAElD,OAAO,EAAE,oBAAoB,EAAE,MAAM,yDAAyD,CAAA;AAE9F,MAAM,kBAAkB,GAAG,MAAM,CAAA;AAEjC,MAAM,UAAU,eAAe;IAC7B,MAAM,EAAE,YAAY,EAAE,SAAS,EAAE,GAAG,iBAAiB,EAAE,CAAA;IAEvD,MAAM,UAAU,GAAG,GAAG,EAAE;QACtB,IAAI,SAAS,KAAK,MAAM,EAAE,CAAC;YACzB,YAAY,CAAC,MAAM,CAAC,GAAG,EAAE;gBACvB,IAAI,SAAS,GAAG,aAAa,EAAE,CAAA;gBAE/B,IAAI,SAAS,KAAK,IAAI,EAAE,CAAC;oBACvB,IAAI,SAAS,CAAC,WAAW,EAAE,EAAE,CAAC;wBAC5B,cAAc,CAAC,SAAS,EAAE,GAAG,EAAE,CAAC,eAAe,EAAE,CAAC,CAAA;oBACpD,CAAC;yBAAM,CAAC;wBACN,MAAM,WAAW,GAAG,SAAS,CAAC,cAAc,EAAE,CAAA;wBAC9C,MAAM,QAAQ,GAAG,eAAe,EAAE,CAAA;wBAClC,SAAS,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAA;wBACjC,SAAS,GAAG,aAAa,EAAE,CAAA;wBAC3B,IAAI,iBAAiB,CAAC,SAAS,CAAC,EAAE,CAAC;4BACjC,SAAS,CAAC,aAAa,CAAC,WAAW,CAAC,CAAA;wBACtC,CAAC;oBACH,CAAC;gBACH,CAAC;YACH,CAAC,CAAC,CAAA;QACJ,CAAC;IACH,CAAC,CAAA;IAED,OAAO,CACL,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,UAAU,CAAC,CACjD;MAAA,CAAC,GAAG,CAAC,SAAS,CAAC,qCAAqC,CAClD;QAAA,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAC9C;QAAA,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,CAAC,KAAK,CACjD;MAAA,EAAE,GAAG,CACP;IAAA,EAAE,UAAU,CAAC,CACd,CAAA;AACH,CAAC","sourcesContent":["import { $createCodeNode } from '@lexical/code'\nimport { $setBlocksType } from '@lexical/selection'\nimport { $getSelection, $isRangeSelection } from 'lexical'\n\nimport { useToolbarContext } from '../../../context/toolbar-context'\nimport { SelectItem } from '../../../../ui/select'\n\nimport { blockTypeToBlockName } from '../../../plugins/toolbar/block-format/block-format-data'\n\nconst BLOCK_FORMAT_VALUE = 'code'\n\nexport function FormatCodeBlock() {\n  const { activeEditor, blockType } = useToolbarContext()\n\n  const formatCode = () => {\n    if (blockType !== 'code') {\n      activeEditor.update(() => {\n        let selection = $getSelection()\n\n        if (selection !== null) {\n          if (selection.isCollapsed()) {\n            $setBlocksType(selection, () => $createCodeNode())\n          } else {\n            const textContent = selection.getTextContent()\n            const codeNode = $createCodeNode()\n            selection.insertNodes([codeNode])\n            selection = $getSelection()\n            if ($isRangeSelection(selection)) {\n              selection.insertRawText(textContent)\n            }\n          }\n        }\n      })\n    }\n  }\n\n  return (\n    <SelectItem value=\"code\" onPointerDown={formatCode}>\n      <div className=\"flex items-center gap-1 font-normal\">\n        {blockTypeToBlockName[BLOCK_FORMAT_VALUE].icon}\n        {blockTypeToBlockName[BLOCK_FORMAT_VALUE].label}\n      </div>\n    </SelectItem>\n  )\n}\n"]}