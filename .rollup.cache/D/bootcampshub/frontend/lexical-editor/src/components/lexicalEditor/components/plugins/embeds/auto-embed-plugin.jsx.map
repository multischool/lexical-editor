{"version":3,"file":"auto-embed-plugin.jsx","sourceRoot":"","sources":["auto-embed-plugin.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client'\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { useMemo, useState, JSX } from 'react'\n\nimport {\n  AutoEmbedOption,\n  EmbedConfig,\n  EmbedMatchResult,\n  LexicalAutoEmbedPlugin,\n  URL_MATCHER,\n} from '@lexical/react/LexicalAutoEmbedPlugin'\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport { PopoverPortal } from '@radix-ui/react-popover'\nimport type { LexicalEditor } from 'lexical'\nimport { FigmaIcon, TwitterIcon, YoutubeIcon } from 'lucide-react'\n\nimport { Button } from '../../../ui/button'\nimport {\n  Command,\n  CommandGroup,\n  CommandItem,\n  CommandList,\n} from '../../../ui/command'\nimport { DialogFooter } from '../../../ui/dialog'\nimport { Input } from '../../../ui/input'\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '../../../ui/popover'\n\nimport { useEditorModal } from '../../editor-hooks/use-modal'\nimport { INSERT_FIGMA_COMMAND } from '../../plugins/embeds/figma-plugin'\nimport { INSERT_TWEET_COMMAND } from '../../plugins/embeds/twitter-plugin'\nimport { INSERT_YOUTUBE_COMMAND } from '../../plugins/embeds/youtube-plugin'\n\nexport interface CustomEmbedConfig extends EmbedConfig {\n  // Human readable name of the embeded content e.g. Tweet or Google Map.\n  contentName: string\n\n  // Icon for display.\n  icon?: JSX.Element\n\n  // An example of a matching url https://twitter.com/jack/status/20\n  exampleUrl: string\n\n  // For extra searching.\n  keywords: Array<string>\n\n  // Embed a Figma Project.\n  description?: string\n}\n\nexport const YoutubeEmbedConfig: CustomEmbedConfig = {\n  contentName: 'Youtube Video',\n\n  exampleUrl: 'https://www.youtube.com/watch?v=jNQXAC9IVRw',\n\n  // Icon for display.\n  icon: <YoutubeIcon className=\"size-4\" />,\n\n  insertNode: (editor: LexicalEditor, result: EmbedMatchResult) => {\n    editor.dispatchCommand(INSERT_YOUTUBE_COMMAND, result.id)\n  },\n\n  keywords: ['youtube', 'video'],\n\n  // Determine if a given URL is a match and return url data.\n  parseUrl: async (url: string) => {\n    const match =\n      /^.*(youtu\\.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/.exec(url)\n\n    const id = match ? (match?.[2].length === 11 ? match[2] : null) : null\n\n    if (id != null) {\n      return {\n        id,\n        url,\n      }\n    }\n\n    return null\n  },\n\n  type: 'youtube-video',\n}\n\nexport const TwitterEmbedConfig: CustomEmbedConfig = {\n  // e.g. Tweet or Google Map.\n  contentName: 'Tweet',\n\n  exampleUrl: 'https://twitter.com/jack/status/20',\n\n  // Icon for display.\n  icon: <TwitterIcon className=\"size-4\" />,\n\n  // Create the Lexical embed node from the url data.\n  insertNode: (editor: LexicalEditor, result: EmbedMatchResult) => {\n    editor.dispatchCommand(INSERT_TWEET_COMMAND, result.id)\n  },\n\n  // For extra searching.\n  keywords: ['tweet', 'twitter'],\n\n  // Determine if a given URL is a match and return url data.\n  parseUrl: (text: string) => {\n    const match =\n      /^https:\\/\\/(twitter|x)\\.com\\/(#!\\/)?(\\w+)\\/status(es)*\\/(\\d+)/.exec(text)\n\n    if (match != null) {\n      return {\n        id: match[5],\n        url: match[1],\n      }\n    }\n\n    return null\n  },\n\n  type: 'tweet',\n}\n\nexport const FigmaEmbedConfig: CustomEmbedConfig = {\n  contentName: 'Figma Document',\n\n  exampleUrl: 'https://www.figma.com/file/LKQ4FJ4bTnCSjedbRpk931/Sample-File',\n\n  icon: <FigmaIcon className=\"size-4\" />,\n\n  insertNode: (editor: LexicalEditor, result: EmbedMatchResult) => {\n    editor.dispatchCommand(INSERT_FIGMA_COMMAND, result.id)\n  },\n\n  keywords: ['figma', 'figma.com', 'mock-up'],\n\n  // Determine if a given URL is a match and return url data.\n  parseUrl: (text: string) => {\n    const match =\n      /https:\\/\\/([\\w.-]+\\.)?figma.com\\/(file|proto)\\/([0-9a-zA-Z]{22,128})(?:\\/.*)?$/.exec(\n        text\n      )\n\n    if (match != null) {\n      return {\n        id: match[3],\n        url: match[0],\n      }\n    }\n\n    return null\n  },\n\n  type: 'figma',\n}\n\nexport const EmbedConfigs = [\n  TwitterEmbedConfig,\n  YoutubeEmbedConfig,\n  FigmaEmbedConfig,\n]\n\nconst debounce = (callback: (text: string) => void, delay: number) => {\n  let timeoutId: number\n  return (text: string) => {\n    window.clearTimeout(timeoutId)\n    timeoutId = window.setTimeout(() => {\n      callback(text)\n    }, delay)\n  }\n}\n\nexport function AutoEmbedDialog({\n  embedConfig,\n  onClose,\n}: {\n  embedConfig: CustomEmbedConfig\n  onClose: () => void\n}): JSX.Element {\n  const [text, setText] = useState('')\n  const [editor] = useLexicalComposerContext()\n  const [embedResult, setEmbedResult] = useState<EmbedMatchResult | null>(null)\n\n  const validateText = useMemo(\n    () =>\n      debounce((inputText: string) => {\n        const urlMatch = URL_MATCHER.exec(inputText)\n        if (embedConfig != null && inputText != null && urlMatch != null) {\n          Promise.resolve(embedConfig.parseUrl(inputText)).then(\n            (parseResult) => {\n              setEmbedResult(parseResult)\n            }\n          )\n        } else if (embedResult != null) {\n          setEmbedResult(null)\n        }\n      }, 200),\n    [embedConfig, embedResult]\n  )\n\n  const onClick = () => {\n    if (embedResult != null) {\n      embedConfig.insertNode(editor, embedResult)\n      onClose()\n    }\n  }\n\n  return (\n    <div className=\"\">\n      <div className=\"space-y-4\">\n        <Input\n          type=\"text\"\n          placeholder={embedConfig.exampleUrl}\n          value={text}\n          data-test-id={`${embedConfig.type}-embed-modal-url`}\n          onChange={(e) => {\n            const { value } = e.target\n            setText(value)\n            validateText(value)\n          }}\n        />\n        <DialogFooter>\n          <Button\n            disabled={!embedResult}\n            onClick={onClick}\n            data-test-id={`${embedConfig.type}-embed-modal-submit-btn`}\n          >\n            Embed\n          </Button>\n        </DialogFooter>\n      </div>\n    </div>\n  )\n}\n\nexport function AutoEmbedPlugin(): JSX.Element {\n  const [modal, showModal] = useEditorModal()\n\n  const openEmbedModal = (embedConfig: CustomEmbedConfig) => {\n    showModal(`Embed ${embedConfig.contentName}`, (onClose) => (\n      <AutoEmbedDialog embedConfig={embedConfig} onClose={onClose} />\n    ))\n  }\n\n  const getMenuOptions = (\n    activeEmbedConfig: CustomEmbedConfig,\n    embedFn: () => void,\n    dismissFn: () => void\n  ) => {\n    return [\n      new AutoEmbedOption('Dismiss', {\n        onSelect: dismissFn,\n      }),\n      new AutoEmbedOption(`Embed ${activeEmbedConfig.contentName}`, {\n        onSelect: embedFn,\n      }),\n    ]\n  }\n\n  return (\n    <>\n      {modal}\n      <LexicalAutoEmbedPlugin<CustomEmbedConfig>\n        embedConfigs={EmbedConfigs}\n        onOpenEmbedModalForConfig={openEmbedModal}\n        getMenuOptions={getMenuOptions}\n        menuRenderFn={(\n          anchorElementRef,\n          {\n            selectedIndex,\n            options,\n            selectOptionAndCleanUp,\n            setHighlightedIndex,\n          }\n        ) => {\n          return anchorElementRef.current ? (\n            <Popover open={true}>\n              <PopoverPortal container={anchorElementRef.current}>\n                <div className=\"-translate-y-full transform\">\n                  <PopoverTrigger />\n                  <PopoverContent\n                    className=\"w-[200px] p-0\"\n                    align=\"start\"\n                    side=\"right\"\n                  >\n                    <Command>\n                      <CommandList>\n                        <CommandGroup>\n                          {options.map((option, i: number) => (\n                            <CommandItem\n                              key={option.key}\n                              value={option.title}\n                              onSelect={() => {\n                                selectOptionAndCleanUp(option)\n                              }}\n                              className=\"flex items-center gap-2\"\n                            >\n                              {option.title}\n                            </CommandItem>\n                          ))}\n                        </CommandGroup>\n                      </CommandList>\n                    </Command>\n                  </PopoverContent>\n                </div>\n              </PopoverPortal>\n            </Popover>\n          ) : null\n        }}\n      />\n    </>\n  )\n}\n"]}