{"version":3,"file":"inline-image-node.jsx","sourceRoot":"","sources":["inline-image-node.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { Suspense, JSX } from 'react'\n\nimport type {\n  DOMConversionMap,\n  DOMConversionOutput,\n  DOMExportOutput,\n  EditorConfig,\n  LexicalEditor,\n  LexicalNode,\n  NodeKey,\n  SerializedEditor,\n  SerializedLexicalNode,\n  Spread,\n} from 'lexical'\nimport { $applyNodeReplacement, DecoratorNode, createEditor } from 'lexical'\n\nconst InlineImageComponent = React.lazy(\n  () => import('../editor-ui/inline-image-component')\n)\n\nexport type Position = 'left' | 'right' | 'full' | undefined\n\nexport interface InlineImagePayload {\n  altText: string\n  caption?: LexicalEditor\n  height?: number\n  key?: NodeKey\n  showCaption?: boolean\n  src: string\n  width?: number\n  position?: Position\n}\n\nexport interface UpdateInlineImagePayload {\n  altText?: string\n  showCaption?: boolean\n  position?: Position\n}\n\nfunction $convertInlineImageElement(domNode: Node): null | DOMConversionOutput {\n  if (domNode instanceof HTMLImageElement) {\n    const { alt: altText, src, width, height } = domNode\n    const node = $createInlineImageNode({ altText, height, src, width })\n    return { node }\n  }\n  return null\n}\n\nexport type SerializedInlineImageNode = Spread<\n  {\n    altText: string\n    caption: SerializedEditor\n    height?: number\n    showCaption: boolean\n    src: string\n    width?: number\n    position?: Position\n  },\n  SerializedLexicalNode\n>\n\nexport class InlineImageNode extends DecoratorNode<JSX.Element> {\n  __src: string\n  __altText: string\n  __width: 'inherit' | number\n  __height: 'inherit' | number\n  __showCaption: boolean\n  __caption: LexicalEditor\n  __position: Position\n\n  static getType(): string {\n    return 'inline-image'\n  }\n\n  static clone(node: InlineImageNode): InlineImageNode {\n    return new InlineImageNode(\n      node.__src,\n      node.__altText,\n      node.__position,\n      node.__width,\n      node.__height,\n      node.__showCaption,\n      node.__caption,\n      node.__key\n    )\n  }\n\n  static importJSON(\n    serializedNode: SerializedInlineImageNode\n  ): InlineImageNode {\n    const { altText, height, width, caption, src, showCaption, position } =\n      serializedNode\n    const node = $createInlineImageNode({\n      altText,\n      height,\n      position,\n      showCaption,\n      src,\n      width,\n    })\n    const nestedEditor = node.__caption\n    const editorState = nestedEditor.parseEditorState(caption.editorState)\n    if (!editorState.isEmpty()) {\n      nestedEditor.setEditorState(editorState)\n    }\n    return node\n  }\n\n  static importDOM(): DOMConversionMap | null {\n    return {\n      img: (node: Node) => ({\n        conversion: $convertInlineImageElement,\n        priority: 0,\n      }),\n    }\n  }\n\n  constructor(\n    src: string,\n    altText: string,\n    position: Position,\n    width?: 'inherit' | number,\n    height?: 'inherit' | number,\n    showCaption?: boolean,\n    caption?: LexicalEditor,\n    key?: NodeKey\n  ) {\n    super(key)\n    this.__src = src\n    this.__altText = altText\n    this.__width = width || 'inherit'\n    this.__height = height || 'inherit'\n    this.__showCaption = showCaption || false\n    this.__caption = caption || createEditor()\n    this.__position = position\n  }\n\n  exportDOM(): DOMExportOutput {\n    const element = document.createElement('img')\n    element.setAttribute('src', this.__src)\n    element.setAttribute('alt', this.__altText)\n    element.setAttribute('width', this.__width.toString())\n    element.setAttribute('height', this.__height.toString())\n    return { element }\n  }\n\n  exportJSON(): SerializedInlineImageNode {\n    return {\n      altText: this.getAltText(),\n      caption: this.__caption.toJSON(),\n      height: this.__height === 'inherit' ? 0 : this.__height,\n      position: this.__position,\n      showCaption: this.__showCaption,\n      src: this.getSrc(),\n      type: 'inline-image',\n      version: 1,\n      width: this.__width === 'inherit' ? 0 : this.__width,\n    }\n  }\n\n  getSrc(): string {\n    return this.__src\n  }\n\n  getAltText(): string {\n    return this.__altText\n  }\n\n  setAltText(altText: string): void {\n    const writable = this.getWritable()\n    writable.__altText = altText\n  }\n\n  setWidthAndHeight(\n    width: 'inherit' | number,\n    height: 'inherit' | number\n  ): void {\n    const writable = this.getWritable()\n    writable.__width = width\n    writable.__height = height\n  }\n\n  getShowCaption(): boolean {\n    return this.__showCaption\n  }\n\n  setShowCaption(showCaption: boolean): void {\n    const writable = this.getWritable()\n    writable.__showCaption = showCaption\n  }\n\n  getPosition(): Position {\n    return this.__position\n  }\n\n  setPosition(position: Position): void {\n    const writable = this.getWritable()\n    writable.__position = position\n  }\n\n  update(payload: UpdateInlineImagePayload): void {\n    const writable = this.getWritable()\n    const { altText, showCaption, position } = payload\n    if (altText !== undefined) {\n      writable.__altText = altText\n    }\n    if (showCaption !== undefined) {\n      writable.__showCaption = showCaption\n    }\n    if (position !== undefined) {\n      writable.__position = position\n    }\n  }\n\n  // View\n  getPositionClassName(): string {\n    switch (this.__position) {\n      case 'left':\n        return 'float-left w-1/2'\n      case 'right':\n        return 'float-right w-1/2 '\n      case 'full':\n        return 'w-full'\n      default:\n        return ''\n    }\n  }\n\n  createDOM(config: EditorConfig): HTMLElement {\n    const span = document.createElement('span')\n    const className = `${config.theme.inlineImage} ${this.getPositionClassName()}`\n    if (className !== undefined) {\n      span.className = className\n    }\n    return span\n  }\n\n  updateDOM(\n    prevNode: InlineImageNode,\n    dom: HTMLElement,\n    config: EditorConfig\n  ): false {\n    const position = this.__position\n    if (position !== prevNode.__position) {\n      const className = `${config.theme.inlineImage} ${this.getPositionClassName()}`\n      if (className !== undefined) {\n        dom.className = className\n      }\n    }\n    return false\n  }\n\n  decorate(): JSX.Element {\n    return (\n      <Suspense fallback={null}>\n        <InlineImageComponent\n          src={this.__src}\n          altText={this.__altText}\n          width={this.__width}\n          height={this.__height}\n          nodeKey={this.getKey()}\n          showCaption={this.__showCaption}\n          caption={this.__caption}\n          position={this.__position}\n        />\n      </Suspense>\n    )\n  }\n}\n\nexport function $createInlineImageNode({\n  altText,\n  position,\n  height,\n  src,\n  width,\n  showCaption,\n  caption,\n  key,\n}: InlineImagePayload): InlineImageNode {\n  return $applyNodeReplacement(\n    new InlineImageNode(\n      src,\n      altText,\n      position,\n      width,\n      height,\n      showCaption,\n      caption,\n      key\n    )\n  )\n}\n\nexport function $isInlineImageNode(\n  node: LexicalNode | null | undefined\n): node is InlineImageNode {\n  return node instanceof InlineImageNode\n}\n"]}