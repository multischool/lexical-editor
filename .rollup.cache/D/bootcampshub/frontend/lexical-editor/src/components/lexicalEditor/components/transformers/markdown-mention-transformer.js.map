{"version":3,"file":"markdown-mention-transformer.js","sourceRoot":"","sources":["markdown-mention-transformer.ts"],"names":[],"mappings":"AAEA,OAAO,EACL,2BAA2B,EAC3B,uBAAuB,GACxB,MAAM,0CAA0C,CAAC;AAElD,MAAM,CAAC,MAAM,4BAA4B,GAAyB;IAChE,6CAA6C;IAC7C,YAAY,EAAE,0BAA0B;IACxC,MAAM,EAAE,0BAA0B;IAClC,YAAY,EAAE,EAAE;IAEhB;;OAEG;IACH,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;QACf,IAAI,uBAAuB,CAAC,IAAI,CAAC,EAAE,CAAC;YAClC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,gBAAgB;YAC/C,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC;YAClC,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,IAAI,EAAE,CAAC;YACzB,OAAO,KAAK,KAAK,KAAK,EAAE,GAAG,CAAC;QAC9B,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,iCAAiC;IACjC,yEAAyE;IACzE,kCAAkC;IAClC,oEAAoE;IACpE,mCAAmC;IACnC,KAAK;IAEL;;OAEG;IACH,OAAO,EAAE,CAAC,QAAQ,EAAE,KAAK,EAAE,EAAE;QAC3B,OAAO,CAAC,GAAG,CAAC,sCAAsC,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;QAErE,MAAM,CAAC,EAAE,KAAK,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;QAE5B,OAAO,CAAC,GAAG,CAAC;YACV,KAAK;YACL,EAAE;SAEH,CAAC,CAAC;QAEH,MAAM,WAAW,GAAG,2BAA2B,CAAC,GAAG,EAAE,KAAK,EAAE;YAExD,EAAE;YACF,KAAK;SAER,CACA,CAAC;QACF,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IAChC,CAAC;IAED,8FAA8F;IAC9F,IAAI,EAAE,YAAY;CACnB,CAAC","sourcesContent":["import type { TextMatchTransformer } from '@lexical/markdown';\r\nimport { TextNode } from 'lexical';\r\nimport {\r\n  $createBeautifulMentionNode,\r\n  $isBeautifulMentionNode,\r\n} from '../plugins/beautiful-mention/MentionNode';\r\n\r\nexport const MENTION_MARKDOWN_TRANSFORMER: TextMatchTransformer = {\r\n  // Matches markdown of the form: @[Label](ID)\r\n  importRegExp: /@\\[([^\\]]+)\\]\\(([^)]+)\\)/,\r\n  regExp: /@\\[([^\\]]+)\\]\\(([^)]+)\\)/,\r\n  dependencies: [],\r\n\r\n  /**\r\n   * Export: Given a mention node, return `@[Label](ID)`.\r\n   */\r\n  export: (node) => {\r\n    if ($isBeautifulMentionNode(node)) {\r\n      const label = node.getValue(); // e.g. \"shimul\"\r\n      const data = node.getData() || {};\r\n      const id = data.id || '';\r\n      return `@[${label}](${id})`;\r\n    }\r\n    return null;\r\n  },\r\n\r\n  // import: (textNode, match) => {\r\n  //   console.log('Markdown mention transformer import', textNode, match);\r\n  //   const [_, label, id] = match;\r\n  //   const mentionNode = $createBeautifulMentionNode(label, { id });\r\n  //   textNode.replace(mentionNode);\r\n  // },\r\n\r\n  /**\r\n   * Replace: Transform the matched text into a MentionNode\r\n   */\r\n  replace: (textNode, match) => {\r\n    console.log('Markdown mention transformer replace', textNode, match);\r\n    \r\n    const [, label, id] = match;\r\n\r\n    console.log({\r\n      label,\r\n      id,\r\n      \r\n    });\r\n    \r\n    const mentionNode = $createBeautifulMentionNode(\"@\", label, {\r\n     \r\n        id,\r\n        label,\r\n      \r\n    }\r\n    );\r\n    textNode.replace(mentionNode);\r\n  },\r\n\r\n  // Change the type to \"text-match\" so Lexical treats this transformer as an inline text match.\r\n  type: \"text-match\",\r\n};"]}