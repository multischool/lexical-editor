{"version":3,"file":"clear-formatting-toolbar-plugin.jsx","sourceRoot":"","sources":["clear-formatting-toolbar-plugin.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client'\n\nimport { useCallback } from 'react'\n\nimport { $isDecoratorBlockNode } from '@lexical/react/LexicalDecoratorBlockNode'\nimport { $isHeadingNode, $isQuoteNode } from '@lexical/rich-text'\nimport { $isTableSelection } from '@lexical/table'\nimport { $getNearestBlockElementAncestorOrThrow } from '@lexical/utils'\nimport {\n  $createParagraphNode,\n  $getSelection,\n  $isRangeSelection,\n  $isTextNode,\n} from 'lexical'\nimport { EraserIcon } from 'lucide-react'\n\nimport { Button } from '../../../ui/button'\n\nimport { useToolbarContext } from '../../context/toolbar-context'\n\nexport function ClearFormattingToolbarPlugin() {\n  const { activeEditor } = useToolbarContext()\n\n  const clearFormatting = useCallback(() => {\n    activeEditor.update(() => {\n      const selection = $getSelection()\n      if ($isRangeSelection(selection) || $isTableSelection(selection)) {\n        const anchor = selection.anchor\n        const focus = selection.focus\n        const nodes = selection.getNodes()\n        const extractedNodes = selection.extract()\n\n        if (anchor.key === focus.key && anchor.offset === focus.offset) {\n          return\n        }\n\n        nodes.forEach((node, idx) => {\n          // We split the first and last node by the selection\n          // So that we don't format unselected text inside those nodes\n          if ($isTextNode(node)) {\n            // Use a separate variable to ensure TS does not lose the refinement\n            let textNode = node\n            if (idx === 0 && anchor.offset !== 0) {\n              textNode = textNode.splitText(anchor.offset)[1] || textNode\n            }\n            if (idx === nodes.length - 1) {\n              textNode = textNode.splitText(focus.offset)[0] || textNode\n            }\n            /**\n             * If the selected text has one format applied\n             * selecting a portion of the text, could\n             * clear the format to the wrong portion of the text.\n             *\n             * The cleared text is based on the length of the selected text.\n             */\n            // We need this in case the selected text only has one format\n            const extractedTextNode = extractedNodes[0]\n            if (nodes.length === 1 && $isTextNode(extractedTextNode)) {\n              textNode = extractedTextNode\n            }\n\n            if (textNode.__style !== '') {\n              textNode.setStyle('')\n            }\n            if (textNode.__format !== 0) {\n              textNode.setFormat(0)\n              $getNearestBlockElementAncestorOrThrow(textNode).setFormat('')\n            }\n            node = textNode\n          } else if ($isHeadingNode(node) || $isQuoteNode(node)) {\n            node.replace($createParagraphNode(), true)\n          } else if ($isDecoratorBlockNode(node)) {\n            node.setFormat('')\n          }\n        })\n      }\n    })\n  }, [activeEditor])\n\n  return (\n    <Button\n      size={'sm'}\n      variant={'outline'}\n      className=\"h-8 w-8\"\n      onClick={clearFormatting}\n    >\n      <EraserIcon className=\"h-4 w-4\" />\n    </Button>\n  )\n}\n"]}