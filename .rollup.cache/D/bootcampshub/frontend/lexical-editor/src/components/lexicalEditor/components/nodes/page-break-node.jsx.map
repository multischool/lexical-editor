{"version":3,"file":"page-break-node.jsx","sourceRoot":"","sources":["page-break-node.tsx"],"names":[],"mappings":"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","sourcesContent":["import { useCallback, useEffect, JSX } from 'react'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport { useLexicalNodeSelection } from '@lexical/react/useLexicalNodeSelection'\nimport { mergeRegister } from '@lexical/utils'\nimport {\n  $getSelection,\n  $isNodeSelection,\n  CLICK_COMMAND,\n  COMMAND_PRIORITY_HIGH,\n  COMMAND_PRIORITY_LOW,\n  DOMConversionMap,\n  DOMConversionOutput,\n  DecoratorNode,\n  KEY_BACKSPACE_COMMAND,\n  KEY_DELETE_COMMAND,\n  LexicalNode,\n  NodeKey,\n  SerializedLexicalNode,\n} from 'lexical'\n\nexport type SerializedPageBreakNode = SerializedLexicalNode\n\nfunction PageBreakComponent({ nodeKey }: { nodeKey: NodeKey }) {\n  const [editor] = useLexicalComposerContext()\n  const [isSelected, setSelected, clearSelection] =\n    useLexicalNodeSelection(nodeKey)\n\n  const $onDelete = useCallback(\n    (event: KeyboardEvent) => {\n      event.preventDefault()\n      const deleteSelection = $getSelection()\n      if (isSelected && $isNodeSelection(deleteSelection)) {\n        editor.update(() => {\n          deleteSelection.getNodes().forEach((node) => {\n            if ($isPageBreakNode(node)) {\n              node.remove()\n            }\n          })\n        })\n      }\n      return false\n    },\n    [editor, isSelected]\n  )\n\n  useEffect(() => {\n    return mergeRegister(\n      editor.registerCommand(\n        CLICK_COMMAND,\n        (event: MouseEvent) => {\n          const pbElem = editor.getElementByKey(nodeKey)\n\n          if (event.target === pbElem) {\n            if (!event.shiftKey) {\n              clearSelection()\n            }\n            setSelected(!isSelected)\n            return true\n          }\n\n          return false\n        },\n        COMMAND_PRIORITY_LOW\n      ),\n      editor.registerCommand(\n        KEY_DELETE_COMMAND,\n        $onDelete,\n        COMMAND_PRIORITY_LOW\n      ),\n      editor.registerCommand(\n        KEY_BACKSPACE_COMMAND,\n        $onDelete,\n        COMMAND_PRIORITY_LOW\n      )\n    )\n  }, [clearSelection, editor, isSelected, nodeKey, $onDelete, setSelected])\n\n  useEffect(() => {\n    const pbElem = editor.getElementByKey(nodeKey)\n    if (pbElem !== null) {\n      if (isSelected) {\n        pbElem.classList.add('!border-[var(--editor-color-primary,#4766cb)]')\n        pbElem.classList.add(\n          '!after:text-[var(--editor-color-primary,#4766cb)]'\n        )\n        pbElem.classList.add('!before:opacity-100')\n      } else {\n        pbElem.classList.remove('!border-[var(--editor-color-primary,#4766cb)]')\n        pbElem.classList.remove(\n          '!after:text-[var(--editor-color-primary,#4766cb)]'\n        )\n        pbElem.classList.remove('!before:opacity-100')\n      }\n    }\n  }, [editor, isSelected, nodeKey])\n\n  return null\n}\n\nexport class PageBreakNode extends DecoratorNode<JSX.Element> {\n  static getType(): string {\n    return 'page-break'\n  }\n\n  static clone(node: PageBreakNode): PageBreakNode {\n    return new PageBreakNode(node.__key)\n  }\n\n  static importJSON(serializedNode: SerializedPageBreakNode): PageBreakNode {\n    return $createPageBreakNode()\n  }\n\n  static importDOM(): DOMConversionMap | null {\n    return {\n      figure: (domNode: HTMLElement) => {\n        const tp = domNode.getAttribute('type')\n        if (tp !== this.getType()) {\n          return null\n        }\n\n        return {\n          conversion: $convertPageBreakElement,\n          priority: COMMAND_PRIORITY_HIGH,\n        }\n      },\n    }\n  }\n\n  exportJSON(): SerializedLexicalNode {\n    return {\n      type: this.getType(),\n      version: 1,\n    }\n  }\n\n  createDOM(): HTMLElement {\n    const el = document.createElement('figure')\n    el.setAttribute('type', this.getType())\n    el.style.pageBreakAfter = 'always'\n    el.className = `\n      relative block w-[calc(100%+56px)] overflow-visible \n      -ml-[28px] mt-7 mb-7\n      border-0 border-t border-b border-dashed border-[var(--editor-color-secondary,#eee)]\n      bg-[var(--editor-color-secondary,#eee)]\n      before:content-[''] \n      before:absolute before:top-1/2 before:-translate-y-1/2\n      before:left-10 before:opacity-50\n      before:bg-cover before:w-4 before:h-4\n      after:content-['PAGE_BREAK']\n      after:absolute after:top-1/2 after:left-1/2 \n      after:-translate-x-1/2 after:-translate-y-1/2\n      after:block after:py-0.5 after:px-1.5\n      after:border after:border-solid after:border-[#ccc]\n      after:bg-white after:text-xs after:text-black after:font-semibold\n    `\n    return el\n  }\n\n  getTextContent(): string {\n    return '\\n'\n  }\n\n  isInline(): false {\n    return false\n  }\n\n  updateDOM(): boolean {\n    return false\n  }\n\n  decorate(): JSX.Element {\n    return <PageBreakComponent nodeKey={this.__key} />\n  }\n}\n\nfunction $convertPageBreakElement(): DOMConversionOutput {\n  return { node: $createPageBreakNode() }\n}\n\nexport function $createPageBreakNode(): PageBreakNode {\n  return new PageBreakNode()\n}\n\nexport function $isPageBreakNode(\n  node: LexicalNode | null | undefined\n): node is PageBreakNode {\n  return node instanceof PageBreakNode\n}\n"]}