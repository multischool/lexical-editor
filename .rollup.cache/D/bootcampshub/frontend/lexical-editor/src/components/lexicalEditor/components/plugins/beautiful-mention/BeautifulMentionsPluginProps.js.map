{"version":3,"file":"BeautifulMentionsPluginProps.js","sourceRoot":"","sources":["BeautifulMentionsPluginProps.ts"],"names":[],"mappings":"","sourcesContent":["import { ComponentPropsWithRef, ElementType } from \"react\";\n\n/**\n * Represents a menu item for a mention.\n */\nexport interface BeautifulMentionsMenuItem {\n  /**\n   * The trigger of the mention. For example: \"@\".\n   */\n  trigger: string;\n  /**\n   * The value of the mention without the trigger. For example: \"John\".\n   */\n  value: string;\n  /**\n   * Value to be displayed in the menu. Normally the same as `value` but can be\n   * used to display a different value. For example: \"Add 'John'\".\n   */\n  displayValue: string;\n  /**\n   * Additional data belonging to the mention.\n   */\n  data?: Record<string, BeautifulMentionsItemData>;\n}\n\n/**\n * Represents a combobox item for a mention.\n */\nexport interface BeautifulMentionsComboboxItem {\n  /**\n   * The type of the item.\n   */\n  itemType: \"trigger\" | \"value\" | \"additional\";\n  /**\n   * Depending on the item type, either the trigger or the value of the\n   * mention.\n   */\n  value: string;\n  /**\n   * The value to be displayed. Normally the same as `value` but can be\n   * used to display a different value.\n   */\n  displayValue: string;\n  /**\n   * Additional data belonging to the mention.\n   */\n  data?: Record<string, BeautifulMentionsItemData>;\n}\n\nexport type BeautifulMentionsItemData = string | boolean | number | null;\n\n/**\n * The mention without the trigger. For example: \"John\". Either a string or\n * an object with at least a `value` property. If an object is provided,\n * additional data can be specified. For example: `{ value: \"John\", id: 1 }`.\n */\nexport type BeautifulMentionsItem =\n  | string\n  | {\n      value: string;\n      [key: string]: BeautifulMentionsItemData;\n    };\n\n/**\n * Props for BeautifulMentionsMenu component. This component is used to render\n * the menu that shows the suggestions for a mention.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface BeautifulMentionsMenuProps extends ComponentPropsWithRef<any> {\n  /**\n   * If `true`, the `onSearch` function is currently running.\n   */\n  loading?: boolean;\n}\n\n/**\n * Props for BeautifulMentionsMenuItem component. This component is used to\n * render a menu item.\n */\nexport type BeautifulMentionsMenuItemProps = Omit<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ComponentPropsWithRef<any>,\n  \"selected\" | \"label\"\n> & {\n  /**\n   * If `true`, the menu item is selected.\n   */\n  selected: boolean;\n  /**\n   * The label of the menu item.\n   * @deprecated Use `item` instead.\n   */\n  label: string;\n  /**\n   * The value of the menu item.\n   * @deprecated Use `item` instead.\n   */\n  itemValue: string;\n  /**\n   * Contains information about the menu item.\n   */\n  item: BeautifulMentionsMenuItem;\n};\n\n/**\n * Props for BeautifulMentionsCombobox component. This component is used to\n * render the combobox that shows the available triggers and mentions.\n */\nexport interface BeautifulMentionsComboboxProps\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  extends ComponentPropsWithRef<any> {\n  /**\n   * If `true`, the `onSearch` function is currently running.\n   */\n  loading?: boolean;\n  /**\n   * The items shown in the combobox can be either triggers or mentions.\n   */\n  itemType: \"trigger\" | \"value\";\n}\n\n/**\n * Props for BeautifulMentionsComboboxItem component. This component is used to\n * render a combobox item.\n */\nexport type BeautifulMentionsComboboxItemProps = Omit<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ComponentPropsWithRef<any>,\n  \"selected\" | \"option\"\n> & {\n  /**\n   * If `true`, the combobox item is selected.\n   */\n  selected: boolean;\n  /**\n   * Contains information about the combobox item.\n   */\n  item: BeautifulMentionsComboboxItem;\n};\n\ninterface BeautifulMentionsProps {\n  /**\n   * If `truthy`, the user can also create new mentions instead of just\n   * selecting one from the mention list.\n   * If a string is provided, it will be used as the label for the\n   * option that creates a new mention. The expression `{{name}}` will be\n   * replaced with the value of the user input. If a map is provided,\n   * individual labels can be specified for each trigger.\n   * @default false\n   */\n  creatable?: boolean | string | Record<string, boolean | string>;\n  /**\n   * At most, the specified number of menu items will be rendered.\n   * If a map is provided, individual limits can be specified for each\n   * trigger.\n   * @default 5\n   */\n  menuItemLimit?: number | false | Record<string, number | false>;\n  /**\n   * If `true`, mentions can contain spaces.\n   * @default true\n   */\n  allowSpaces?: boolean;\n  /**\n   * If `true`, spaces are automatically placed around mentions.\n   * @default true\n   */\n  autoSpace?: boolean;\n  /**\n   * Only used if `allowSpaces` is `true`. The given characters are\n   * used to enclose mentions if they contain spaces.\n   */\n  mentionEnclosure?: string;\n  /**\n   * If `true`, the mention menu will be shown when the user deletes a mention.\n   */\n  showMentionsOnDelete?: boolean;\n  /**\n   * Regular expression that matches punctuation characters when looking for\n   * mentions.\n   *\n   * In addition to spaces, these characters can appear directly after a mention.\n   * E.g. `@John!` or `@John,`.\n   * @default \\.,\\*\\?\\$\\|#{}\\(\\)\\^\\[\\]\\/!%'\\\"~=<>_:;\n   */\n  punctuation?: string;\n  /**\n   * Regular expression that matches characters that can appear directly directly\n   * before the trigger character.\n   * @default \\(\n   */\n  preTriggerChars?: string;\n  /**\n   * If `true`, the mention menu contains the mentions that are currently\n   * in the editor.\n   * @default true\n   */\n  showCurrentMentionsAsSuggestions?: boolean;\n}\n\ntype BeautifulMentionsMenuComponentsProps = BeautifulMentionsProps & {\n  /**\n   * The class name to apply to the menu component root element.\n   */\n  menuAnchorClassName?: string;\n  /**\n   * The component to use for the menu.\n   * @default ul\n   */\n  menuComponent?: ElementType<BeautifulMentionsMenuProps>;\n  /**\n   * The component to use for a menu item.\n   * @default li\n   */\n  menuItemComponent?: ElementType<BeautifulMentionsMenuItemProps>;\n  /**\n   * The component to use when there are no results.\n   */\n  emptyComponent?: ElementType;\n  /**\n   * If `true`, the mention will be inserted when the user blurs the editor.\n   * @default true\n   */\n  insertOnBlur?: boolean;\n  /**\n   * Callback fired when the menu requests to be open.\n   */\n  onMenuOpen?: () => void;\n  /**\n   * Callback fired when the menu requests to be closed.\n   */\n  onMenuClose?: () => void;\n  /**\n   * Callback fired when the user selects a menu item.\n   */\n  onMenuItemSelect?: (item: BeautifulMentionsMenuItem) => void;\n  combobox?: never;\n  comboboxOpen?: never;\n  comboboxAnchor?: never;\n  comboboxAnchorClassName?: never;\n  comboboxComponent?: never;\n  comboboxItemComponent?: never;\n  comboboxAdditionalItems?: never;\n  onComboboxItemSelect?: never;\n  onComboboxOpen?: never;\n  onComboboxClose?: never;\n  onComboboxFocusChange?: never;\n};\n\ntype BeautifulMentionsMenuCommandComponentProps = BeautifulMentionsProps & {\n  /**\n   * If `true`, replaces the typeahead menu with a combobox that opens below\n   * the editor. The combobox shows the currently available triggers and\n   * mentions.\n   */\n  combobox: true;\n  /**\n   * If `true`, the combobox is open.\n   */\n  comboboxOpen?: boolean;\n  /**\n   * The element that the combobox will be attached to.\n   * @default editor root element\n   */\n  comboboxAnchor?: HTMLElement | null;\n  /**\n   * The class name to apply to the combobox anchor element.\n   */\n  comboboxAnchorClassName?: string;\n  /**\n   * The component to use for the combobox.\n   * @default ul\n   */\n  comboboxComponent?: ElementType<BeautifulMentionsComboboxProps>;\n  /**\n   * The component to use for a combobox item.\n   */\n  comboboxItemComponent?: ElementType<BeautifulMentionsComboboxItemProps>;\n  /**\n   * Additional items to show in the combobox.\n   */\n  comboboxAdditionalItems?: Omit<BeautifulMentionsComboboxItem, \"itemType\">[];\n  /**\n   * Callback fired when the user selects a combobox item.\n   */\n  onComboboxItemSelect?: (item: BeautifulMentionsComboboxItem) => void;\n  /**\n   * Callback fired when the combobox requests to be open.\n   */\n  onComboboxOpen?: () => void;\n  /**\n   * Callback fired when the combobox requests to be closed.\n   */\n  onComboboxClose?: () => void;\n  /**\n   * Callback fired when the focus of the currently selected combobox\n   * item changes.\n   */\n  onComboboxFocusChange?: (item: BeautifulMentionsComboboxItem | null) => void;\n  menuAnchorClassName?: never;\n  menuComponent?: never;\n  menuItemComponent?: never;\n  emptyComponent?: never;\n  insertOnBlur?: never;\n  onMenuOpen?: never;\n  onMenuClose?: never;\n  onMenuItemSelect?: never;\n};\n\ntype BeautifulMentionsPluginWithCompProps =\n  | BeautifulMentionsMenuComponentsProps\n  | BeautifulMentionsMenuCommandComponentProps;\n\nexport type BeautifulMentionsSearchProps =\n  BeautifulMentionsPluginWithCompProps & {\n    items?: never;\n    /**\n     * The characters that trigger the mention menu. Needed to tell the plugin\n     * when to call the query function.\n     */\n    triggers: string[];\n    /**\n     * A function that returns a list of suggestions for a given trigger and\n     * query string.\n     */\n    onSearch: (\n      trigger: string,\n      queryString?: string | null,\n    ) => Promise<BeautifulMentionsItem[]>;\n    /**\n     * The delay in milliseconds before the `onSearch` function is called.\n     * @default 250\n     */\n    searchDelay?: number;\n  };\n\nexport type BeautifulMentionsItemsProps =\n  BeautifulMentionsPluginWithCompProps & {\n    /**\n     * A map of trigger characters to a list of suggestions.\n     * The keys of the map are the trigger characters that will be used to\n     * open the mention menu. The values are the list of suggestions that\n     * will be shown in the menu.\n     */\n    items: Record<string, BeautifulMentionsItem[]>;\n    /**\n     * Optional list of trigger characters. If provided, the mention menu will\n     * only be opened for the specified triggers. Useful if the trigger is a\n     * regular expression that should not be shown to the user.\n     */\n    triggers?: string[];\n    onSearch?: never;\n    searchDelay?: never;\n  };\n\nexport type BeautifulMentionsPluginProps =\n  | BeautifulMentionsSearchProps\n  | BeautifulMentionsItemsProps;\n\n/**\n * Props for BeautifulMention component. This component is used to render\n * a mention in the editor.\n */\nexport interface BeautifulMentionComponentProps<\n  T extends Record<string, BeautifulMentionsItemData> = {},\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n> extends Omit<ComponentPropsWithRef<any>, \"value\" | \"data\"> {\n  /**\n   * The trigger of the mention.\n   */\n  trigger: string;\n  /**\n   * The value of the mention without the trigger.\n   */\n  value: string;\n  /**\n   * Additional data belonging to the mention.\n   */\n  data?: T;\n  /**\n   * Contains a concatenated string of `trigger` and `value`.\n   */\n  \"data-beautiful-mention\": string;\n}\n"]}