{"version":3,"file":"MentionNode.jsx","sourceRoot":"","sources":["MentionNode.tsx"],"names":[],"mappings":"AAAA,OAAO,EACL,qBAAqB,EAGrB,aAAa,GAQd,MAAM,SAAS,CAAC;AACjB,OAAO,KAAsB,MAAM,OAAO,CAAC;AAK3C,OAAO,gBAAgB,MAAM,oBAAoB,CAAC;AAYlD,SAAS,cAAc,CAAC,OAAoB;IAC1C,MAAM,OAAO,GAAG,OAAO,CAAC,YAAY,CAClC,wCAAwC,CACzC,CAAC;IACF,MAAM,KAAK,GAAG,OAAO,CAAC,YAAY,CAAC,sCAAsC,CAAC,CAAC;IAC3E,IAAI,IAAI,GAA0D,SAAS,CAAC;IAC5E,MAAM,OAAO,GAAG,OAAO,CAAC,YAAY,CAAC,qCAAqC,CAAC,CAAC;IAC5E,IAAI,OAAO,EAAE,CAAC;QACZ,IAAI,CAAC;YACH,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAA8C,CAAC;QAC1E,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,OAAO,CAAC,IAAI,CACV,0DAA0D,EAC1D,CAAC,CACF,CAAC;QACJ,CAAC;IACH,CAAC;IACD,IAAI,OAAO,IAAI,IAAI,IAAI,KAAK,KAAK,IAAI,EAAE,CAAC;QACtC,MAAM,IAAI,GAAG,2BAA2B,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;QAC/D,OAAO,EAAE,IAAI,EAAE,CAAC;IAClB,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED;;GAEG;AACH,MAAM,OAAO,oBAAqB,SAAQ,aAAgC;IAKxE,MAAM,CAAC,OAAO;QACZ,OAAO,kBAAkB,CAAC;IAC5B,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,IAA0B;QACrC,OAAO,IAAI,oBAAoB,CAC7B,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,KAAK,CACX,CAAC;IACJ,CAAC;IAED,YACE,OAAe,EACf,KAAa,EACb,IAAgD,EAChD,GAAa;QAEb,KAAK,CAAC,GAAG,CAAC,CAAC;QACX,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC;QACzB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACrB,CAAC;IAED,SAAS;QACP,OAAO,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;IACxC,CAAC;IAED,SAAS;QACP,OAAO,KAAK,CAAC;IACf,CAAC;IAED,SAAS;QACP,MAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAC/C,OAAO,CAAC,YAAY,CAAC,gCAAgC,EAAE,MAAM,CAAC,CAAC;QAC/D,OAAO,CAAC,YAAY,CAClB,wCAAwC,EACxC,IAAI,CAAC,SAAS,CACf,CAAC;QACF,OAAO,CAAC,YAAY,CAAC,sCAAsC,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAC3E,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAChB,OAAO,CAAC,YAAY,CAClB,qCAAqC,EACrC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAC5B,CAAC;QACJ,CAAC;QACD,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QAC5C,OAAO,EAAE,OAAO,EAAE,CAAC;IACrB,CAAC;IAED,MAAM,CAAC,SAAS;QACd,OAAO;YACL,IAAI,EAAE,CAAC,OAAoB,EAAE,EAAE;gBAC7B,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,gCAAgC,CAAC,EAAE,CAAC;oBAC5D,OAAO,IAAI,CAAC;gBACd,CAAC;gBACD,OAAO;oBACL,UAAU,EAAE,cAAc;oBAC1B,QAAQ,EAAE,CAAC;iBACZ,CAAC;YACJ,CAAC;SACF,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,UAAU,CACf,cAA8C;QAE9C,OAAO,2BAA2B,CAChC,cAAc,CAAC,OAAO,EACtB,cAAc,CAAC,KAAK,EACpB,cAAc,CAAC,IAAI,CACpB,CAAC;IACJ,CAAC;IAED,UAAU;QACR,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;QACzB,qCACE,OAAO,EAAE,IAAI,CAAC,SAAS,EACvB,KAAK,EAAE,IAAI,CAAC,OAAO,IAChB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,KACzB,IAAI,EAAE,kBAAkB,EACxB,OAAO,EAAE,CAAC,IACV;IACJ,CAAC;IAED,cAAc;QACZ,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;QAC9B,OAAO,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC;IACvC,CAAC;IAED,UAAU;QACR,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;QAC9B,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,QAAQ;QACN,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;QAC9B,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,QAAQ,CAAC,KAAa;QACpB,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAChC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;IACvB,CAAC;IAED,OAAO;QACL,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;QAC9B,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED,OAAO,CAAC,IAAgD;QACtD,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAChC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACrB,CAAC;IAED,SAAS;QACP,OAAO,IAAI,CAAC;IACd,CAAC;IAED,QAAQ,CAAC,OAAsB,EAAE,MAAoB;QACnD,MAAM,EAAE,SAAS,EAAE,gBAAgB,EAAE,UAAU,EAAE,GAC/C,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;QACtC,OAAO,CACL,CAAC,gBAAgB,CACf,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CACvB,OAAO,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAC3B,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CACvB,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CACrB,SAAS,CAAC,CAAC,SAAS,CAAC,CACrB,gBAAgB,CAAC,CAAC,gBAAgB,CAAC,CACnC,UAAU,CAAC,CAAC,UAAU,CAAC,CACvB,SAAS,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,EAC5B,CACH,CAAC;IACJ,CAAC;IAED,sBAAsB,CAAC,MAAoB;;QACzC,mEAAmE;QACnE,MAAM,KAAK,GAA2B,MAAA,MAAM,CAAC,KAAK,CAAC,iBAAiB,mCAAI,EAAE,CAAC;QAC3E,MAAM,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,EAAE,CAC1D,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CACzC,CAAC;QACF,MAAM,GAAG,GAAG,MAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAG,CAAC,CAAC,mCAAI,EAAE,CAAC;QAClC,MAAM,KAAK,GAAG,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAG,CAAC,CAAC,CAAC;QAC9B,MAAM,SAAS,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC;QAChE,MAAM,gBAAgB,GACpB,SAAS,IAAI,OAAO,KAAK,CAAC,GAAG,GAAG,SAAS,CAAC,KAAK,QAAQ;YACrD,CAAC,CAAE,KAAK,CAAC,GAAG,GAAG,SAAS,CAAY;YACpC,CAAC,CAAC,SAAS,CAAC;QAChB,MAAM,UAAU,GACd,UAAU,IAAI,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC;QAC9D,OAAO;YACL,SAAS;YACT,gBAAgB;YAChB,UAAU;SACX,CAAC;IACJ,CAAC;CACF;AAED,MAAM,UAAU,2BAA2B,CACzC,OAAe,EACf,KAAa,EACb,IAAgD;IAEhD,MAAM,WAAW,GAAG,IAAI,oBAAoB,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IACnE,OAAO,qBAAqB,CAAC,WAAW,CAAC,CAAC;AAC5C,CAAC;AAED,MAAM,UAAU,uBAAuB,CACrC,IAAoC;IAEpC,OAAO,IAAI,YAAY,oBAAoB,CAAC;AAC9C,CAAC","sourcesContent":["import {\n  $applyNodeReplacement,\n  DOMConversionMap,\n  DOMExportOutput,\n  DecoratorNode,\n  LexicalEditor,\n  SerializedLexicalNode,\n  Spread,\n  type DOMConversionOutput,\n  type EditorConfig,\n  type LexicalNode,\n  type NodeKey,\n} from \"lexical\";\nimport React, { ElementType } from \"react\";\nimport {\n  BeautifulMentionComponentProps,\n  BeautifulMentionsItemData,\n} from \"./BeautifulMentionsPluginProps\";\nimport MentionComponent from \"./MentionComponent\";\nimport { BeautifulMentionsTheme } from \"./theme\";\n\nexport type SerializedBeautifulMentionNode = Spread<\n  {\n    trigger: string;\n    value: string;\n    data?: Record<string, BeautifulMentionsItemData>;\n  },\n  SerializedLexicalNode\n>;\n\nfunction convertElement(domNode: HTMLElement): DOMConversionOutput | null {\n  const trigger = domNode.getAttribute(\n    \"data-lexical-beautiful-mention-trigger\",\n  );\n  const value = domNode.getAttribute(\"data-lexical-beautiful-mention-value\");\n  let data: Record<string, BeautifulMentionsItemData> | undefined = undefined;\n  const dataStr = domNode.getAttribute(\"data-lexical-beautiful-mention-data\");\n  if (dataStr) {\n    try {\n      data = JSON.parse(dataStr) as Record<string, BeautifulMentionsItemData>;\n    } catch (e) {\n      console.warn(\n        \"Failed to parse data attribute of beautiful mention node\",\n        e,\n      );\n    }\n  }\n  if (trigger != null && value !== null) {\n    const node = $createBeautifulMentionNode(trigger, value, data);\n    return { node };\n  }\n  return null;\n}\n\n/**\n * This node is used to represent a mention used in the BeautifulMentionPlugin.\n */\nexport class BeautifulMentionNode extends DecoratorNode<React.JSX.Element> {\n  __trigger: string;\n  __value: string;\n  __data?: Record<string, BeautifulMentionsItemData>;\n\n  static getType(): string {\n    return \"beautifulMention\";\n  }\n\n  static clone(node: BeautifulMentionNode): BeautifulMentionNode {\n    return new BeautifulMentionNode(\n      node.__trigger,\n      node.__value,\n      node.__data,\n      node.__key,\n    );\n  }\n\n  constructor(\n    trigger: string,\n    value: string,\n    data?: Record<string, BeautifulMentionsItemData>,\n    key?: NodeKey,\n  ) {\n    super(key);\n    this.__trigger = trigger;\n    this.__value = value;\n    this.__data = data;\n  }\n\n  createDOM(): HTMLElement {\n    return document.createElement(\"span\");\n  }\n\n  updateDOM(): boolean {\n    return false;\n  }\n\n  exportDOM(): DOMExportOutput {\n    const element = document.createElement(\"span\");\n    element.setAttribute(\"data-lexical-beautiful-mention\", \"true\");\n    element.setAttribute(\n      \"data-lexical-beautiful-mention-trigger\",\n      this.__trigger,\n    );\n    element.setAttribute(\"data-lexical-beautiful-mention-value\", this.__value);\n    if (this.__data) {\n      element.setAttribute(\n        \"data-lexical-beautiful-mention-data\",\n        JSON.stringify(this.__data),\n      );\n    }\n    element.textContent = this.getTextContent();\n    return { element };\n  }\n\n  static importDOM(): DOMConversionMap | null {\n    return {\n      span: (domNode: HTMLElement) => {\n        if (!domNode.hasAttribute(\"data-lexical-beautiful-mention\")) {\n          return null;\n        }\n        return {\n          conversion: convertElement,\n          priority: 1,\n        };\n      },\n    };\n  }\n\n  static importJSON(\n    serializedNode: SerializedBeautifulMentionNode,\n  ): BeautifulMentionNode {\n    return $createBeautifulMentionNode(\n      serializedNode.trigger,\n      serializedNode.value,\n      serializedNode.data,\n    );\n  }\n\n  exportJSON(): SerializedBeautifulMentionNode {\n    const data = this.__data;\n    return {\n      trigger: this.__trigger,\n      value: this.__value,\n      ...(data ? { data } : {}),\n      type: \"beautifulMention\",\n      version: 1,\n    };\n  }\n\n  getTextContent(): string {\n    const self = this.getLatest();\n    return self.__trigger + self.__value;\n  }\n\n  getTrigger(): string {\n    const self = this.getLatest();\n    return self.__trigger;\n  }\n\n  getValue(): string {\n    const self = this.getLatest();\n    return self.__value;\n  }\n\n  setValue(value: string) {\n    const self = this.getWritable();\n    self.__value = value;\n  }\n\n  getData(): Record<string, BeautifulMentionsItemData> | undefined {\n    const self = this.getLatest();\n    return self.__data;\n  }\n\n  setData(data?: Record<string, BeautifulMentionsItemData>) {\n    const self = this.getWritable();\n    self.__data = data;\n  }\n\n  component(): ElementType<BeautifulMentionComponentProps> | null {\n    return null;\n  }\n\n  decorate(_editor: LexicalEditor, config: EditorConfig): React.JSX.Element {\n    const { className, classNameFocused, classNames } =\n      this.getCssClassesFromTheme(config);\n    return (\n      <MentionComponent\n        nodeKey={this.getKey()}\n        trigger={this.getTrigger()}\n        value={this.getValue()}\n        data={this.getData()}\n        className={className}\n        classNameFocused={classNameFocused}\n        classNames={classNames}\n        component={this.component()}\n      />\n    );\n  }\n\n  getCssClassesFromTheme(config: EditorConfig) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const theme: BeautifulMentionsTheme = config.theme.beautifulMentions ?? {};\n    const themeEntry = Object.entries(theme).find(([trigger]) =>\n      new RegExp(trigger).test(this.__trigger),\n    );\n    const key = themeEntry?.[0] ?? \"\";\n    const value = themeEntry?.[1];\n    const className = typeof value === \"string\" ? value : undefined;\n    const classNameFocused =\n      className && typeof theme[key + \"Focused\"] === \"string\"\n        ? (theme[key + \"Focused\"] as string)\n        : undefined;\n    const classNames =\n      themeEntry && typeof value !== \"string\" ? value : undefined;\n    return {\n      className,\n      classNameFocused,\n      classNames,\n    };\n  }\n}\n\nexport function $createBeautifulMentionNode(\n  trigger: string,\n  value: string,\n  data?: Record<string, BeautifulMentionsItemData>,\n): BeautifulMentionNode {\n  const mentionNode = new BeautifulMentionNode(trigger, value, data);\n  return $applyNodeReplacement(mentionNode);\n}\n\nexport function $isBeautifulMentionNode(\n  node: LexicalNode | null | undefined,\n): node is BeautifulMentionNode {\n  return node instanceof BeautifulMentionNode;\n}\n"]}