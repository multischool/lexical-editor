{"version":3,"file":"shared-autocomplete-context.jsx","sourceRoot":"","sources":["shared-autocomplete-context.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAA;AAC9B,OAAO,EAEL,aAAa,EACb,UAAU,EACV,SAAS,EACT,OAAO,EACP,QAAQ,GACT,MAAM,OAAO,CAAA;AASd,MAAM,OAAO,GAAgC,aAAa,CAAC;IACzD,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE;QACZ,OAAM;IACR,CAAC;IACD,CAAC,cAA0B,EAAE,EAAE;QAC7B,OAAM;IACR,CAAC;CACF,CAAC,CAAA;AAEF,MAAM,UAAU,yBAAyB,CAAC,EACxC,QAAQ,GAGT;IACC,MAAM,OAAO,GAAiB,OAAO,CAAC,GAAG,EAAE;QACzC,IAAI,UAAU,GAAsB,IAAI,CAAA;QACxC,MAAM,SAAS,GAAoB,IAAI,GAAG,EAAE,CAAA;QAC5C,OAAO;YACL,CAAC,EAAuC,EAAE,EAAE;gBAC1C,EAAE,CAAC,UAAU,CAAC,CAAA;gBACd,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;gBACjB,OAAO,GAAG,EAAE;oBACV,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;gBACtB,CAAC,CAAA;YACH,CAAC;YACD,CAAC,aAAyB,EAAE,EAAE;gBAC5B,UAAU,GAAG,aAAa,CAAA;gBAC1B,KAAK,MAAM,QAAQ,IAAI,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;oBAC7C,QAAQ,CAAC,aAAa,CAAC,CAAA;gBACzB,CAAC;YACH,CAAC;SACF,CAAA;IACH,CAAC,EAAE,EAAE,CAAC,CAAA;IACN,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAA;AACxE,CAAC;AAED,MAAM,CAAC,MAAM,4BAA4B,GAAG,GAAc,EAAE;IAC1D,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,GAAiB,UAAU,CAAC,OAAO,CAAC,CAAA;IAC9D,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,QAAQ,CAAa,IAAI,CAAC,CAAA;IAC9D,SAAS,CAAC,GAAG,EAAE;QACb,OAAO,SAAS,CAAC,CAAC,aAAyB,EAAE,EAAE;YAC7C,aAAa,CAAC,aAAa,CAAC,CAAA;QAC9B,CAAC,CAAC,CAAA;IACJ,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAA;IACf,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,CAAA;AAC9B,CAAC,CAAA","sourcesContent":["import * as React from 'react'\nimport {\n  ReactNode,\n  createContext,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\n\ntype Suggestion = null | string\ntype CallbackFn = (newSuggestion: Suggestion) => void\ntype SubscribeFn = (callbackFn: CallbackFn) => () => void\ntype PublishFn = (newSuggestion: Suggestion) => void\ntype ContextShape = [SubscribeFn, PublishFn]\ntype HookShape = [suggestion: Suggestion, setSuggestion: PublishFn]\n\nconst Context: React.Context<ContextShape> = createContext([\n  (_cb) => () => {\n    return\n  },\n  (_newSuggestion: Suggestion) => {\n    return\n  },\n])\n\nexport function SharedAutocompleteContext({\n  children,\n}: {\n  children: ReactNode\n}) {\n  const context: ContextShape = useMemo(() => {\n    let suggestion: Suggestion | null = null\n    const listeners: Set<CallbackFn> = new Set()\n    return [\n      (cb: (newSuggestion: Suggestion) => void) => {\n        cb(suggestion)\n        listeners.add(cb)\n        return () => {\n          listeners.delete(cb)\n        }\n      },\n      (newSuggestion: Suggestion) => {\n        suggestion = newSuggestion\n        for (const listener of Array.from(listeners)) {\n          listener(newSuggestion)\n        }\n      },\n    ]\n  }, [])\n  return <Context.Provider value={context}>{children}</Context.Provider>\n}\n\nexport const useSharedAutocompleteContext = (): HookShape => {\n  const [subscribe, publish]: ContextShape = useContext(Context)\n  const [suggestion, setSuggestion] = useState<Suggestion>(null)\n  useEffect(() => {\n    return subscribe((newSuggestion: Suggestion) => {\n      setSuggestion(newSuggestion)\n    })\n  }, [subscribe])\n  return [suggestion, publish]\n}\n"]}