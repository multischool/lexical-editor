{"version":3,"file":"collapsible-title-node.js","sourceRoot":"","sources":["collapsible-title-node.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  $createParagraphNode,\n  $isElementNode,\n  DOMConversionMap,\n  DOMConversionOutput,\n  EditorConfig,\n  ElementNode,\n  LexicalEditor,\n  LexicalNode,\n  RangeSelection,\n  SerializedElementNode,\n} from 'lexical'\n\nimport { IS_CHROME } from '../shared/environment'\nimport { invariant } from '../shared/invariant'\nimport { $isCollapsibleContainerNode } from '../nodes/collapsible-container-node'\nimport { $isCollapsibleContentNode } from '../nodes/collapsible-content-node'\n\ntype SerializedCollapsibleTitleNode = SerializedElementNode\n\nexport function $convertSummaryElement(\n  domNode: HTMLElement\n): DOMConversionOutput | null {\n  const node = $createCollapsibleTitleNode()\n  return {\n    node,\n  }\n}\n\nexport class CollapsibleTitleNode extends ElementNode {\n  static getType(): string {\n    return 'collapsible-title'\n  }\n\n  static clone(node: CollapsibleTitleNode): CollapsibleTitleNode {\n    return new CollapsibleTitleNode(node.__key)\n  }\n\n  createDOM(config: EditorConfig, editor: LexicalEditor): HTMLElement {\n    const dom = document.createElement('summary')\n    dom.classList.add('Collapsible__title')\n    if (IS_CHROME) {\n      dom.addEventListener('click', () => {\n        editor.update(() => {\n          const collapsibleContainer = this.getLatest().getParentOrThrow()\n          invariant(\n            $isCollapsibleContainerNode(collapsibleContainer),\n            'Expected parent node to be a CollapsibleContainerNode'\n          )\n          collapsibleContainer.toggleOpen()\n        })\n      })\n    }\n    return dom\n  }\n\n  updateDOM(prevNode: CollapsibleTitleNode, dom: HTMLElement): boolean {\n    return false\n  }\n\n  static importDOM(): DOMConversionMap | null {\n    return {\n      summary: (domNode: HTMLElement) => {\n        return {\n          conversion: $convertSummaryElement,\n          priority: 1,\n        }\n      },\n    }\n  }\n\n  static importJSON(\n    serializedNode: SerializedCollapsibleTitleNode\n  ): CollapsibleTitleNode {\n    return $createCollapsibleTitleNode()\n  }\n\n  exportJSON(): SerializedCollapsibleTitleNode {\n    return {\n      ...super.exportJSON(),\n      type: 'collapsible-title',\n      version: 1,\n    }\n  }\n\n  collapseAtStart(_selection: RangeSelection): boolean {\n    this.getParentOrThrow().insertBefore(this)\n    return true\n  }\n\n  static transform(): (node: LexicalNode) => void {\n    return (node: LexicalNode) => {\n      invariant(\n        $isCollapsibleTitleNode(node),\n        'node is not a CollapsibleTitleNode'\n      )\n      if (node.isEmpty()) {\n        node.remove()\n      }\n    }\n  }\n\n  insertNewAfter(_: RangeSelection, restoreSelection = true): ElementNode {\n    const containerNode = this.getParentOrThrow()\n\n    if (!$isCollapsibleContainerNode(containerNode)) {\n      throw new Error(\n        'CollapsibleTitleNode expects to be child of CollapsibleContainerNode'\n      )\n    }\n\n    if (containerNode.getOpen()) {\n      const contentNode = this.getNextSibling()\n      if (!$isCollapsibleContentNode(contentNode)) {\n        throw new Error(\n          'CollapsibleTitleNode expects to have CollapsibleContentNode sibling'\n        )\n      }\n\n      const firstChild = contentNode.getFirstChild()\n      if ($isElementNode(firstChild)) {\n        return firstChild\n      } else {\n        const paragraph = $createParagraphNode()\n        contentNode.append(paragraph)\n        return paragraph\n      }\n    } else {\n      const paragraph = $createParagraphNode()\n      containerNode.insertAfter(paragraph, restoreSelection)\n      return paragraph\n    }\n  }\n}\n\nexport function $createCollapsibleTitleNode(): CollapsibleTitleNode {\n  return new CollapsibleTitleNode()\n}\n\nexport function $isCollapsibleTitleNode(\n  node: LexicalNode | null | undefined\n): node is CollapsibleTitleNode {\n  return node instanceof CollapsibleTitleNode\n}\n"]}