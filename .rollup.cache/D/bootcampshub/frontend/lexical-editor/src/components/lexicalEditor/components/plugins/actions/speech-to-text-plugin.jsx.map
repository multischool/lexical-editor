{"version":3,"file":"speech-to-text-plugin.jsx","sourceRoot":"","sources":["speech-to-text-plugin.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { useEffect, useRef, useState } from 'react';\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport type { LexicalCommand, LexicalEditor, RangeSelection } from 'lexical';\nimport {\n    $getSelection,\n    $isRangeSelection,\n    COMMAND_PRIORITY_EDITOR,\n    REDO_COMMAND,\n    UNDO_COMMAND,\n    createCommand,\n} from 'lexical';\nimport { MicIcon } from 'lucide-react';\n\nimport { Button } from '../../../ui/button';\nimport { Tooltip, TooltipContent, TooltipTrigger } from '../../../ui/tooltip';\n\nimport { useReport } from '../../editor-hooks/use-report';\nimport { CAN_USE_DOM } from '../../shared/can-use-dom';\n\nexport const SPEECH_TO_TEXT_COMMAND: LexicalCommand<boolean> = createCommand(\n    'SPEECH_TO_TEXT_COMMAND',\n);\n\nconst VOICE_COMMANDS: Readonly<\n    Record<\n        string,\n        (arg0: { editor: LexicalEditor; selection: RangeSelection }) => void\n    >\n> = {\n    '\\n': ({ selection }) => {\n        selection.insertParagraph();\n    },\n    redo: ({ editor }) => {\n        editor.dispatchCommand(REDO_COMMAND, undefined);\n    },\n    undo: ({ editor }) => {\n        editor.dispatchCommand(UNDO_COMMAND, undefined);\n    },\n};\n// Add type definitions for the Web Speech API\ndeclare global {\n    interface Window {\n        SpeechRecognition?: any;\n        webkitSpeechRecognition?: any;\n    }\n}\nexport const SUPPORT_SPEECH_RECOGNITION: boolean =\n    CAN_USE_DOM &&\n    ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window);\n\nfunction SpeechToTextPluginImpl() {\n    const [editor] = useLexicalComposerContext();\n    const [isEnabled, setIsEnabled] = useState<boolean>(false);\n    const [isSpeechToText, setIsSpeechToText] = useState<boolean>(false);\n    const SpeechRecognition =\n        CAN_USE_DOM &&\n        (window.SpeechRecognition || window.webkitSpeechRecognition);\n    const recognition = useRef<typeof SpeechRecognition | null>(null);\n    const report = useReport();\n\n    useEffect(() => {\n        if (isEnabled && recognition.current === null) {\n            recognition.current = new SpeechRecognition();\n            recognition.current.continuous = true;\n            recognition.current.interimResults = true;\n            recognition.current.addEventListener(\n                'result',\n                (event: typeof SpeechRecognition) => {\n                    const resultItem = event.results.item(event.resultIndex);\n                    const { transcript } = resultItem.item(0);\n                    report(transcript);\n\n                    if (!resultItem.isFinal) {\n                        return;\n                    }\n\n                    editor.update(() => {\n                        const selection = $getSelection();\n\n                        if ($isRangeSelection(selection)) {\n                            const command =\n                                VOICE_COMMANDS[transcript.toLowerCase().trim()];\n\n                            if (command) {\n                                command({\n                                    editor,\n                                    selection,\n                                });\n                            } else if (transcript.match(/\\s*\\n\\s*/)) {\n                                selection.insertParagraph();\n                            } else {\n                                selection.insertText(transcript);\n                            }\n                        }\n                    });\n                },\n            );\n        }\n\n        if (recognition.current) {\n            if (isEnabled) {\n                recognition.current.start();\n            } else {\n                recognition.current.stop();\n            }\n        }\n\n        return () => {\n            if (recognition.current !== null) {\n                recognition.current.stop();\n            }\n        };\n    }, [SpeechRecognition, editor, isEnabled, report]);\n    useEffect(() => {\n        return editor.registerCommand(\n            SPEECH_TO_TEXT_COMMAND,\n            (_isEnabled: boolean) => {\n                setIsEnabled(_isEnabled);\n                return true;\n            },\n            COMMAND_PRIORITY_EDITOR,\n        );\n    }, [editor]);\n\n    return (\n        <Tooltip>\n            <TooltipTrigger asChild>\n                <Button\n                    onClick={() => {\n                        editor.dispatchCommand(\n                            SPEECH_TO_TEXT_COMMAND,\n                            !isSpeechToText,\n                        );\n                        setIsSpeechToText(!isSpeechToText);\n                    }}\n                    variant={isSpeechToText ? 'secondary' : 'ghost'}\n                    title='Speech To Text'\n                    aria-label={`${isSpeechToText ? 'Enable' : 'Disable'} speech to text`}\n                    className='p-2'\n                    size={'sm'}\n                >\n                    <MicIcon className='size-4' />\n                </Button>\n            </TooltipTrigger>\n            <TooltipContent>Speech To Text</TooltipContent>\n        </Tooltip>\n    );\n}\n\nexport const SpeechToTextPlugin = SUPPORT_SPEECH_RECOGNITION\n    ? SpeechToTextPluginImpl\n    : () => null;\n"]}