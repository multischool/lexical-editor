{"version":3,"file":"block-format-toolbar-plugin.jsx","sourceRoot":"","sources":["block-format-toolbar-plugin.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAA;AAEZ,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAA;AACrD,OAAO,EAAE,cAAc,EAAE,MAAM,oBAAoB,CAAA;AACnD,OAAO,EAAE,mBAAmB,EAAE,qBAAqB,EAAE,MAAM,gBAAgB,CAAA;AAC3E,OAAO,EAAE,iBAAiB,EAAE,mBAAmB,EAAiB,MAAM,SAAS,CAAA;AAE/E,OAAO,EAAE,iBAAiB,EAAE,MAAM,+BAA+B,CAAA;AACjE,OAAO,EAAE,uBAAuB,EAAE,MAAM,uCAAuC,CAAA;AAC/E,OAAO,EACL,MAAM,EACN,aAAa,EACb,WAAW,EACX,aAAa,GACd,MAAM,oBAAoB,CAAA;AAE3B,OAAO,EAAE,oBAAoB,EAAE,MAAM,sDAAsD,CAAA;AAE3F,MAAM,UAAU,mBAAmB,CAAC,EAClC,QAAQ,GAGT;IACC,MAAM,EAAE,YAAY,EAAE,SAAS,EAAE,YAAY,EAAE,GAAG,iBAAiB,EAAE,CAAA;IAErE,SAAS,cAAc,CAAC,SAAwB;QAC9C,IAAI,iBAAiB,CAAC,SAAS,CAAC,EAAE,CAAC;YACjC,MAAM,UAAU,GAAG,SAAS,CAAC,MAAM,CAAC,OAAO,EAAE,CAAA;YAC7C,IAAI,OAAO,GACT,UAAU,CAAC,MAAM,EAAE,KAAK,MAAM;gBAC5B,CAAC,CAAC,UAAU;gBACZ,CAAC,CAAC,mBAAmB,CAAC,UAAU,EAAE,CAAC,CAAC,EAAE,EAAE;oBACtC,MAAM,MAAM,GAAG,CAAC,CAAC,SAAS,EAAE,CAAA;oBAC5B,OAAO,MAAM,KAAK,IAAI,IAAI,mBAAmB,CAAC,MAAM,CAAC,CAAA;gBACvD,CAAC,CAAC,CAAA;YAEN,IAAI,OAAO,KAAK,IAAI,EAAE,CAAC;gBACrB,OAAO,GAAG,UAAU,CAAC,yBAAyB,EAAE,CAAA;YAClD,CAAC;YAED,MAAM,UAAU,GAAG,OAAO,CAAC,MAAM,EAAE,CAAA;YACnC,MAAM,UAAU,GAAG,YAAY,CAAC,eAAe,CAAC,UAAU,CAAC,CAAA;YAE3D,IAAI,UAAU,KAAK,IAAI,EAAE,CAAC;gBACxB,qCAAqC;gBACrC,IAAI,WAAW,CAAC,OAAO,CAAC,EAAE,CAAC;oBACzB,MAAM,UAAU,GAAG,qBAAqB,CACtC,UAAU,EACV,QAAQ,CACT,CAAA;oBACD,MAAM,IAAI,GAAG,UAAU;wBACrB,CAAC,CAAC,UAAU,CAAC,WAAW,EAAE;wBAC1B,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,CAAA;oBACzB,YAAY,CAAC,IAAI,CAAC,CAAA;gBACpB,CAAC;qBAAM,CAAC;oBACN,MAAM,IAAI,GAAG,cAAc,CAAC,OAAO,CAAC;wBAClC,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE;wBAClB,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,CAAA;oBACrB,IAAI,IAAI,IAAI,oBAAoB,EAAE,CAAC;wBACjC,YAAY,CAAC,IAAyC,CAAC,CAAA;oBACzD,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;IAED,uBAAuB,CAAC,cAAc,CAAC,CAAA;IAEvC,OAAO,CACL,CAAC,MAAM,CACL,KAAK,CAAC,CAAC,SAAS,CAAC,CACjB,aAAa,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE;YACvB,YAAY,CAAC,KAA0C,CAAC,CAAA;QAC1D,CAAC,CAAC,CAEF;MAAA,CAAC,aAAa,CAAC,SAAS,CAAC,iBAAiB,CACxC;QAAA,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC,IAAI,CACrC;QAAA,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,EAAE,IAAI,CACrD;MAAA,EAAE,aAAa,CACf;MAAA,CAAC,aAAa,CACZ;QAAA,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,EAAE,WAAW,CACtC;MAAA,EAAE,aAAa,CACjB;IAAA,EAAE,MAAM,CAAC,CACV,CAAA;AACH,CAAC","sourcesContent":["\"use client\"\n\nimport { $isListNode, ListNode } from '@lexical/list'\nimport { $isHeadingNode } from '@lexical/rich-text'\nimport { $findMatchingParent, $getNearestNodeOfType } from '@lexical/utils'\nimport { $isRangeSelection, $isRootOrShadowRoot, BaseSelection } from 'lexical'\n\nimport { useToolbarContext } from '../../context/toolbar-context'\nimport { useUpdateToolbarHandler } from '../../editor-hooks/use-update-toolbar'\nimport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectTrigger,\n} from '../../../ui/select'\n\nimport { blockTypeToBlockName } from '../../plugins/toolbar/block-format/block-format-data'\n\nexport function BlockFormatDropDown({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const { activeEditor, blockType, setBlockType } = useToolbarContext()\n\n  function $updateToolbar(selection: BaseSelection) {\n    if ($isRangeSelection(selection)) {\n      const anchorNode = selection.anchor.getNode()\n      let element =\n        anchorNode.getKey() === 'root'\n          ? anchorNode\n          : $findMatchingParent(anchorNode, (e) => {\n            const parent = e.getParent()\n            return parent !== null && $isRootOrShadowRoot(parent)\n          })\n\n      if (element === null) {\n        element = anchorNode.getTopLevelElementOrThrow()\n      }\n\n      const elementKey = element.getKey()\n      const elementDOM = activeEditor.getElementByKey(elementKey)\n\n      if (elementDOM !== null) {\n        // setSelectedElementKey(elementKey);\n        if ($isListNode(element)) {\n          const parentList = $getNearestNodeOfType<ListNode>(\n            anchorNode,\n            ListNode\n          )\n          const type = parentList\n            ? parentList.getListType()\n            : element.getListType()\n          setBlockType(type)\n        } else {\n          const type = $isHeadingNode(element)\n            ? element.getTag()\n            : element.getType()\n          if (type in blockTypeToBlockName) {\n            setBlockType(type as keyof typeof blockTypeToBlockName)\n          }\n        }\n      }\n    }\n  }\n\n  useUpdateToolbarHandler($updateToolbar)\n\n  return (\n    <Select\n      value={blockType}\n      onValueChange={(value) => {\n        setBlockType(value as keyof typeof blockTypeToBlockName)\n      }}\n    >\n      <SelectTrigger className=\"h-8 w-min gap-1\">\n        {blockTypeToBlockName[blockType].icon}\n        <span>{blockTypeToBlockName[blockType].label}</span>\n      </SelectTrigger>\n      <SelectContent>\n        <SelectGroup>{children}</SelectGroup>\n      </SelectContent>\n    </Select>\n  )\n}\n"]}