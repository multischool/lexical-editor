{"version":3,"file":"ZeroWidthNode.js","sourceRoot":"","sources":["ZeroWidthNode.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,qBAAqB,EAKrB,QAAQ,GAIT,MAAM,SAAS,CAAC;AACjB,OAAO,EAAE,oBAAoB,EAAE,MAAM,mBAAmB,CAAC;AAIzD,SAAS,uBAAuB,CAC9B,OAAoB;IAEpB,OAAO,IAAI,CAAC;AACd,CAAC;AAED;;GAEG;AACH,qDAAqD;AACrD,oDAAoD;AACpD,MAAM,OAAO,aAAc,SAAQ,QAAQ;IACzC,MAAM,CAAC,OAAO;QACZ,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,IAAmB;QAC9B,OAAO,IAAI,aAAa,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC3D,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,CAA0B;QAC1C,OAAO,oBAAoB,EAAE,CAAC;IAChC,CAAC;IAED,YACU,aAAqB,EAC7B,GAAa;QAEb,KAAK,CAAC,oBAAoB,EAAE,GAAG,CAAC,CAAC;QAHzB,kBAAa,GAAb,aAAa,CAAQ;IAI/B,CAAC;IAED,UAAU;QACR,uCACK,KAAK,CAAC,UAAU,EAAE,KACrB,IAAI,EAAE,EAAE,EACR,IAAI,EAAE,WAAW,IACjB;IACJ,CAAC;IAED,SAAS;QACP,OAAO,KAAK,CAAC;IACf,CAAC;IAED,MAAM,CAAC,SAAS;QACd,OAAO,IAAI,CAAC;IACd,CAAC;IAED,SAAS,CAAC,MAAqB;QAC7B,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IAC3B,CAAC;IAED,YAAY;QACV,OAAO,IAAI,CAAC;IACd,CAAC;IAED,cAAc;QACZ,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;CACF;AAED,MAAM,UAAU,oBAAoB,CAAC,WAAW,GAAG,EAAE;IACnD,MAAM,aAAa,GAAG,IAAI,aAAa,CAAC,WAAW,CAAC,CAAC;IAErD,sEAAsE;IACtE,4BAA4B;IAC5B,aAAa,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IAEnC,OAAO,qBAAqB,CAAC,aAAa,CAAC,CAAC;AAC9C,CAAC;AAED,MAAM,UAAU,gBAAgB,CAC9B,IAAoC;IAEpC,OAAO,IAAI,YAAY,aAAa,CAAC;AACvC,CAAC","sourcesContent":["import {\n  $applyNodeReplacement,\n  DOMConversionMap,\n  DOMConversionOutput,\n  DOMExportOutput,\n  LexicalEditor,\n  TextNode,\n  type LexicalNode,\n  type NodeKey,\n  type SerializedTextNode,\n} from \"lexical\";\nimport { ZERO_WIDTH_CHARACTER } from \"./ZeroWidthPlugin\";\n\nexport type SerializedZeroWidthNode = SerializedTextNode;\n\nfunction convertZeroWidthElement(\n  domNode: HTMLElement,\n): DOMConversionOutput | null {\n  return null;\n}\n\n/**\n * @deprecated Use `PlaceholderNode` instead. This Node will be removed in a future version.\n */\n/* eslint @typescript-eslint/no-unused-vars: \"off\" */\n/* eslint @typescript-eslint/no-deprecated: \"off\" */\nexport class ZeroWidthNode extends TextNode {\n  static getType(): string {\n    return \"zeroWidth\";\n  }\n\n  static clone(node: ZeroWidthNode): ZeroWidthNode {\n    return new ZeroWidthNode(node.__textContent, node.__key);\n  }\n\n  static importJSON(_: SerializedZeroWidthNode): ZeroWidthNode {\n    return $createZeroWidthNode();\n  }\n\n  constructor(\n    private __textContent: string,\n    key?: NodeKey,\n  ) {\n    super(ZERO_WIDTH_CHARACTER, key);\n  }\n\n  exportJSON(): SerializedZeroWidthNode {\n    return {\n      ...super.exportJSON(),\n      text: \"\",\n      type: \"zeroWidth\",\n    };\n  }\n\n  updateDOM(): boolean {\n    return false;\n  }\n\n  static importDOM(): DOMConversionMap | null {\n    return null;\n  }\n\n  exportDOM(editor: LexicalEditor): DOMExportOutput {\n    return { element: null };\n  }\n\n  isTextEntity(): boolean {\n    return true;\n  }\n\n  getTextContent(): string {\n    return this.__textContent;\n  }\n}\n\nexport function $createZeroWidthNode(textContent = \"\"): ZeroWidthNode {\n  const zeroWidthNode = new ZeroWidthNode(textContent);\n\n  // Prevents that a space that is inserted by the user is deleted again\n  // directly after the input.\n  zeroWidthNode.setMode(\"segmented\");\n\n  return $applyNodeReplacement(zeroWidthNode);\n}\n\nexport function $isZeroWidthNode(\n  node: LexicalNode | null | undefined,\n): node is ZeroWidthNode {\n  return node instanceof ZeroWidthNode;\n}\n"]}