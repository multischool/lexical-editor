{"version":3,"file":"poll-plugin.jsx","sourceRoot":"","sources":["poll-plugin.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAA;AAEZ;;;;;;GAMG;AACH,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAO,MAAM,OAAO,CAAA;AAChD,OAAO,KAAK,KAAK,MAAM,OAAO,CAAA;AAE9B,OAAO,EAAE,yBAAyB,EAAE,MAAM,uCAAuC,CAAA;AACjF,OAAO,EAAE,kBAAkB,EAAE,MAAM,gBAAgB,CAAA;AACnD,OAAO,EACL,oBAAoB,EACpB,YAAY,EACZ,mBAAmB,EACnB,uBAAuB,EAGvB,aAAa,GACd,MAAM,SAAS,CAAA;AAEhB,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAA;AACxC,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAA;AAC9C,OAAO,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAA;AACtC,OAAO,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAA;AAEtC,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAA;AAEhF,MAAM,CAAC,MAAM,mBAAmB,GAA2B,aAAa,CACtE,qBAAqB,CACtB,CAAA;AAED,MAAM,UAAU,gBAAgB,CAAC,EAC/B,YAAY,EACZ,OAAO,GAIR;IACC,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAA;IAE5C,MAAM,OAAO,GAAG,GAAG,EAAE;QACnB,YAAY,CAAC,eAAe,CAAC,mBAAmB,EAAE,QAAQ,CAAC,CAAA;QAC3D,OAAO,EAAE,CAAA;IACX,CAAC,CAAA;IAED,OAAO,CACL,EACE;MAAA,CAAC,GAAG,CACF;QAAA,CAAC,KAAK,CAAC,QAAQ,EAAE,KAAK,CACtB;QAAA,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,EACvE;MAAA,EAAE,GAAG,CACL;MAAA,CAAC,YAAY,CACX;QAAA,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CACzD;;QACF,EAAE,MAAM,CACV;MAAA,EAAE,YAAY,CAChB;IAAA,GAAG,CACJ,CAAA;AACH,CAAC;AAED,MAAM,UAAU,UAAU;IACxB,MAAM,CAAC,MAAM,CAAC,GAAG,yBAAyB,EAAE,CAAA;IAC5C,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC;YACjC,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAA;QAClE,CAAC;QAED,OAAO,MAAM,CAAC,eAAe,CAC3B,mBAAmB,EACnB,CAAC,OAAO,EAAE,EAAE;YACV,MAAM,QAAQ,GAAG,eAAe,CAAC,OAAO,EAAE;gBACxC,gBAAgB,EAAE;gBAClB,gBAAgB,EAAE;aACnB,CAAC,CAAA;YACF,YAAY,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAA;YACxB,IAAI,mBAAmB,CAAC,QAAQ,CAAC,gBAAgB,EAAE,CAAC,EAAE,CAAC;gBACrD,kBAAkB,CAAC,QAAQ,EAAE,oBAAoB,CAAC,CAAC,SAAS,EAAE,CAAA;YAChE,CAAC;YAED,OAAO,IAAI,CAAA;QACb,CAAC,EACD,uBAAuB,CACxB,CAAA;IACH,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAA;IACZ,OAAO,IAAI,CAAA;AACb,CAAC","sourcesContent":["'use client'\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { useEffect, useState, JSX } from 'react'\nimport * as React from 'react'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport { $wrapNodeInElement } from '@lexical/utils'\nimport {\n  $createParagraphNode,\n  $insertNodes,\n  $isRootOrShadowRoot,\n  COMMAND_PRIORITY_EDITOR,\n  LexicalCommand,\n  LexicalEditor,\n  createCommand,\n} from 'lexical'\n\nimport { Button } from '../../ui/button'\nimport { DialogFooter } from '../../ui/dialog'\nimport { Input } from '../../ui/input'\nimport { Label } from '../../ui/label'\n\nimport { $createPollNode, PollNode, createPollOption } from '../nodes/poll-node'\n\nexport const INSERT_POLL_COMMAND: LexicalCommand<string> = createCommand(\n  'INSERT_POLL_COMMAND'\n)\n\nexport function InsertPollDialog({\n  activeEditor,\n  onClose,\n}: {\n  activeEditor: LexicalEditor\n  onClose: () => void\n}): JSX.Element {\n  const [question, setQuestion] = useState('')\n\n  const onClick = () => {\n    activeEditor.dispatchCommand(INSERT_POLL_COMMAND, question)\n    onClose()\n  }\n\n  return (\n    <>\n      <div>\n        <Label>Question</Label>\n        <Input onChange={(e) => setQuestion(e.target.value)} value={question} />\n      </div>\n      <DialogFooter>\n        <Button disabled={question.trim() === ''} onClick={onClick}>\n          Confirm\n        </Button>\n      </DialogFooter>\n    </>\n  )\n}\n\nexport function PollPlugin(): JSX.Element | null {\n  const [editor] = useLexicalComposerContext()\n  useEffect(() => {\n    if (!editor.hasNodes([PollNode])) {\n      throw new Error('PollPlugin: PollNode not registered on editor')\n    }\n\n    return editor.registerCommand<string>(\n      INSERT_POLL_COMMAND,\n      (payload) => {\n        const pollNode = $createPollNode(payload, [\n          createPollOption(),\n          createPollOption(),\n        ])\n        $insertNodes([pollNode])\n        if ($isRootOrShadowRoot(pollNode.getParentOrThrow())) {\n          $wrapNodeInElement(pollNode, $createParagraphNode).selectEnd()\n        }\n\n        return true\n      },\n      COMMAND_PRIORITY_EDITOR\n    )\n  }, [editor])\n  return null\n}\n"]}