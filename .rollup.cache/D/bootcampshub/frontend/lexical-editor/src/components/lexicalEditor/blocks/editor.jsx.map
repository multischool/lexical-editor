{"version":3,"file":"editor.jsx","sourceRoot":"","sources":["editor.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAA;AAEZ,OAAO,EAEL,eAAe,GAChB,MAAM,gCAAgC,CAAA;AACvC,OAAO,EAAE,cAAc,EAAE,MAAM,sCAAsC,CAAA;AAGrE,OAAO,EAAE,mBAAmB,EAAE,MAAM,6CAA6C,CAAA;AACjF,OAAO,EAAE,yBAAyB,EAAE,MAAM,mDAAmD,CAAA;AAC7F,OAAO,EAAE,WAAW,EAAE,MAAM,mCAAmC,CAAA;AAC/D,OAAO,EAAE,eAAe,EAAE,MAAM,eAAe,CAAA;AAE/C,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAA;AAC/B,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAA;AA2FnC,MAAM,YAAY,GAAsB;IACtC,SAAS,EAAE,QAAQ;IACnB,KAAK,EAAE,WAAW;IAClB,KAAK;IACL,OAAO,EAAE,CAAC,KAAY,EAAE,EAAE;QACxB,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;IACtB,CAAC;CACF,CAAA;AAED,MAAM,UAAU,MAAM,CAAC,EACrB,WAAW,EACX,qBAAqB,EACrB,QAAQ,EACR,kBAAkB,EAClB,aAAa,GAAG,EAAE,EAAE,gDAAgD;AACpE,SAAS,GAAG,IAAI,EAChB,MAAM,GAAG,MAAM,EACf,eAAe,EACf,aAAa,EACb,cAAc,EACd,WAAW,EACX,eAAe,GAehB;IACC,OAAO,CACL,CAAC,GAAG,CACF,SAAS,CAAC,sEAAsE,CAChF,KAAK,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,CAElB;MAAA,CAAC,eAAe,CACd,aAAa,CAAC,CAAC,8CACV,YAAY,GACZ,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GACpC,CAAC,qBAAqB;YACvB,CAAC,CAAC,EAAE,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,qBAAqB,CAAC,EAAE;YACxD,CAAC,CAAC,EAAE,CAAC,EACP,CAEF;QAAA,CAAC,eAAe,CACd;UAAA,CAAC,yBAAyB,CACxB;YAAA,CAAC,mBAAmB,CAClB;cAAA,CAAC,GAAG,CAAC,SAAS,CAAC,sBAAsB,CACnC;gBAAA,CAAC,OAAO,CACN,SAAS,CAAC,CAAC,SAAS,CAAC,CACrB,aAAa,CAAC,CAAC,aAAa,CAAC,CAC7B,eAAe,CAAC,CAAC,eAAe,CAAC,CACjC,aAAa,CAAC,CAAC,aAAa,CAAC,CAC7B,cAAc,CAAC,CAAC,cAAc,CAAC,CAC/B,WAAW,CAAC,CAAC,WAAW,CAAC,CACzB,eAAe,CAAC,CAAC,eAAe,CAAC,EAErC;cAAA,EAAE,GAAG,CAEL;;cAAA,CAAC,cAAc,CACb,qBAAqB,CAAC,CAAC,IAAI,CAAC,CAC5B,QAAQ,CAAC,CAAC,CAAC,WAAW,EAAE,EAAE;YACxB,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAG,WAAW,CAAC,CAAA;YACvB,kBAAkB,aAAlB,kBAAkB,uBAAlB,kBAAkB,CAAG,WAAW,CAAC,MAAM,EAAE,CAAC,CAAA;QAC5C,CAAC,CAAC,EAEN;YAAA,EAAE,mBAAmB,CACvB;UAAA,EAAE,yBAAyB,CAC7B;QAAA,EAAE,eAAe,CACnB;MAAA,EAAE,eAAe,CACnB;IAAA,EAAE,GAAG,CAAC,CACP,CAAA;AACH,CAAC","sourcesContent":["'use client'\n\nimport {\n  InitialConfigType,\n  LexicalComposer,\n} from '@lexical/react/LexicalComposer'\nimport { OnChangePlugin } from '@lexical/react/LexicalOnChangePlugin'\nimport { EditorState, SerializedEditorState } from 'lexical'\n\nimport { FloatingLinkContext } from '../components/context/floating-link-context'\nimport { SharedAutocompleteContext } from '../components/context/shared-autocomplete-context'\nimport { editorTheme } from '../components/themes/editor-theme'\nimport { TooltipProvider } from '../ui/tooltip'\n\nimport { nodes } from './nodes'\nimport { Plugins } from './plugins'\n\n// In editor.ts or editor.tsx file\n\nexport interface PluginOptions {\n  // Main plugin options\n  history?: boolean;\n  autoFocus?: boolean;\n  richText?: boolean;\n  checkList?: boolean;\n  horizontalRule?: boolean;\n  table?: boolean;\n  list?: boolean;\n  tabIndentation?: boolean;\n  hashtag?: boolean;\n  mentions?: boolean;\n  draggableBlock?: boolean;\n  images?: boolean;\n  inlineImage?: boolean;\n  excalidraw?: boolean;\n  poll?: boolean;\n  equations?: boolean;\n  autoEmbed?: boolean;\n  figma?: boolean;\n  twitter?: boolean;\n  youtube?: boolean;\n  codeHighlight?: boolean;\n  markdownShortcut?: boolean;\n  autoLink?: boolean;\n  link?: boolean;\n  componentPicker?: boolean;\n  contextMenu?: boolean;\n  dragDropPaste?: boolean;\n  emojiPicker?: boolean;\n  floatingLinkEditor?: boolean;\n  floatingTextFormat?: boolean;\n  maxIndentLevel?: boolean;\n  beautifulMentions?: boolean;\n  showToolbar?: boolean;\n  showBottomBar?: boolean;\n  \n  // Toolbar-specific options\n  toolbar?: {\n    history?: boolean;\n    blockFormat?: boolean;\n    codeLanguage?: boolean;\n    fontFamily?: boolean;\n    fontSize?: boolean;\n    fontFormat?: {\n      bold?: boolean;\n      italic?: boolean;\n      underline?: boolean;\n      strikethrough?: boolean;\n    };\n    subSuper?: boolean;\n    link?: boolean;\n    clearFormatting?: boolean;\n    fontColor?: boolean;\n    fontBackground?: boolean;\n    elementFormat?: boolean;\n    blockInsert?: {\n      horizontalRule?: boolean;\n      pageBreak?: boolean;\n      image?: boolean;\n      inlineImage?: boolean;\n      collapsible?: boolean;\n      excalidraw?: boolean;\n      table?: boolean;\n      poll?: boolean;\n      columnsLayout?: boolean;\n      embeds?: boolean;\n    };\n    \n  };\n  \n  // Action bar specific options\n  actionBar?: {\n    maxLength?: boolean;\n    characterLimit?: boolean;\n    counter?: boolean;\n    speechToText?: boolean;\n    shareContent?: boolean;\n    markdownToggle?: boolean;\n    editModeToggle?: boolean;\n    clearEditor?: boolean;\n    treeView?: boolean;\n  };\n  \n  [key: string]: any; // To allow for future extensions\n}\n\nconst editorConfig: InitialConfigType = {\n  namespace: 'Editor',\n  theme: editorTheme,\n  nodes,\n  onError: (error: Error) => {\n    console.error(error)\n  },\n}\n\nexport function Editor({\n  editorState,\n  editorSerializedState,\n  onChange,\n  onSerializedChange,\n  pluginOptions = {}, // Add the pluginOptions prop with empty default\n  maxLength = 5000,\n  height = '70vh',\n  onMentionSearch,\n  onImageUpload,\n  onAIGeneration,\n  mentionMenu,\n  mentionMenuItem,\n}: {\n  editorState?: EditorState\n  editorSerializedState?: SerializedEditorState\n  onChange?: (editorState: EditorState) => void\n  onSerializedChange?: (editorSerializedState: SerializedEditorState) => void\n  pluginOptions?: PluginOptions\n  maxLength?: number\n  height?: string\n  showBottomBar?: boolean\n  onMentionSearch?: (trigger: string, query?: string | null) => Promise<any[]>\n  onImageUpload?: (file: File) => Promise<any | { url: string }>\n  onAIGeneration?: (prompt: string, transformType: string) => Promise<{ text: string, success: boolean, error?: string }>\n  mentionMenu?: React.FC<any>\n  mentionMenuItem?: React.FC<any>\n}) {\n  return (\n    <div \n      className=\"overflow-hidden rounded-lg border bg-background shadow flex flex-col\"\n      style={{ height }}\n    >\n      <LexicalComposer\n        initialConfig={{\n          ...editorConfig,\n          ...(editorState ? { editorState } : {}),\n          ...(editorSerializedState\n            ? { editorState: JSON.stringify(editorSerializedState) }\n            : {}),\n        }}\n      >\n        <TooltipProvider>\n          <SharedAutocompleteContext>\n            <FloatingLinkContext>\n              <div className=\"flex flex-col h-full\">\n                <Plugins\n                  maxLength={maxLength}\n                  pluginOptions={pluginOptions}\n                  onMentionSearch={onMentionSearch}\n                  onImageUpload={onImageUpload}\n                  onAIGeneration={onAIGeneration}\n                  mentionMenu={mentionMenu}\n                  mentionMenuItem={mentionMenuItem}\n                />\n              </div>\n\n              <OnChangePlugin\n                ignoreSelectionChange={true}\n                onChange={(editorState) => {\n                  onChange?.(editorState)\n                  onSerializedChange?.(editorState.toJSON())\n                }}\n              />\n            </FloatingLinkContext>\n          </SharedAutocompleteContext>\n        </TooltipProvider>\n      </LexicalComposer>\n    </div>\n  )\n}"]}