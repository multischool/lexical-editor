{"version":3,"file":"table-action-menu-plugin.jsx","sourceRoot":"","sources":["table-action-menu-plugin.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client'\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport * as React from 'react'\nimport { ReactPortal, useCallback, useEffect, useRef, useState, JSX } from 'react'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport { useLexicalEditable } from '@lexical/react/useLexicalEditable'\nimport {\n  $deleteTableColumn__EXPERIMENTAL,\n  $deleteTableRow__EXPERIMENTAL,\n  $getNodeTriplet,\n  $getTableCellNodeFromLexicalNode,\n  $getTableColumnIndexFromTableCellNode,\n  $getTableNodeFromLexicalNodeOrThrow,\n  $getTableRowIndexFromTableCellNode,\n  $insertTableColumn__EXPERIMENTAL,\n  $insertTableRow__EXPERIMENTAL,\n  $isTableCellNode,\n  $isTableRowNode,\n  $isTableSelection,\n  $unmergeCell,\n  HTMLTableElementWithWithTableSelectionState,\n  TableCellHeaderStates,\n  TableCellNode,\n  TableRowNode,\n  TableSelection,\n  getTableObserverFromTableElement,\n} from '@lexical/table'\nimport type { ElementNode, LexicalEditor } from 'lexical'\nimport {\n  $createParagraphNode,\n  $getRoot,\n  $getSelection,\n  $isElementNode,\n  $isParagraphNode,\n  $isRangeSelection,\n  $isTextNode,\n} from 'lexical'\nimport { ChevronDownIcon, PaintBucketIcon } from 'lucide-react'\nimport { createPortal } from 'react-dom'\n\nimport {\n  Command,\n  CommandGroup,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n} from '../../ui/command'\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '../../ui/popover'\n\nimport { useEditorModal } from '../editor-hooks/use-modal'\nimport ColorPicker from '../editor-ui/colorpicker'\n\nfunction computeSelectionCount(selection: TableSelection): {\n  columns: number\n  rows: number\n} {\n  const selectionShape = selection.getShape()\n  return {\n    columns: selectionShape.toX - selectionShape.fromX + 1,\n    rows: selectionShape.toY - selectionShape.fromY + 1,\n  }\n}\n\nfunction $canUnmerge(): boolean {\n  const selection = $getSelection()\n  if (\n    ($isRangeSelection(selection) && !selection.isCollapsed()) ||\n    ($isTableSelection(selection) && !selection.anchor.is(selection.focus)) ||\n    (!$isRangeSelection(selection) && !$isTableSelection(selection))\n  ) {\n    return false\n  }\n  const [cell] = $getNodeTriplet(selection.anchor)\n  return cell.__colSpan > 1 || cell.__rowSpan > 1\n}\n\nfunction $cellContainsEmptyParagraph(cell: TableCellNode): boolean {\n  if (cell.getChildrenSize() !== 1) {\n    return false\n  }\n  const firstChild = cell.getFirstChildOrThrow()\n  if (!$isParagraphNode(firstChild) || !firstChild.isEmpty()) {\n    return false\n  }\n  return true\n}\n\nfunction $selectLastDescendant(node: ElementNode): void {\n  const lastDescendant = node.getLastDescendant()\n  if ($isTextNode(lastDescendant)) {\n    lastDescendant.select()\n  } else if ($isElementNode(lastDescendant)) {\n    lastDescendant.selectEnd()\n  } else if (lastDescendant !== null) {\n    lastDescendant.selectNext()\n  }\n}\n\nfunction currentCellBackgroundColor(editor: LexicalEditor): null | string {\n  return editor.getEditorState().read(() => {\n    const selection = $getSelection()\n    if ($isRangeSelection(selection) || $isTableSelection(selection)) {\n      const [cell] = $getNodeTriplet(selection.anchor)\n      if ($isTableCellNode(cell)) {\n        return cell.getBackgroundColor()\n      }\n    }\n    return null\n  })\n}\n\ntype TableCellActionMenuProps = Readonly<{\n  contextRef: { current: null | HTMLElement }\n  onClose: () => void\n  setIsMenuOpen: (isOpen: boolean) => void\n  tableCellNode: TableCellNode\n  cellMerge: boolean\n}>\n\nfunction TableActionMenu({\n  onClose,\n  tableCellNode: _tableCellNode,\n  setIsMenuOpen,\n  contextRef,\n  cellMerge,\n}: TableCellActionMenuProps) {\n  const [editor] = useLexicalComposerContext()\n  const dropDownRef = useRef<HTMLDivElement | null>(null)\n  const [tableCellNode, updateTableCellNode] = useState(_tableCellNode)\n  const [selectionCounts, updateSelectionCounts] = useState({\n    columns: 1,\n    rows: 1,\n  })\n  const [modal, showModal] = useEditorModal()\n  const [canMergeCells, setCanMergeCells] = useState(false)\n  const [canUnmergeCell, setCanUnmergeCell] = useState(false)\n  const [backgroundColor, setBackgroundColor] = useState(\n    () => currentCellBackgroundColor(editor) || ''\n  )\n\n  useEffect(() => {\n    return editor.registerMutationListener(\n      TableCellNode,\n      (nodeMutations) => {\n        const nodeUpdated =\n          nodeMutations.get(tableCellNode.getKey()) === 'updated'\n\n        if (nodeUpdated) {\n          editor.getEditorState().read(() => {\n            updateTableCellNode(tableCellNode.getLatest())\n          })\n          setBackgroundColor(currentCellBackgroundColor(editor) || '')\n        }\n      },\n      { skipInitialization: true }\n    )\n  }, [editor, tableCellNode])\n\n  useEffect(() => {\n    editor.getEditorState().read(() => {\n      const selection = $getSelection()\n      // Merge cells\n      if ($isTableSelection(selection)) {\n        const currentSelectionCounts = computeSelectionCount(selection)\n        updateSelectionCounts(computeSelectionCount(selection))\n        setCanMergeCells(\n          currentSelectionCounts.columns > 1 || currentSelectionCounts.rows > 1\n        )\n      }\n      // Unmerge cell\n      setCanUnmergeCell($canUnmerge())\n    })\n  }, [editor])\n\n  useEffect(() => {\n    const menuButtonElement = contextRef.current\n    const dropDownElement = dropDownRef.current\n    const rootElement = editor.getRootElement()\n\n    if (\n      menuButtonElement != null &&\n      dropDownElement != null &&\n      rootElement != null\n    ) {\n      const rootEleRect = rootElement.getBoundingClientRect()\n      const menuButtonRect = menuButtonElement.getBoundingClientRect()\n      dropDownElement.style.opacity = '1'\n      const dropDownElementRect = dropDownElement.getBoundingClientRect()\n      const margin = 5\n      let leftPosition = menuButtonRect.right + margin\n      if (\n        leftPosition + dropDownElementRect.width > window.innerWidth ||\n        leftPosition + dropDownElementRect.width > rootEleRect.right\n      ) {\n        const position =\n          menuButtonRect.left - dropDownElementRect.width - margin\n        leftPosition = (position < 0 ? margin : position) + window.pageXOffset\n      }\n      dropDownElement.style.left = `${leftPosition + window.pageXOffset}px`\n\n      let topPosition = menuButtonRect.top\n      if (topPosition + dropDownElementRect.height > window.innerHeight) {\n        const position = menuButtonRect.bottom - dropDownElementRect.height\n        topPosition = (position < 0 ? margin : position) + window.pageYOffset\n      }\n      dropDownElement.style.top = `${topPosition + +window.pageYOffset}px`\n    }\n  }, [contextRef, dropDownRef, editor])\n\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (\n        dropDownRef.current != null &&\n        contextRef.current != null &&\n        !dropDownRef.current.contains(event.target as Node) &&\n        !contextRef.current.contains(event.target as Node)\n      ) {\n        setIsMenuOpen(false)\n      }\n    }\n\n    window.addEventListener('click', handleClickOutside)\n\n    return () => window.removeEventListener('click', handleClickOutside)\n  }, [setIsMenuOpen, contextRef])\n\n  const clearTableSelection = useCallback(() => {\n    editor.update(() => {\n      if (tableCellNode.isAttached()) {\n        const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableCellNode)\n        const tableElement = editor.getElementByKey(\n          tableNode.getKey()\n        ) as HTMLTableElementWithWithTableSelectionState\n\n        if (!tableElement) {\n          throw new Error('Expected to find tableElement in DOM')\n        }\n\n        const tableObserver = getTableObserverFromTableElement(tableElement)\n        if (tableObserver !== null) {\n          tableObserver.$clearHighlight()\n        }\n\n        tableNode.markDirty()\n        updateTableCellNode(tableCellNode.getLatest())\n      }\n\n      const rootNode = $getRoot()\n      rootNode.selectStart()\n    })\n  }, [editor, tableCellNode])\n\n  const mergeTableCellsAtSelection = () => {\n    editor.update(() => {\n      const selection = $getSelection()\n      if ($isTableSelection(selection)) {\n        const { columns, rows } = computeSelectionCount(selection)\n        const nodes = selection.getNodes()\n        let firstCell: null | TableCellNode = null\n        for (let i = 0; i < nodes.length; i++) {\n          const node = nodes[i]\n          if ($isTableCellNode(node)) {\n            if (firstCell === null) {\n              node.setColSpan(columns).setRowSpan(rows)\n              firstCell = node\n              const isEmpty = $cellContainsEmptyParagraph(node)\n              let firstChild\n              if (\n                isEmpty &&\n                $isParagraphNode((firstChild = node.getFirstChild()))\n              ) {\n                firstChild.remove()\n              }\n            } else if ($isTableCellNode(firstCell)) {\n              const isEmpty = $cellContainsEmptyParagraph(node)\n              if (!isEmpty) {\n                firstCell.append(...node.getChildren())\n              }\n              node.remove()\n            }\n          }\n        }\n        if (firstCell !== null) {\n          if (firstCell.getChildrenSize() === 0) {\n            firstCell.append($createParagraphNode())\n          }\n          $selectLastDescendant(firstCell)\n        }\n        onClose()\n      }\n    })\n  }\n\n  const unmergeTableCellsAtSelection = () => {\n    editor.update(() => {\n      $unmergeCell()\n    })\n  }\n\n  const insertTableRowAtSelection = useCallback(\n    (shouldInsertAfter: boolean) => {\n      editor.update(() => {\n        $insertTableRow__EXPERIMENTAL(shouldInsertAfter)\n        onClose()\n      })\n    },\n    [editor, onClose]\n  )\n\n  const insertTableColumnAtSelection = useCallback(\n    (shouldInsertAfter: boolean) => {\n      editor.update(() => {\n        for (let i = 0; i < selectionCounts.columns; i++) {\n          $insertTableColumn__EXPERIMENTAL(shouldInsertAfter)\n        }\n        onClose()\n      })\n    },\n    [editor, onClose, selectionCounts.columns]\n  )\n\n  const deleteTableRowAtSelection = useCallback(() => {\n    editor.update(() => {\n      $deleteTableRow__EXPERIMENTAL()\n      onClose()\n    })\n  }, [editor, onClose])\n\n  const deleteTableAtSelection = useCallback(() => {\n    editor.update(() => {\n      const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableCellNode)\n      tableNode.remove()\n\n      clearTableSelection()\n      onClose()\n    })\n  }, [editor, tableCellNode, clearTableSelection, onClose])\n\n  const deleteTableColumnAtSelection = useCallback(() => {\n    editor.update(() => {\n      $deleteTableColumn__EXPERIMENTAL()\n      onClose()\n    })\n  }, [editor, onClose])\n\n  const toggleTableRowIsHeader = useCallback(() => {\n    editor.update(() => {\n      const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableCellNode)\n\n      const tableRowIndex = $getTableRowIndexFromTableCellNode(tableCellNode)\n\n      const tableRows = tableNode.getChildren()\n\n      if (tableRowIndex >= tableRows.length || tableRowIndex < 0) {\n        throw new Error('Expected table cell to be inside of table row.')\n      }\n\n      const tableRow = tableRows[tableRowIndex]\n\n      if (!$isTableRowNode(tableRow)) {\n        throw new Error('Expected table row')\n      }\n\n      const newStyle =\n        tableCellNode.getHeaderStyles() ^ TableCellHeaderStates.ROW\n      tableRow.getChildren().forEach((tableCell) => {\n        if (!$isTableCellNode(tableCell)) {\n          throw new Error('Expected table cell')\n        }\n\n        tableCell.setHeaderStyles(newStyle, TableCellHeaderStates.ROW)\n      })\n\n      clearTableSelection()\n      onClose()\n    })\n  }, [editor, tableCellNode, clearTableSelection, onClose])\n\n  const toggleTableColumnIsHeader = useCallback(() => {\n    editor.update(() => {\n      const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableCellNode)\n\n      const tableColumnIndex =\n        $getTableColumnIndexFromTableCellNode(tableCellNode)\n\n      const tableRows = tableNode.getChildren<TableRowNode>()\n      const maxRowsLength = Math.max(\n        ...tableRows.map((row) => row.getChildren().length)\n      )\n\n      if (tableColumnIndex >= maxRowsLength || tableColumnIndex < 0) {\n        throw new Error('Expected table cell to be inside of table row.')\n      }\n\n      const newStyle =\n        tableCellNode.getHeaderStyles() ^ TableCellHeaderStates.COLUMN\n      for (let r = 0; r < tableRows.length; r++) {\n        const tableRow = tableRows[r]\n\n        if (!$isTableRowNode(tableRow)) {\n          throw new Error('Expected table row')\n        }\n\n        const tableCells = tableRow.getChildren()\n        if (tableColumnIndex >= tableCells.length) {\n          // if cell is outside of bounds for the current row (for example various merge cell cases) we shouldn't highlight it\n          continue\n        }\n\n        const tableCell = tableCells[tableColumnIndex]\n\n        if (!$isTableCellNode(tableCell)) {\n          throw new Error('Expected table cell')\n        }\n\n        tableCell.setHeaderStyles(newStyle, TableCellHeaderStates.COLUMN)\n      }\n      clearTableSelection()\n      onClose()\n    })\n  }, [editor, tableCellNode, clearTableSelection, onClose])\n\n  const toggleRowStriping = useCallback(() => {\n    editor.update(() => {\n      if (tableCellNode.isAttached()) {\n        const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableCellNode)\n        if (tableNode) {\n          tableNode.setRowStriping(!tableNode.getRowStriping())\n        }\n      }\n      clearTableSelection()\n      onClose()\n    })\n  }, [editor, tableCellNode, clearTableSelection, onClose])\n\n  const handleCellBackgroundColor = useCallback(\n    (value: string) => {\n      editor.update(() => {\n        const selection = $getSelection()\n        if ($isRangeSelection(selection) || $isTableSelection(selection)) {\n          const [cell] = $getNodeTriplet(selection.anchor)\n          if ($isTableCellNode(cell)) {\n            cell.setBackgroundColor(value)\n          }\n\n          if ($isTableSelection(selection)) {\n            const nodes = selection.getNodes()\n\n            for (let i = 0; i < nodes.length; i++) {\n              const node = nodes[i]\n              if ($isTableCellNode(node)) {\n                node.setBackgroundColor(value)\n              }\n            }\n          }\n        }\n      })\n    },\n    [editor]\n  )\n\n  let mergeCellButton: null | JSX.Element = null\n  if (cellMerge) {\n    if (canMergeCells) {\n      mergeCellButton = (\n        <CommandItem onSelect={() => mergeTableCellsAtSelection()}>\n          Merge cells\n        </CommandItem>\n      )\n    } else if (canUnmergeCell) {\n      mergeCellButton = (\n        <CommandItem onSelect={() => unmergeTableCellsAtSelection()}>\n          Unmerge cells\n        </CommandItem>\n      )\n    }\n  }\n\n  return (\n    <>\n      {modal}\n      <Command>\n        <CommandList>\n          <CommandGroup>\n            {mergeCellButton}\n            <CommandItem className=\"flex justify-between\">\n              Background color\n              <ColorPicker\n                color={backgroundColor}\n                onChange={handleCellBackgroundColor}\n                icon={<PaintBucketIcon className=\"size-4\" />}\n              />\n            </CommandItem>\n            <CommandItem onSelect={() => toggleRowStriping()}>\n              Toggle row striping\n            </CommandItem>\n            <CommandSeparator />\n            <CommandItem onSelect={() => insertTableRowAtSelection(false)}>\n              Insert{' '}\n              {selectionCounts.rows === 1\n                ? 'row'\n                : `${selectionCounts.rows} rows`}{' '}\n              above\n            </CommandItem>\n            <CommandItem onSelect={() => insertTableRowAtSelection(true)}>\n              Insert{' '}\n              {selectionCounts.rows === 1\n                ? 'row'\n                : `${selectionCounts.rows} rows`}{' '}\n              below\n            </CommandItem>\n            <CommandSeparator />\n            <CommandItem onSelect={() => insertTableColumnAtSelection(false)}>\n              Insert{' '}\n              {selectionCounts.columns === 1\n                ? 'column'\n                : `${selectionCounts.columns} columns`}{' '}\n              left\n            </CommandItem>\n            <CommandItem onSelect={() => insertTableColumnAtSelection(true)}>\n              Insert{' '}\n              {selectionCounts.columns === 1\n                ? 'column'\n                : `${selectionCounts.columns} columns`}{' '}\n              right\n            </CommandItem>\n            <CommandSeparator />\n            <CommandItem onSelect={() => deleteTableColumnAtSelection()}>\n              Delete column\n            </CommandItem>\n            <CommandItem onSelect={() => deleteTableRowAtSelection()}>\n              Delete row\n            </CommandItem>\n            <CommandItem onSelect={() => deleteTableAtSelection()}>\n              Delete table\n            </CommandItem>\n            <CommandSeparator />\n            <CommandItem onSelect={() => toggleTableRowIsHeader()}>\n              {(tableCellNode.__headerState & TableCellHeaderStates.ROW) ===\n              TableCellHeaderStates.ROW\n                ? 'Remove'\n                : 'Add'}{' '}\n              row header\n            </CommandItem>\n            <CommandItem onSelect={() => toggleTableColumnIsHeader()}>\n              {(tableCellNode.__headerState & TableCellHeaderStates.COLUMN) ===\n              TableCellHeaderStates.COLUMN\n                ? 'Remove'\n                : 'Add'}{' '}\n              column header\n            </CommandItem>\n          </CommandGroup>\n        </CommandList>\n      </Command>\n    </>\n  )\n}\n\nfunction TableCellActionMenuContainer({\n  anchorElem,\n  cellMerge,\n}: {\n  anchorElem: HTMLElement\n  cellMerge: boolean\n}): JSX.Element {\n  const [editor] = useLexicalComposerContext()\n\n  const menuButtonRef = useRef(null)\n  const menuRootRef = useRef(null)\n  const [isMenuOpen, setIsMenuOpen] = useState(false)\n\n  const [tableCellNode, setTableMenuCellNode] = useState<TableCellNode | null>(\n    null\n  )\n\n  const $moveMenu = useCallback(() => {\n    const menu = menuButtonRef.current\n    const selection = $getSelection()\n    const nativeSelection = window.getSelection()\n    const activeElement = document.activeElement\n\n    if (selection == null || menu == null) {\n      setTableMenuCellNode(null)\n      return\n    }\n\n    const rootElement = editor.getRootElement()\n\n    if (\n      $isRangeSelection(selection) &&\n      rootElement !== null &&\n      nativeSelection !== null &&\n      rootElement.contains(nativeSelection.anchorNode)\n    ) {\n      const tableCellNodeFromSelection = $getTableCellNodeFromLexicalNode(\n        selection.anchor.getNode()\n      )\n\n      if (tableCellNodeFromSelection == null) {\n        setTableMenuCellNode(null)\n        return\n      }\n\n      const tableCellParentNodeDOM = editor.getElementByKey(\n        tableCellNodeFromSelection.getKey()\n      )\n\n      if (tableCellParentNodeDOM == null) {\n        setTableMenuCellNode(null)\n        return\n      }\n\n      setTableMenuCellNode(tableCellNodeFromSelection)\n    } else if (!activeElement) {\n      setTableMenuCellNode(null)\n    }\n  }, [editor])\n\n  useEffect(() => {\n    return editor.registerUpdateListener(() => {\n      editor.getEditorState().read(() => {\n        $moveMenu()\n      })\n    })\n  })\n\n  useEffect(() => {\n    const menuButtonDOM = menuButtonRef.current as HTMLButtonElement | null\n\n    if (menuButtonDOM != null && tableCellNode != null) {\n      const tableCellNodeDOM = editor.getElementByKey(tableCellNode.getKey())\n\n      if (tableCellNodeDOM != null) {\n        const tableCellRect = tableCellNodeDOM.getBoundingClientRect()\n        const menuRect = menuButtonDOM.getBoundingClientRect()\n        const anchorRect = anchorElem.getBoundingClientRect()\n\n        const top = tableCellRect.top - anchorRect.top + 4\n        const left = tableCellRect.right - menuRect.width - 10 - anchorRect.left\n\n        menuButtonDOM.style.opacity = '1'\n        menuButtonDOM.style.transform = `translate(${left}px, ${top}px)`\n      } else {\n        menuButtonDOM.style.opacity = '0'\n        menuButtonDOM.style.transform = 'translate(-10000px, -10000px)'\n      }\n    }\n  }, [menuButtonRef, tableCellNode, editor, anchorElem])\n\n  const prevTableCellDOM = useRef(tableCellNode)\n\n  useEffect(() => {\n    if (prevTableCellDOM.current !== tableCellNode) {\n      setIsMenuOpen(false)\n    }\n\n    prevTableCellDOM.current = tableCellNode\n  }, [prevTableCellDOM, tableCellNode])\n\n  return (\n    <div\n      className=\"table-cell-action-button-container absolute top-0 will-change-transform\"\n      ref={menuButtonRef}\n    >\n      {tableCellNode != null && (\n        <Popover open={isMenuOpen} onOpenChange={setIsMenuOpen}>\n          <PopoverTrigger asChild>\n            <button\n              type=\"button\"\n              className=\"relative inline-block flex cursor-pointer items-center justify-center bg-none\"\n              onClick={(e) => {\n                e.stopPropagation()\n                setIsMenuOpen(!isMenuOpen)\n              }}\n              ref={menuRootRef}\n            >\n              <ChevronDownIcon className=\"h-4 w-4\" />\n            </button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-[200px] p-0\">\n            <TableActionMenu\n              contextRef={menuRootRef}\n              setIsMenuOpen={setIsMenuOpen}\n              onClose={() => setIsMenuOpen(false)}\n              tableCellNode={tableCellNode}\n              cellMerge={cellMerge}\n            />\n          </PopoverContent>\n        </Popover>\n      )}\n    </div>\n  )\n}\n\nexport function TableActionMenuPlugin({\n  anchorElem,\n  cellMerge = false,\n}: {\n  anchorElem: HTMLDivElement | null\n  cellMerge?: boolean\n}): null | ReactPortal {\n  const isEditable = useLexicalEditable()\n\n  if (!anchorElem) {\n    return null\n  }\n\n  return createPortal(\n    isEditable ? (\n      <TableCellActionMenuContainer\n        anchorElem={anchorElem}\n        cellMerge={cellMerge}\n      />\n    ) : null,\n    anchorElem\n  )\n}\n"]}