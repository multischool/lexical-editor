{"version":3,"file":"MentionNode.spec.js","sourceRoot":"","sources":["MentionNode.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAoB,YAAY,EAAE,MAAM,SAAS,CAAC;AACzD,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAEhD,OAAO,EACL,2BAA2B,EAC3B,oBAAoB,GACrB,MAAM,eAAe,CAAC;AAEvB,MAAM,YAAY,GAAqB;IACrC,KAAK,EAAE,CAAC,oBAAoB,CAAC;CAC9B,CAAC;AAEF,MAAM,UAAU,UAAU,CACxB,OAAe,EACf,KAAa,EACb,IAAgD;IAEhD,IAAI,IAAI,GAAqC,SAAS,CAAC;IACvD,MAAM,MAAM,GAAG,YAAY,CAAC,YAAY,CAAC,CAAC;IAC1C,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE;QACjB,IAAI,GAAG,2BAA2B,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;IACH,uEAAuE;IACvE,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;IACvC,CAAC;IACD,OAAQ,IAA6B,CAAC,UAAU,EAAE,CAAC;AACrD,CAAC;AAED,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACpC,IAAI,CAAC,+FAA+F,EAAE,GAAG,EAAE;QACzG,MAAM,IAAI,GAAG,UAAU,CAAC,GAAG,EAAE,MAAM,EAAE;YACnC,KAAK,EAAE,kBAAkB;SAC1B,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC;YACzB,OAAO,EAAE,GAAG;YACZ,IAAI,EAAE,kBAAkB;YACxB,KAAK,EAAE,MAAM;YACb,IAAI,EAAE;gBACJ,KAAK,EAAE,kBAAkB;aAC1B;YACD,OAAO,EAAE,CAAC;SACX,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,qGAAqG,EAAE,GAAG,EAAE;QAC/G,MAAM,IAAI,GAAG,UAAU,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;QACrC,MAAM,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC;YACzB,OAAO,EAAE,GAAG;YACZ,IAAI,EAAE,kBAAkB;YACxB,KAAK,EAAE,MAAM;YACb,OAAO,EAAE,CAAC;SACX,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { CreateEditorArgs, createEditor } from \"lexical\";\nimport { describe, expect, test } from \"vitest\";\nimport { BeautifulMentionsItemData } from \"./BeautifulMentionsPluginProps\";\nimport {\n  $createBeautifulMentionNode,\n  BeautifulMentionNode,\n} from \"./MentionNode\";\n\nconst editorConfig: CreateEditorArgs = {\n  nodes: [BeautifulMentionNode],\n};\n\nexport function exportJSON(\n  trigger: string,\n  value: string,\n  data?: Record<string, BeautifulMentionsItemData>,\n) {\n  let node: BeautifulMentionNode | undefined = undefined;\n  const editor = createEditor(editorConfig);\n  editor.update(() => {\n    node = $createBeautifulMentionNode(trigger, value, data);\n  });\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  if (!node) {\n    throw new Error(\"Node is undefined\");\n  }\n  return (node as BeautifulMentionNode).exportJSON();\n}\n\ndescribe(\"BeautifulMentionNode\", () => {\n  test(\"should include a data prop when exporting to JSON and data is provided when creating the node\", () => {\n    const node = exportJSON(\"@\", \"Jane\", {\n      email: \"jane@example.com\",\n    });\n    expect(node).toStrictEqual({\n      trigger: \"@\",\n      type: \"beautifulMention\",\n      value: \"Jane\",\n      data: {\n        email: \"jane@example.com\",\n      },\n      version: 1,\n    });\n  });\n\n  test(\"should not include a data prop when exporting to JSON if no data is provided when creating the node\", () => {\n    const node = exportJSON(\"@\", \"Jane\");\n    expect(node).toStrictEqual({\n      trigger: \"@\",\n      type: \"beautifulMention\",\n      value: \"Jane\",\n      version: 1,\n    });\n  });\n});\n"]}