{"version":3,"file":"drag-drop-paste-plugin.jsx","sourceRoot":"","sources":["drag-drop-paste-plugin.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAA;AAEZ;;;;;;GAMG;AACH,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAA;AAEjC,OAAO,EAAE,yBAAyB,EAAE,MAAM,uCAAuC,CAAA;AACjF,OAAO,EAAE,eAAe,EAAE,MAAM,oBAAoB,CAAA;AACpD,OAAO,EAAE,UAAU,EAAE,eAAe,EAAE,MAAM,gBAAgB,CAAA;AAC5D,OAAO,EAAE,oBAAoB,EAAE,MAAM,SAAS,CAAA;AAE9C,OAAO,EAAE,oBAAoB,EAAE,MAAM,0BAA0B,CAAA;AAE/D,MAAM,sBAAsB,GAAG;IAC7B,QAAQ;IACR,YAAY;IACZ,YAAY;IACZ,WAAW;IACX,YAAY;CACb,CAAA;AAED,MAAM,UAAU,mBAAmB;IACjC,MAAM,CAAC,MAAM,CAAC,GAAG,yBAAyB,EAAE,CAAA;IAC5C,SAAS,CAAC,GAAG,EAAE;QACb,OAAO,MAAM,CAAC,eAAe,CAC3B,eAAe,EACf,CAAC,KAAK,EAAE,EAAE;YACR,CAAC;YAAA,CAAC,KAAK,IAAI,EAAE;gBACX,MAAM,WAAW,GAAG,MAAM,eAAe,CACvC,KAAK,EACL,CAAC,sBAAsB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAC3C,CAAA;gBACD,KAAK,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,WAAW,EAAE,CAAC;oBAC3C,IAAI,UAAU,CAAC,IAAI,EAAE,sBAAsB,CAAC,EAAE,CAAC;wBAC7C,MAAM,CAAC,eAAe,CAAC,oBAAoB,EAAE;4BAC3C,OAAO,EAAE,IAAI,CAAC,IAAI;4BAClB,GAAG,EAAE,MAAM;yBACZ,CAAC,CAAA;oBACJ,CAAC;gBACH,CAAC;YACH,CAAC,CAAC,EAAE,CAAA;YACJ,OAAO,IAAI,CAAA;QACb,CAAC,EACD,oBAAoB,CACrB,CAAA;IACH,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAA;IACZ,OAAO,IAAI,CAAA;AACb,CAAC","sourcesContent":["'use client'\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { useEffect } from 'react'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport { DRAG_DROP_PASTE } from '@lexical/rich-text'\nimport { isMimeType, mediaFileReader } from '@lexical/utils'\nimport { COMMAND_PRIORITY_LOW } from 'lexical'\n\nimport { INSERT_IMAGE_COMMAND } from '../plugins/images-plugin'\n\nconst ACCEPTABLE_IMAGE_TYPES = [\n  'image/',\n  'image/heic',\n  'image/heif',\n  'image/gif',\n  'image/webp',\n]\n\nexport function DragDropPastePlugin(): null {\n  const [editor] = useLexicalComposerContext()\n  useEffect(() => {\n    return editor.registerCommand(\n      DRAG_DROP_PASTE,\n      (files) => {\n        ;(async () => {\n          const filesResult = await mediaFileReader(\n            files,\n            [ACCEPTABLE_IMAGE_TYPES].flatMap((x) => x)\n          )\n          for (const { file, result } of filesResult) {\n            if (isMimeType(file, ACCEPTABLE_IMAGE_TYPES)) {\n              editor.dispatchCommand(INSERT_IMAGE_COMMAND, {\n                altText: file.name,\n                src: result,\n              })\n            }\n          }\n        })()\n        return true\n      },\n      COMMAND_PRIORITY_LOW\n    )\n  }, [editor])\n  return null\n}\n"]}