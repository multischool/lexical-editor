{"version":3,"file":"layout-container-node.jsx","sourceRoot":"","sources":["layout-container-node.tsx"],"names":[],"mappings":"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","sourcesContent":["import { addClassNamesToElement } from '@lexical/utils'\nimport type {\n  DOMConversionMap,\n  DOMConversionOutput,\n  DOMExportOutput,\n  EditorConfig,\n  LexicalNode,\n  NodeKey,\n  SerializedElementNode,\n  Spread,\n} from 'lexical'\nimport { ElementNode } from 'lexical'\n\nexport type SerializedLayoutContainerNode = Spread<\n  {\n    templateColumns: string\n  },\n  SerializedElementNode\n>\n\nfunction $convertLayoutContainerElement(\n  domNode: HTMLElement\n): DOMConversionOutput | null {\n  const styleAttributes = window.getComputedStyle(domNode)\n  const templateColumns = styleAttributes.getPropertyValue(\n    'grid-template-columns'\n  )\n  if (templateColumns) {\n    const node = $createLayoutContainerNode(templateColumns)\n    return { node }\n  }\n  return null\n}\n\nexport class LayoutContainerNode extends ElementNode {\n  __templateColumns: string\n\n  constructor(templateColumns: string, key?: NodeKey) {\n    super(key)\n    this.__templateColumns = templateColumns\n  }\n\n  static getType(): string {\n    return 'layout-container'\n  }\n\n  static clone(node: LayoutContainerNode): LayoutContainerNode {\n    return new LayoutContainerNode(node.__templateColumns, node.__key)\n  }\n\n  createDOM(config: EditorConfig): HTMLElement {\n    const dom = document.createElement('div')\n    dom.style.gridTemplateColumns = this.__templateColumns\n    if (typeof config.theme.layoutContainer === 'string') {\n      addClassNamesToElement(dom, config.theme.layoutContainer)\n    }\n    return dom\n  }\n\n  exportDOM(): DOMExportOutput {\n    const element = document.createElement('div')\n    element.style.gridTemplateColumns = this.__templateColumns\n    element.setAttribute('data-lexical-layout-container', 'true')\n    return { element }\n  }\n\n  updateDOM(prevNode: LayoutContainerNode, dom: HTMLElement): boolean {\n    if (prevNode.__templateColumns !== this.__templateColumns) {\n      dom.style.gridTemplateColumns = this.__templateColumns\n    }\n    return false\n  }\n\n  static importDOM(): DOMConversionMap | null {\n    return {\n      div: (domNode: HTMLElement) => {\n        if (!domNode.hasAttribute('data-lexical-layout-container')) {\n          return null\n        }\n        return {\n          conversion: $convertLayoutContainerElement,\n          priority: 2,\n        }\n      },\n    }\n  }\n\n  static importJSON(json: SerializedLayoutContainerNode): LayoutContainerNode {\n    return $createLayoutContainerNode(json.templateColumns)\n  }\n\n  isShadowRoot(): boolean {\n    return true\n  }\n\n  canBeEmpty(): boolean {\n    return false\n  }\n\n  exportJSON(): SerializedLayoutContainerNode {\n    return {\n      ...super.exportJSON(),\n      templateColumns: this.__templateColumns,\n      type: 'layout-container',\n      version: 1,\n    }\n  }\n\n  getTemplateColumns(): string {\n    return this.getLatest().__templateColumns\n  }\n\n  setTemplateColumns(templateColumns: string) {\n    this.getWritable().__templateColumns = templateColumns\n  }\n}\n\nexport function $createLayoutContainerNode(\n  templateColumns: string\n): LayoutContainerNode {\n  return new LayoutContainerNode(templateColumns)\n}\n\nexport function $isLayoutContainerNode(\n  node: LexicalNode | null | undefined\n): node is LayoutContainerNode {\n  return node instanceof LayoutContainerNode\n}\n"]}