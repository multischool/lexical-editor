{"version":3,"file":"layout-plugin.jsx","sourceRoot":"","sources":["layout-plugin.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client'\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport * as React from 'react'\nimport { useState, useEffect, JSX } from 'react'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport {\n  $findMatchingParent,\n  $insertNodeToNearestRoot,\n  mergeRegister,\n} from '@lexical/utils'\nimport { LexicalEditor } from 'lexical'\nimport type { ElementNode, LexicalCommand, LexicalNode, NodeKey } from 'lexical'\nimport {\n  $createParagraphNode,\n  $getNodeByKey,\n  $getSelection,\n  $isRangeSelection,\n  COMMAND_PRIORITY_EDITOR,\n  COMMAND_PRIORITY_LOW,\n  KEY_ARROW_DOWN_COMMAND,\n  KEY_ARROW_LEFT_COMMAND,\n  KEY_ARROW_RIGHT_COMMAND,\n  KEY_ARROW_UP_COMMAND,\n  createCommand,\n} from 'lexical'\n\nimport { Button } from '../../ui/button'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '../../ui/select'\n\nimport {\n  $createLayoutContainerNode,\n  $isLayoutContainerNode,\n  LayoutContainerNode,\n} from '../nodes/layout-container-node'\nimport {\n  $createLayoutItemNode,\n  $isLayoutItemNode,\n  LayoutItemNode,\n} from '../nodes/layout-item-node'\n\nconst LAYOUTS = [\n  { label: '2 columns (equal width)', value: '1fr 1fr' },\n  { label: '2 columns (25% - 75%)', value: '1fr 3fr' },\n  { label: '3 columns (equal width)', value: '1fr 1fr 1fr' },\n  { label: '3 columns (25% - 50% - 25%)', value: '1fr 2fr 1fr' },\n  { label: '4 columns (equal width)', value: '1fr 1fr 1fr 1fr' },\n]\n\nexport function InsertLayoutDialog({\n  activeEditor,\n  onClose,\n}: {\n  activeEditor: LexicalEditor\n  onClose: () => void\n}): JSX.Element {\n  const [layout, setLayout] = useState(LAYOUTS[0].value)\n  const buttonLabel = LAYOUTS.find((item) => item.value === layout)?.label\n\n  const onClick = () => {\n    activeEditor.dispatchCommand(INSERT_LAYOUT_COMMAND, layout)\n    onClose()\n  }\n\n  return (\n    <>\n      <Select onValueChange={setLayout} defaultValue={layout}>\n        <SelectTrigger className=\"w-full\">\n          <SelectValue placeholder={buttonLabel} />\n        </SelectTrigger>\n        <SelectContent className=\"w-full\">\n          {LAYOUTS.map(({ label, value }) => (\n            <SelectItem key={value} value={value}>\n              {label}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n      <Button onClick={onClick}>Insert</Button>\n    </>\n  )\n}\n\nexport const INSERT_LAYOUT_COMMAND: LexicalCommand<string> =\n  createCommand<string>()\n\nexport const UPDATE_LAYOUT_COMMAND: LexicalCommand<{\n  template: string\n  nodeKey: NodeKey\n}> = createCommand<{ template: string; nodeKey: NodeKey }>()\n\nexport function LayoutPlugin(): null {\n  const [editor] = useLexicalComposerContext()\n  useEffect(() => {\n    if (!editor.hasNodes([LayoutContainerNode, LayoutItemNode])) {\n      throw new Error(\n        'LayoutPlugin: LayoutContainerNode, or LayoutItemNode not registered on editor'\n      )\n    }\n\n    const $onEscape = (before: boolean) => {\n      const selection = $getSelection()\n      if (\n        $isRangeSelection(selection) &&\n        selection.isCollapsed() &&\n        selection.anchor.offset === 0\n      ) {\n        const container = $findMatchingParent(\n          selection.anchor.getNode(),\n          $isLayoutContainerNode\n        )\n\n        if ($isLayoutContainerNode(container)) {\n          const parent = container.getParent<ElementNode>()\n          const child =\n            parent &&\n            (before\n              ? parent.getFirstChild<LexicalNode>()\n              : parent?.getLastChild<LexicalNode>())\n          const descendant = before\n            ? container.getFirstDescendant<LexicalNode>()?.getKey()\n            : container.getLastDescendant<LexicalNode>()?.getKey()\n\n          if (\n            parent !== null &&\n            child === container &&\n            selection.anchor.key === descendant\n          ) {\n            if (before) {\n              container.insertBefore($createParagraphNode())\n            } else {\n              container.insertAfter($createParagraphNode())\n            }\n          }\n        }\n      }\n\n      return false\n    }\n\n    return mergeRegister(\n      // When layout is the last child pressing down/right arrow will insert paragraph\n      // below it to allow adding more content. It's similar what $insertBlockNode\n      // (mainly for decorators), except it'll always be possible to continue adding\n      // new content even if trailing paragraph is accidentally deleted\n      editor.registerCommand(\n        KEY_ARROW_DOWN_COMMAND,\n        () => $onEscape(false),\n        COMMAND_PRIORITY_LOW\n      ),\n      editor.registerCommand(\n        KEY_ARROW_RIGHT_COMMAND,\n        () => $onEscape(false),\n        COMMAND_PRIORITY_LOW\n      ),\n      // When layout is the first child pressing up/left arrow will insert paragraph\n      // above it to allow adding more content. It's similar what $insertBlockNode\n      // (mainly for decorators), except it'll always be possible to continue adding\n      // new content even if leading paragraph is accidentally deleted\n      editor.registerCommand(\n        KEY_ARROW_UP_COMMAND,\n        () => $onEscape(true),\n        COMMAND_PRIORITY_LOW\n      ),\n      editor.registerCommand(\n        KEY_ARROW_LEFT_COMMAND,\n        () => $onEscape(true),\n        COMMAND_PRIORITY_LOW\n      ),\n      editor.registerCommand(\n        INSERT_LAYOUT_COMMAND,\n        (template) => {\n          editor.update(() => {\n            const container = $createLayoutContainerNode(template)\n            const itemsCount = getItemsCountFromTemplate(template)\n\n            for (let i = 0; i < itemsCount; i++) {\n              container.append(\n                $createLayoutItemNode().append($createParagraphNode())\n              )\n            }\n\n            $insertNodeToNearestRoot(container)\n            container.selectStart()\n          })\n\n          return true\n        },\n        COMMAND_PRIORITY_EDITOR\n      ),\n      editor.registerCommand(\n        UPDATE_LAYOUT_COMMAND,\n        ({ template, nodeKey }) => {\n          editor.update(() => {\n            const container = $getNodeByKey<LexicalNode>(nodeKey)\n\n            if (!$isLayoutContainerNode(container)) {\n              return\n            }\n\n            const itemsCount = getItemsCountFromTemplate(template)\n            const prevItemsCount = getItemsCountFromTemplate(\n              container.getTemplateColumns()\n            )\n\n            // Add or remove extra columns if new template does not match existing one\n            if (itemsCount > prevItemsCount) {\n              for (let i = prevItemsCount; i < itemsCount; i++) {\n                container.append(\n                  $createLayoutItemNode().append($createParagraphNode())\n                )\n              }\n            } else if (itemsCount < prevItemsCount) {\n              for (let i = prevItemsCount - 1; i >= itemsCount; i--) {\n                const layoutItem = container.getChildAtIndex<LexicalNode>(i)\n\n                if ($isLayoutItemNode(layoutItem)) {\n                  layoutItem.remove()\n                }\n              }\n            }\n\n            container.setTemplateColumns(template)\n          })\n\n          return true\n        },\n        COMMAND_PRIORITY_EDITOR\n      ),\n      // Structure enforcing transformers for each node type. In case nesting structure is not\n      // \"Container > Item\" it'll unwrap nodes and convert it back\n      // to regular content.\n      editor.registerNodeTransform(LayoutItemNode, (node) => {\n        const parent = node.getParent<ElementNode>()\n        if (!$isLayoutContainerNode(parent)) {\n          const children = node.getChildren<LexicalNode>()\n          for (const child of children) {\n            node.insertBefore(child)\n          }\n          node.remove()\n        }\n      }),\n      editor.registerNodeTransform(LayoutContainerNode, (node) => {\n        const children = node.getChildren<LexicalNode>()\n        if (!children.every($isLayoutItemNode)) {\n          for (const child of children) {\n            node.insertBefore(child)\n          }\n          node.remove()\n        }\n      })\n    )\n  }, [editor])\n\n  return null\n}\n\nfunction getItemsCountFromTemplate(template: string): number {\n  return template.trim().split(/\\s+/).length\n}\n"]}