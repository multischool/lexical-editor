{"version":3,"file":"excalidraw-node.jsx","sourceRoot":"","sources":["excalidraw-node.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { Suspense, JSX } from 'react'\n\nimport type {\n  DOMConversionMap,\n  DOMConversionOutput,\n  DOMExportOutput,\n  EditorConfig,\n  LexicalEditor,\n  LexicalNode,\n  NodeKey,\n  SerializedLexicalNode,\n  Spread,\n} from 'lexical'\nimport { DecoratorNode } from 'lexical'\n\ntype Dimension = number | 'inherit'\n\nconst ExcalidrawComponent = React.lazy(\n  () => import('../editor-ui/excalidraw-component')\n)\n\nexport type SerializedExcalidrawNode = Spread<\n  {\n    data: string\n    width?: Dimension\n    height?: Dimension\n  },\n  SerializedLexicalNode\n>\n\nfunction $convertExcalidrawElement(\n  domNode: HTMLElement\n): DOMConversionOutput | null {\n  const excalidrawData = domNode.getAttribute('data-lexical-excalidraw-json')\n  const styleAttributes = window.getComputedStyle(domNode)\n  const heightStr = styleAttributes.getPropertyValue('height')\n  const widthStr = styleAttributes.getPropertyValue('width')\n  const height =\n    !heightStr || heightStr === 'inherit' ? 'inherit' : parseInt(heightStr, 10)\n  const width =\n    !widthStr || widthStr === 'inherit' ? 'inherit' : parseInt(widthStr, 10)\n\n  if (excalidrawData) {\n    const node = $createExcalidrawNode(excalidrawData, width, height)\n    return {\n      node,\n    }\n  }\n  return null\n}\n\nexport class ExcalidrawNode extends DecoratorNode<JSX.Element> {\n  __data: string\n  __width: Dimension\n  __height: Dimension\n\n  static getType(): string {\n    return 'excalidraw'\n  }\n\n  static clone(node: ExcalidrawNode): ExcalidrawNode {\n    return new ExcalidrawNode(\n      node.__data,\n      node.__width,\n      node.__height,\n      node.__key\n    )\n  }\n\n  static importJSON(serializedNode: SerializedExcalidrawNode): ExcalidrawNode {\n    return new ExcalidrawNode(\n      serializedNode.data,\n      serializedNode.width ?? 'inherit',\n      serializedNode.height ?? 'inherit'\n    )\n  }\n\n  exportJSON(): SerializedExcalidrawNode {\n    return {\n      data: this.__data,\n      height: this.__height === 'inherit' ? undefined : this.__height,\n      type: 'excalidraw',\n      version: 1,\n      width: this.__width === 'inherit' ? undefined : this.__width,\n    }\n  }\n\n  constructor(\n    data = '[]',\n    width: Dimension = 'inherit',\n    height: Dimension = 'inherit',\n    key?: NodeKey\n  ) {\n    super(key)\n    this.__data = data\n    this.__width = width\n    this.__height = height\n  }\n\n  // View\n  createDOM(config: EditorConfig): HTMLElement {\n    const span = document.createElement('span')\n    const theme = config.theme\n    const className = theme.image\n    if (className !== undefined) {\n      span.className = className\n    }\n    return span\n  }\n\n  updateDOM(): false {\n    return false\n  }\n\n  static importDOM(): DOMConversionMap<HTMLSpanElement> | null {\n    return {\n      span: (domNode: HTMLSpanElement) => {\n        if (!domNode.hasAttribute('data-lexical-excalidraw-json')) {\n          return null\n        }\n        return {\n          conversion: $convertExcalidrawElement,\n          priority: 1,\n        }\n      },\n    }\n  }\n\n  exportDOM(editor: LexicalEditor): DOMExportOutput {\n    const element = document.createElement('span')\n\n    element.style.display = 'inline-block'\n\n    const content = editor.getElementByKey(this.getKey())\n    if (content !== null) {\n      const svg = content.querySelector('svg')\n      if (svg !== null) {\n        element.innerHTML = svg.outerHTML\n      }\n    }\n\n    element.style.width =\n      this.__width === 'inherit' ? 'inherit' : `${this.__width}px`\n    element.style.height =\n      this.__height === 'inherit' ? 'inherit' : `${this.__height}px`\n\n    element.setAttribute('data-lexical-excalidraw-json', this.__data)\n    return { element }\n  }\n\n  setData(data: string): void {\n    const self = this.getWritable()\n    self.__data = data\n  }\n\n  getWidth(): Dimension {\n    return this.getLatest().__width\n  }\n\n  setWidth(width: Dimension): void {\n    const self = this.getWritable()\n    self.__width = width\n  }\n\n  getHeight(): Dimension {\n    return this.getLatest().__height\n  }\n\n  setHeight(height: Dimension): void {\n    const self = this.getWritable()\n    self.__height = height\n  }\n\n  decorate(editor: LexicalEditor, config: EditorConfig): JSX.Element {\n    return (\n      <Suspense fallback={null}>\n        <ExcalidrawComponent\n          nodeKey={this.getKey()}\n          data={this.__data}\n          width={this.__width}\n          height={this.__height}\n        />\n      </Suspense>\n    )\n  }\n}\n\nexport function $createExcalidrawNode(\n  data: string = '[]',\n  width: Dimension = 'inherit',\n  height: Dimension = 'inherit'\n): ExcalidrawNode {\n  return new ExcalidrawNode(data, width, height)\n}\n\nexport function $isExcalidrawNode(\n  node: LexicalNode | null | undefined\n): node is ExcalidrawNode {\n  return node instanceof ExcalidrawNode\n}\n"]}