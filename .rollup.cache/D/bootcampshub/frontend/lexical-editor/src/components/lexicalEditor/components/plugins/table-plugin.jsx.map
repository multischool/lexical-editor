{"version":3,"file":"table-plugin.jsx","sourceRoot":"","sources":["table-plugin.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client'\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { createContext, useContext, useEffect, useMemo, useState, JSX } from 'react'\nimport * as React from 'react'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport {\n  $createTableNodeWithDimensions,\n  INSERT_TABLE_COMMAND,\n  TableNode,\n} from '@lexical/table'\nimport {\n  $insertNodes,\n  COMMAND_PRIORITY_EDITOR,\n  EditorThemeClasses,\n  Klass,\n  LexicalCommand,\n  LexicalEditor,\n  LexicalNode,\n  createCommand,\n} from 'lexical'\n\nimport { Button } from '../../ui/button'\nimport { DialogFooter } from '../../ui/dialog'\nimport { Input } from '../../ui/input'\nimport { Label } from '../../ui/label'\n\nimport { invariant } from '../shared/invariant'\n\nexport type InsertTableCommandPayload = Readonly<{\n  columns: string\n  rows: string\n  includeHeaders?: boolean\n}>\n\nexport type CellContextShape = {\n  cellEditorConfig: null | CellEditorConfig\n  cellEditorPlugins: null | JSX.Element | Array<JSX.Element>\n  set: (\n    cellEditorConfig: null | CellEditorConfig,\n    cellEditorPlugins: null | JSX.Element | Array<JSX.Element>\n  ) => void\n}\n\nexport type CellEditorConfig = Readonly<{\n  namespace: string\n  nodes?: ReadonlyArray<Klass<LexicalNode>>\n  onError: (error: Error, editor: LexicalEditor) => void\n  readOnly?: boolean\n  theme?: EditorThemeClasses\n}>\n\nexport const INSERT_NEW_TABLE_COMMAND: LexicalCommand<InsertTableCommandPayload> =\n  createCommand('INSERT_NEW_TABLE_COMMAND')\n\nexport const CellContext = createContext<CellContextShape>({\n  cellEditorConfig: null,\n  cellEditorPlugins: null,\n  set: () => {\n    // Empty\n  },\n})\n\nexport function TableContext({ children }: { children: JSX.Element }) {\n  const [contextValue, setContextValue] = useState<{\n    cellEditorConfig: null | CellEditorConfig\n    cellEditorPlugins: null | JSX.Element | Array<JSX.Element>\n  }>({\n    cellEditorConfig: null,\n    cellEditorPlugins: null,\n  })\n  return (\n    <CellContext.Provider\n      value={useMemo(\n        () => ({\n          cellEditorConfig: contextValue.cellEditorConfig,\n          cellEditorPlugins: contextValue.cellEditorPlugins,\n          set: (cellEditorConfig, cellEditorPlugins) => {\n            setContextValue({ cellEditorConfig, cellEditorPlugins })\n          },\n        }),\n        [contextValue.cellEditorConfig, contextValue.cellEditorPlugins]\n      )}\n    >\n      {children}\n    </CellContext.Provider>\n  )\n}\n\nexport function InsertTableDialog({\n  activeEditor,\n  onClose,\n}: {\n  activeEditor: LexicalEditor\n  onClose: () => void\n}): JSX.Element {\n  const [rows, setRows] = useState('5')\n  const [columns, setColumns] = useState('5')\n  const [isDisabled, setIsDisabled] = useState(true)\n\n  useEffect(() => {\n    const row = Number(rows)\n    const column = Number(columns)\n    if (row && row > 0 && row <= 500 && column && column > 0 && column <= 50) {\n      setIsDisabled(false)\n    } else {\n      setIsDisabled(true)\n    }\n  }, [rows, columns])\n\n  const onClick = () => {\n    activeEditor.dispatchCommand(INSERT_TABLE_COMMAND, {\n      columns,\n      rows,\n    })\n\n    onClose()\n  }\n\n  return (\n    <>\n      <div className=\"grid gap-4\">\n        <div className=\"grid gap-2\">\n          <Label htmlFor=\"rows\">Number of rows</Label>\n          <Input\n            id=\"rows\"\n            placeholder={'# of rows (1-500)'}\n            onChange={(e) => setRows(e.target.value)}\n            value={rows}\n            data-test-id=\"table-modal-rows\"\n            type=\"number\"\n          />\n        </div>\n        <div className=\"grid gap-2\">\n          <Label htmlFor=\"columns\">Number of columns</Label>\n          <Input\n            id=\"columns\"\n            placeholder={'# of columns (1-50)'}\n            onChange={(e) => setColumns(e.target.value)}\n            value={columns}\n            data-test-id=\"table-modal-columns\"\n            type=\"number\"\n          />\n        </div>\n      </div>\n      <DialogFooter data-test-id=\"table-model-confirm-insert\">\n        <Button disabled={isDisabled} onClick={onClick}>\n          Confirm\n        </Button>\n      </DialogFooter>\n    </>\n  )\n}\n\nexport function TablePlugin({\n  cellEditorConfig,\n  children,\n}: {\n  cellEditorConfig: CellEditorConfig\n  children: JSX.Element | Array<JSX.Element>\n}): JSX.Element | null {\n  const [editor] = useLexicalComposerContext()\n  const cellContext = useContext(CellContext)\n\n  useEffect(() => {\n    if (!editor.hasNodes([TableNode])) {\n      invariant(false, 'TablePlugin: TableNode is not registered on editor')\n    }\n\n    cellContext.set(cellEditorConfig, children)\n\n    return editor.registerCommand<InsertTableCommandPayload>(\n      INSERT_NEW_TABLE_COMMAND,\n      ({ columns, rows, includeHeaders }) => {\n        const tableNode = $createTableNodeWithDimensions(\n          Number(rows),\n          Number(columns),\n          includeHeaders\n        )\n        $insertNodes([tableNode])\n        return true\n      },\n      COMMAND_PRIORITY_EDITOR\n    )\n  }, [cellContext, cellEditorConfig, children, editor])\n\n  return null\n}\n"]}