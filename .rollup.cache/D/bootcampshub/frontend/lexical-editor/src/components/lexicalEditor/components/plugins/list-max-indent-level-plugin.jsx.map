{"version":3,"file":"list-max-indent-level-plugin.jsx","sourceRoot":"","sources":["list-max-indent-level-plugin.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAA;AAEZ;;;;;;GAMG;AACH,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAA;AAEjC,OAAO,EAAE,aAAa,EAAE,eAAe,EAAE,WAAW,EAAE,MAAM,eAAe,CAAA;AAC3E,OAAO,EAAE,yBAAyB,EAAE,MAAM,uCAAuC,CAAA;AAEjF,OAAO,EACL,aAAa,EACb,cAAc,EACd,iBAAiB,EACjB,yBAAyB,EACzB,sBAAsB,GACvB,MAAM,SAAS,CAAA;AAEhB,SAAS,0BAA0B,CACjC,SAAyB;IAEzB,MAAM,gBAAgB,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAA;IAE7C,IAAI,gBAAgB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QAClC,OAAO,IAAI,GAAG,CAAC;YACb,SAAS,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,gBAAgB,EAAE;YAC7C,SAAS,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,gBAAgB,EAAE;SAC7C,CAAC,CAAA;IACJ,CAAC;IAED,OAAO,IAAI,GAAG,CACZ,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAC5E,CAAA;AACH,CAAC;AAED,SAAS,oBAAoB,CAAC,QAAgB;IAC5C,MAAM,SAAS,GAAG,aAAa,EAAE,CAAA;IAEjC,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,EAAE,CAAC;QAClC,OAAO,KAAK,CAAA;IACd,CAAC;IAED,MAAM,uBAAuB,GAC3B,0BAA0B,CAAC,SAAS,CAAC,CAAA;IAEvC,IAAI,UAAU,GAAG,CAAC,CAAA;IAElB,KAAK,MAAM,WAAW,IAAI,KAAK,CAAC,IAAI,CAAC,uBAAuB,CAAC,EAAE,CAAC;QAC9D,IAAI,WAAW,CAAC,WAAW,CAAC,EAAE,CAAC;YAC7B,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,UAAU,CAAC,CAAA;QACnE,CAAC;aAAM,IAAI,eAAe,CAAC,WAAW,CAAC,EAAE,CAAC;YACxC,MAAM,MAAM,GAAG,WAAW,CAAC,SAAS,EAAE,CAAA;YAEtC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,CAAC;gBACzB,MAAM,IAAI,KAAK,CACb,6EAA6E,CAC9E,CAAA;YACH,CAAC;YAED,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,UAAU,CAAC,CAAA;QAC9D,CAAC;IACH,CAAC;IAED,OAAO,UAAU,GAAG,QAAQ,CAAA;AAC9B,CAAC;AAED,MAAM,UAAU,wBAAwB,CAAC,EACvC,QAAQ,GAAG,CAAC,GAGb;IACC,MAAM,CAAC,MAAM,CAAC,GAAG,yBAAyB,EAAE,CAAA;IAE5C,SAAS,CAAC,GAAG,EAAE;QACb,OAAO,MAAM,CAAC,eAAe,CAC3B,sBAAsB,EACtB,GAAG,EAAE,CAAC,oBAAoB,CAAC,QAAQ,CAAC,EACpC,yBAAyB,CAC1B,CAAA;IACH,CAAC,EAAE,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAA;IACtB,OAAO,IAAI,CAAA;AACb,CAAC","sourcesContent":["'use client'\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { useEffect } from 'react'\n\nimport { $getListDepth, $isListItemNode, $isListNode } from '@lexical/list'\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport type { ElementNode, RangeSelection } from 'lexical'\nimport {\n  $getSelection,\n  $isElementNode,\n  $isRangeSelection,\n  COMMAND_PRIORITY_CRITICAL,\n  INDENT_CONTENT_COMMAND,\n} from 'lexical'\n\nfunction getElementNodesInSelection(\n  selection: RangeSelection\n): Set<ElementNode> {\n  const nodesInSelection = selection.getNodes()\n\n  if (nodesInSelection.length === 0) {\n    return new Set([\n      selection.anchor.getNode().getParentOrThrow(),\n      selection.focus.getNode().getParentOrThrow(),\n    ])\n  }\n\n  return new Set(\n    nodesInSelection.map((n) => ($isElementNode(n) ? n : n.getParentOrThrow()))\n  )\n}\n\nfunction $shouldPreventIndent(maxDepth: number): boolean {\n  const selection = $getSelection()\n\n  if (!$isRangeSelection(selection)) {\n    return false\n  }\n\n  const elementNodesInSelection: Set<ElementNode> =\n    getElementNodesInSelection(selection)\n\n  let totalDepth = 0\n\n  for (const elementNode of Array.from(elementNodesInSelection)) {\n    if ($isListNode(elementNode)) {\n      totalDepth = Math.max($getListDepth(elementNode) + 1, totalDepth)\n    } else if ($isListItemNode(elementNode)) {\n      const parent = elementNode.getParent()\n\n      if (!$isListNode(parent)) {\n        throw new Error(\n          'ListMaxIndentLevelPlugin: A ListItemNode must have a ListNode for a parent.'\n        )\n      }\n\n      totalDepth = Math.max($getListDepth(parent) + 1, totalDepth)\n    }\n  }\n\n  return totalDepth > maxDepth\n}\n\nexport function ListMaxIndentLevelPlugin({\n  maxDepth = 7,\n}: {\n  maxDepth?: number\n}): null {\n  const [editor] = useLexicalComposerContext()\n\n  useEffect(() => {\n    return editor.registerCommand(\n      INDENT_CONTENT_COMMAND,\n      () => $shouldPreventIndent(maxDepth),\n      COMMAND_PRIORITY_CRITICAL\n    )\n  }, [editor, maxDepth])\n  return null\n}\n"]}