{"version":3,"file":"use-modal.jsx","sourceRoot":"","sources":["use-modal.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,OAAO,EAAE,QAAQ,EAAO,MAAM,OAAO,CAAA;AAC3D,OAAO,KAAK,KAAK,MAAM,OAAO,CAAA;AAE9B,OAAO,EACL,MAAM,EACN,aAAa,EACb,YAAY,EACZ,WAAW,GACZ,MAAM,iBAAiB,CAAA;AAExB,MAAM,UAAU,cAAc;IAI5B,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,QAAQ,CAI7C,IAAI,CAAC,CAAA;IAER,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,EAAE;QAC/B,eAAe,CAAC,IAAI,CAAC,CAAA;IACvB,CAAC,EAAE,EAAE,CAAC,CAAA;IAEN,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,EAAE;QACzB,IAAI,YAAY,KAAK,IAAI,EAAE,CAAC;YAC1B,OAAO,IAAI,CAAA;QACb,CAAC;QACD,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,YAAY,CAAA;QACvC,OAAO,CACL,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,CACxC;QAAA,CAAC,aAAa,CACZ;UAAA,CAAC,YAAY,CACX;YAAA,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,EAAE,WAAW,CACnC;UAAA,EAAE,YAAY,CACd;UAAA,CAAC,OAAO,CACV;QAAA,EAAE,aAAa,CACjB;MAAA,EAAE,MAAM,CAAC,CACV,CAAA;IACH,CAAC,EAAE,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,CAAA;IAE3B,MAAM,SAAS,GAAG,WAAW,CAC3B,CACE,KAAa,EACb,UAAgD,EAChD,mBAAmB,GAAG,KAAK,EAC3B,EAAE;QACF,eAAe,CAAC;YACd,mBAAmB;YACnB,OAAO,EAAE,UAAU,CAAC,OAAO,CAAC;YAC5B,KAAK;SACN,CAAC,CAAA;IACJ,CAAC,EACD,CAAC,OAAO,CAAC,CACV,CAAA;IAED,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC,CAAA;AAC3B,CAAC","sourcesContent":["import { useCallback, useMemo, useState, JSX } from 'react'\nimport * as React from 'react'\n\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '../../ui/dialog'\n\nexport function useEditorModal(): [\n  JSX.Element | null,\n  (title: string, showModal: (onClose: () => void) => JSX.Element) => void,\n] {\n  const [modalContent, setModalContent] = useState<null | {\n    closeOnClickOutside: boolean\n    content: JSX.Element\n    title: string\n  }>(null)\n\n  const onClose = useCallback(() => {\n    setModalContent(null)\n  }, [])\n\n  const modal = useMemo(() => {\n    if (modalContent === null) {\n      return null\n    }\n    const { title, content } = modalContent\n    return (\n      <Dialog open={true} onOpenChange={onClose}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>{title}</DialogTitle>\n          </DialogHeader>\n          {content}\n        </DialogContent>\n      </Dialog>\n    )\n  }, [modalContent, onClose])\n\n  const showModal = useCallback(\n    (\n      title: string,\n      getContent: (onClose: () => void) => JSX.Element,\n      closeOnClickOutside = false\n    ) => {\n      setModalContent({\n        closeOnClickOutside,\n        content: getContent(onClose),\n        title,\n      })\n    },\n    [onClose]\n  )\n\n  return [modal, showModal]\n}\n"]}