{"version":3,"file":"editor.jsx","sourceRoot":"","sources":["editor.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client'\n\nimport React, { useEffect, useMemo } from 'react'\nimport {\n  InitialConfigType,\n  LexicalComposer,\n} from '@lexical/react/LexicalComposer'\nimport { OnChangePlugin } from '@lexical/react/LexicalOnChangePlugin'\nimport { EditorState, SerializedEditorState } from 'lexical'\n\nimport { FloatingLinkContext } from '../components/context/floating-link-context'\nimport { SharedAutocompleteContext } from '../components/context/shared-autocomplete-context'\nimport { editorTheme } from '../components/themes/editor-theme'\nimport { TooltipProvider } from '../ui/tooltip'\n\nimport { nodes } from './nodes'\nimport { Plugins } from './plugins'\nimport { $convertFromMarkdownString, $convertToMarkdownString } from '@lexical/markdown'\n\nimport {\n  CHECK_LIST,\n  ELEMENT_TRANSFORMERS,\n  MULTILINE_ELEMENT_TRANSFORMERS,\n  TEXT_FORMAT_TRANSFORMERS,\n  TEXT_MATCH_TRANSFORMERS,\n} from '@lexical/markdown'\n\nimport { EMOJI } from '../components/transformers/markdown-emoji-transformer'\nimport { EQUATION } from '../components/transformers/markdown-equation-transofrmer'\nimport { HR } from '../components/transformers/markdown-hr-transformer'\nimport { IMAGE } from '../components/transformers/markdown-image-transformer'\nimport { TABLE } from '../components/transformers/markdown-table-transformer'\nimport { TWEET } from '../components/transformers/markdown-tweet-transformer'\nimport { MENTION_MARKDOWN_TRANSFORMER } from '../components/transformers/markdown-mention-transformer'\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\n\nexport interface PluginOptions {\n  // Main plugin options\n  history?: boolean\n  autoFocus?: boolean\n  richText?: boolean\n  checkList?: boolean\n  horizontalRule?: boolean\n  table?: boolean\n  list?: boolean\n  tabIndentation?: boolean\n  draggableBlock?: boolean\n  images?: boolean\n  codeHighlight?: boolean\n  autoLink?: boolean\n  link?: boolean\n  componentPicker?: boolean\n  contextMenu?: boolean\n  dragDropPaste?: boolean\n  emojiPicker?: boolean\n  floatingLinkEditor?: boolean\n  floatingTextFormat?: boolean\n  maxIndentLevel?: boolean\n  beautifulMentions?: boolean\n  showToolbar?: boolean\n  showBottomBar?: boolean\n\n  // Toolbar-specific options\n  toolbar?: {\n    history?: boolean\n    blockFormat?: boolean\n    codeLanguage?: boolean\n    fontFormat?: {\n      bold?: boolean\n      italic?: boolean\n      underline?: boolean\n      strikethrough?: boolean\n    }\n    link?: boolean\n    clearFormatting?: boolean\n    blockInsert?: {\n      horizontalRule?: boolean\n      image?: boolean\n      table?: boolean\n    }\n  }\n\n  // Action bar specific options\n  actionBar?: {\n    maxLength?: boolean\n    characterLimit?: boolean\n    counter?: boolean\n    speechToText?: boolean\n    editModeToggle?: boolean\n    clearEditor?: boolean\n    treeView?: boolean\n  }\n\n  [key: string]: any // To allow for future extensions\n}\n\nconst editorConfig: InitialConfigType = {\n  namespace: 'Editor',\n  theme: editorTheme,\n  nodes,\n  onError: (error: Error) => {\n    console.error(error)\n  },\n}\n\n/**\n * LoadMarkdownContent is responsible for converting initial markdown to an editor state.\n * Because this conversion must occur within an active editor update callback,\n * we perform this in a child component that uses the LexicalComposer context.\n */\nfunction LoadMarkdownContent({\n  initialMarkdown,\n  transformers,\n}: {\n  initialMarkdown: string\n  transformers: any[]\n}) {\n  const [editor] = useLexicalComposerContext()\n\n  useEffect(() => {\n    if (initialMarkdown) {\n      editor.update(() => {\n        $convertFromMarkdownString(initialMarkdown, transformers)\n\n      })\n    }\n  // We intentionally run only when the editor and initialMarkdown are set.\n  }, [])\n\n  return null\n}\n\n/**\n * MarkdownEditor is the main editor component.\n *\n * It initializes the LexicalComposer, loads the initial markdown content (if provided),\n * and uses the OnChangePlugin to trigger updates. The transformer array is memoized\n * to prevent unnecessary re-renders and state resets.\n */\nexport function MarkdownEditor({\n  onChange,\n  onSerializedChange,\n  pluginOptions = {},\n  maxLength = 5000,\n  height = '70vh',\n  onMentionSearch,\n  onImageUpload,\n  onAIGeneration,\n  mentionMenu,\n  mentionMenuItem,\n  onMarkdownChange,\n  initialMarkdown,\n}: {\n  onChange?: (editorState: EditorState) => void\n  onSerializedChange?: (editorSerializedState: SerializedEditorState) => void\n  pluginOptions?: PluginOptions\n  maxLength?: number\n  height?: string\n  showBottomBar?: boolean\n  onMentionSearch?: (trigger: string, query?: string | null) => Promise<any[]>\n  onImageUpload?: (file: File) => Promise<any | { url: string }>\n  onAIGeneration?: (\n    prompt: string,\n    transformType: string\n  ) => Promise<{ text: string; success: boolean; error?: string }>\n  mentionMenu?: React.FC<any>\n  mentionMenuItem?: React.FC<any>\n  onMarkdownChange?: (markdown: string) => void\n  initialMarkdown?: string\n}) {\n  // Memoize transformers so that their reference does not change on every render.\n  const TRANSFORMERS = \n     [\n      MENTION_MARKDOWN_TRANSFORMER,\n      TABLE,\n      HR,\n      IMAGE,\n      EMOJI,\n      EQUATION,\n      TWEET,\n      CHECK_LIST,\n      ...ELEMENT_TRANSFORMERS,\n      ...MULTILINE_ELEMENT_TRANSFORMERS,\n      ...TEXT_FORMAT_TRANSFORMERS,\n      ...TEXT_MATCH_TRANSFORMERS,\n    ]\n\n  \n\n  // If using an externally provided editor state, add it here.\n  let editorState: EditorState | undefined = undefined\n  let editorSerializedState: SerializedEditorState | undefined = undefined\n\n  return (\n    <div\n      className=\"overflow-hidden rounded-lg border bg-background shadow flex flex-col\"\n      style={{ height }}\n    >\n      <LexicalComposer\n        initialConfig={{\n          ...editorConfig,\n          ...(editorState ? { editorState } : {}),\n          ...(editorSerializedState\n            ? { editorState: JSON.stringify(editorSerializedState) }\n            : {}),\n        }}\n      >\n        <TooltipProvider>\n          <SharedAutocompleteContext>\n            <FloatingLinkContext>\n              {initialMarkdown && (\n                <LoadMarkdownContent\n                  initialMarkdown={initialMarkdown}\n                  transformers={TRANSFORMERS}\n                />\n              )}\n              <div className=\"flex flex-col h-full\">\n                <Plugins\n                  maxLength={maxLength}\n                  pluginOptions={pluginOptions}\n                  onMentionSearch={onMentionSearch}\n                  onImageUpload={onImageUpload}\n                  onAIGeneration={onAIGeneration}\n                  mentionMenu={mentionMenu}\n                  mentionMenuItem={mentionMenuItem}\n                />\n              </div>\n              <OnChangePlugin\n                ignoreSelectionChange={true}\n                onChange={(editorState) => {\n               \n                  \n                  onChange?.(editorState)\n                  onSerializedChange?.(editorState.toJSON())\n                  // Convert to Markdown within a read callback.\n                  let markdown = ''\n                  editorState.read(() => {\n                    markdown = $convertToMarkdownString(TRANSFORMERS)\n                  })\n\n\n                  onMarkdownChange?.(markdown)\n                }}\n              />\n            </FloatingLinkContext>\n          </SharedAutocompleteContext>\n        </TooltipProvider>\n      </LexicalComposer>\n    </div>\n  )\n}\n"]}