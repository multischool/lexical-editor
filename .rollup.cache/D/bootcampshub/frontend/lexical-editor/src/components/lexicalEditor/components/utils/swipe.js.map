{"version":3,"file":"swipe.js","sourceRoot":"","sources":["swipe.ts"],"names":[],"mappings":"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","sourcesContent":["type Force = [number, number]\ntype Listener = (force: Force, e: TouchEvent) => void\ntype ElementValues = {\n  start: null | Force\n  listeners: Set<Listener>\n  handleTouchstart: (e: TouchEvent) => void\n  handleTouchend: (e: TouchEvent) => void\n}\n\nconst elements = new WeakMap<HTMLElement, ElementValues>()\n\nfunction readTouch(e: TouchEvent): [number, number] | null {\n  const touch = e.changedTouches[0]\n  if (touch === undefined) {\n    return null\n  }\n  return [touch.clientX, touch.clientY]\n}\n\nfunction addListener(element: HTMLElement, cb: Listener): () => void {\n  let elementValues = elements.get(element)\n  if (elementValues === undefined) {\n    const listeners = new Set<Listener>()\n    const handleTouchstart = (e: TouchEvent) => {\n      if (elementValues !== undefined) {\n        elementValues.start = readTouch(e)\n      }\n    }\n    const handleTouchend = (e: TouchEvent) => {\n      if (elementValues === undefined) {\n        return\n      }\n      const start = elementValues.start\n      if (start === null) {\n        return\n      }\n      const end = readTouch(e)\n      for (const listener of Array.from(listeners)) {\n        if (end !== null) {\n          listener([end[0] - start[0], end[1] - start[1]], e)\n        }\n      }\n    }\n    element.addEventListener('touchstart', handleTouchstart)\n    element.addEventListener('touchend', handleTouchend)\n\n    elementValues = {\n      handleTouchend,\n      handleTouchstart,\n      listeners,\n      start: null,\n    }\n    elements.set(element, elementValues)\n  }\n  elementValues.listeners.add(cb)\n  return () => deleteListener(element, cb)\n}\n\nfunction deleteListener(element: HTMLElement, cb: Listener): void {\n  const elementValues = elements.get(element)\n  if (elementValues === undefined) {\n    return\n  }\n  const listeners = elementValues.listeners\n  listeners.delete(cb)\n  if (listeners.size === 0) {\n    elements.delete(element)\n    element.removeEventListener('touchstart', elementValues.handleTouchstart)\n    element.removeEventListener('touchend', elementValues.handleTouchend)\n  }\n}\n\nexport function addSwipeLeftListener(\n  element: HTMLElement,\n  cb: (_force: number, e: TouchEvent) => void\n) {\n  return addListener(element, (force, e) => {\n    const [x, y] = force\n    if (x < 0 && -x > Math.abs(y)) {\n      cb(x, e)\n    }\n  })\n}\n\nexport function addSwipeRightListener(\n  element: HTMLElement,\n  cb: (_force: number, e: TouchEvent) => void\n) {\n  return addListener(element, (force, e) => {\n    const [x, y] = force\n    if (x > 0 && x > Math.abs(y)) {\n      cb(x, e)\n    }\n  })\n}\n\nexport function addSwipeUpListener(\n  element: HTMLElement,\n  cb: (_force: number, e: TouchEvent) => void\n) {\n  return addListener(element, (force, e) => {\n    const [x, y] = force\n    if (y < 0 && -y > Math.abs(x)) {\n      cb(x, e)\n    }\n  })\n}\n\nexport function addSwipeDownListener(\n  element: HTMLElement,\n  cb: (_force: number, e: TouchEvent) => void\n) {\n  return addListener(element, (force, e) => {\n    const [x, y] = force\n    if (y > 0 && y > Math.abs(x)) {\n      cb(x, e)\n    }\n  })\n}\n"]}