{"version":3,"file":"edit-mode-toggle-plugin.jsx","sourceRoot":"","sources":["edit-mode-toggle-plugin.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAA;AAEZ,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAA;AAEhC,OAAO,EAAE,yBAAyB,EAAE,MAAM,uCAAuC,CAAA;AACjF,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,cAAc,CAAA;AAEnD,OAAO,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAA;AAC3C,OAAO,EACL,OAAO,EACP,cAAc,EACd,cAAc,GACf,MAAM,qBAAqB,CAAA;AAE5B,MAAM,UAAU,oBAAoB;IAClC,MAAM,CAAC,MAAM,CAAC,GAAG,yBAAyB,EAAE,CAAA;IAC5C,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,QAAQ,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAA;IAEvE,OAAO,CACL,CAAC,OAAO,CACN;MAAA,CAAC,cAAc,CAAC,OAAO,CACrB;QAAA,CAAC,MAAM,CACL,OAAO,CAAC,CAAC,OAAO,CAAC,CACjB,OAAO,CAAC,CAAC,GAAG,EAAE;YACZ,MAAM,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAA;YACxC,aAAa,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAA;QACpC,CAAC,CAAC,CACF,KAAK,CAAC,gBAAgB,CACtB,UAAU,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,iBAAiB,CAAC,CAChE,IAAI,CAAC,CAAC,IAAI,CAAC,CACX,SAAS,CAAC,KAAK,CAEf;UAAA,CAAC,UAAU,CAAC,CAAC,CAAC,CACZ,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,EAAG,CAChC,CAAC,CAAC,CAAC,CACF,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,EAAG,CAClC,CACH;QAAA,EAAE,MAAM,CACV;MAAA,EAAE,cAAc,CAChB;MAAA,CAAC,cAAc,CACb;QAAA,CAAC,UAAU,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,WAAW,CAC9C;MAAA,EAAE,cAAc,CAClB;IAAA,EAAE,OAAO,CAAC,CACX,CAAA;AACH,CAAC","sourcesContent":["'use client'\n\nimport { useState } from 'react'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport { LockIcon, UnlockIcon } from 'lucide-react'\n\nimport { Button } from '../../../ui/button'\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from '../../../ui/tooltip'\n\nexport function EditModeTogglePlugin() {\n  const [editor] = useLexicalComposerContext()\n  const [isEditable, setIsEditable] = useState(() => editor.isEditable())\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>\n        <Button\n          variant={'ghost'}\n          onClick={() => {\n            editor.setEditable(!editor.isEditable())\n            setIsEditable(editor.isEditable())\n          }}\n          title=\"Read-Only Mode\"\n          aria-label={`${!isEditable ? 'Unlock' : 'Lock'} read-only mode`}\n          size={'sm'}\n          className=\"p-2\"\n        >\n          {isEditable ? (\n            <LockIcon className=\"size-4\" />\n          ) : (\n            <UnlockIcon className=\"size-4\" />\n          )}\n        </Button>\n      </TooltipTrigger>\n      <TooltipContent>\n        {isEditable ? 'View Only Mode' : 'Edit Mode'}\n      </TooltipContent>\n    </Tooltip>\n  )\n}\n"]}