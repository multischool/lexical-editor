{"version":3,"file":"markdown-toggle-plugin.jsx","sourceRoot":"","sources":["markdown-toggle-plugin.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAA;AAEZ,OAAO,EAAE,WAAW,EAAE,MAAM,OAAO,CAAA;AAEnC,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAA;AAC3C,OAAO,EAAE,eAAe,EAAE,MAAM,eAAe,CAAA;AAC/C,OAAO,EACL,0BAA0B,EAC1B,wBAAwB,GAEzB,MAAM,mBAAmB,CAAA;AAC1B,OAAO,EAAE,yBAAyB,EAAE,MAAM,uCAAuC,CAAA;AACjF,OAAO,EAAE,eAAe,EAAE,MAAM,SAAS,CAAA;AACzC,OAAO,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAA;AAClC,OAAO,EAAE,YAAY,EAAE,MAAM,cAAc,CAAA;AAE3C,OAAO,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAA;AAE3C,MAAM,UAAU,oBAAoB,CAAC,EACnC,gCAAgC,EAChC,YAAY,GAIb;IACC,MAAM,CAAC,MAAM,CAAC,GAAG,yBAAyB,EAAE,CAAA;IAE5C,MAAM,oBAAoB,GAAG,WAAW,CAAC,GAAG,EAAE;QAC5C,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE;YACjB,MAAM,IAAI,GAAG,QAAQ,EAAE,CAAA;YACvB,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAA;YACvC,IAAI,WAAW,CAAC,UAAU,CAAC,IAAI,UAAU,CAAC,WAAW,EAAE,KAAK,UAAU,EAAE,CAAC;gBACvE,0BAA0B,CACxB,UAAU,CAAC,cAAc,EAAE,EAC3B,YAAY,EACZ,SAAS,EAAE,OAAO;gBAClB,gCAAgC,CACjC,CAAA;YACH,CAAC;iBAAM,CAAC;gBACN,MAAM,QAAQ,GAAG,wBAAwB,CACvC,YAAY,EACZ,SAAS,EAAE,MAAM;gBACjB,gCAAgC,CACjC,CAAA;gBACD,MAAM,QAAQ,GAAG,eAAe,CAAC,UAAU,CAAC,CAAA;gBAC5C,QAAQ,CAAC,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAA;gBAC1C,IAAI,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;gBAC7B,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;oBAC1B,QAAQ,CAAC,MAAM,EAAE,CAAA;gBACnB,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAA;IACJ,CAAC,EAAE,CAAC,MAAM,EAAE,gCAAgC,CAAC,CAAC,CAAA;IAE9C,OAAO,CACL,CAAC,MAAM,CACL,OAAO,CAAC,CAAC,OAAO,CAAC,CACjB,OAAO,CAAC,CAAC,oBAAoB,CAAC,CAC9B,KAAK,CAAC,uBAAuB,CAC7B,UAAU,CAAC,uBAAuB,CAClC,IAAI,CAAC,CAAC,IAAI,CAAC,CACX,SAAS,CAAC,KAAK,CAEf;MAAA,CAAC,YAAY,CAAC,SAAS,CAAC,QAAQ,EAClC;IAAA,EAAE,MAAM,CAAC,CACV,CAAA;AACH,CAAC","sourcesContent":["'use client'\n\nimport { useCallback } from 'react'\n\nimport { $isCodeNode } from '@lexical/code'\nimport { $createCodeNode } from '@lexical/code'\nimport {\n  $convertFromMarkdownString,\n  $convertToMarkdownString,\n  Transformer,\n} from '@lexical/markdown'\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport { $createTextNode } from 'lexical'\nimport { $getRoot } from 'lexical'\nimport { FileTextIcon } from 'lucide-react'\n\nimport { Button } from '../../../ui/button'\n\nexport function MarkdownTogglePlugin({\n  shouldPreserveNewLinesInMarkdown,\n  transformers,\n}: {\n  shouldPreserveNewLinesInMarkdown: boolean\n  transformers: Array<Transformer>\n}) {\n  const [editor] = useLexicalComposerContext()\n\n  const handleMarkdownToggle = useCallback(() => {\n    editor.update(() => {\n      const root = $getRoot()\n      const firstChild = root.getFirstChild()\n      if ($isCodeNode(firstChild) && firstChild.getLanguage() === 'markdown') {\n        $convertFromMarkdownString(\n          firstChild.getTextContent(),\n          transformers,\n          undefined, // node\n          shouldPreserveNewLinesInMarkdown\n        )\n      } else {\n        const markdown = $convertToMarkdownString(\n          transformers,\n          undefined, //node\n          shouldPreserveNewLinesInMarkdown\n        )\n        const codeNode = $createCodeNode('markdown')\n        codeNode.append($createTextNode(markdown))\n        root.clear().append(codeNode)\n        if (markdown.length === 0) {\n          codeNode.select()\n        }\n      }\n    })\n  }, [editor, shouldPreserveNewLinesInMarkdown])\n\n  return (\n    <Button\n      variant={'ghost'}\n      onClick={handleMarkdownToggle}\n      title=\"Convert From Markdown\"\n      aria-label=\"Convert from markdown\"\n      size={'sm'}\n      className=\"p-2\"\n    >\n      <FileTextIcon className=\"size-4\" />\n    </Button>\n  )\n}\n"]}