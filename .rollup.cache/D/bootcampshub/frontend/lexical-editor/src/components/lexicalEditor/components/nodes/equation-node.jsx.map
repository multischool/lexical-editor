{"version":3,"file":"equation-node.jsx","sourceRoot":"","sources":["equation-node.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { Suspense, JSX } from 'react'\n\nimport katex from 'katex'\nimport type {\n  DOMConversionMap,\n  DOMConversionOutput,\n  EditorConfig,\n  LexicalNode,\n  NodeKey,\n  SerializedLexicalNode,\n  Spread,\n} from 'lexical'\nimport { $applyNodeReplacement, DOMExportOutput, DecoratorNode } from 'lexical'\n\nconst EquationComponent = React.lazy(() => import('../editor-ui/equation-component'))\n\nexport type SerializedEquationNode = Spread<\n  {\n    equation: string\n    inline: boolean\n  },\n  SerializedLexicalNode\n>\n\nfunction $convertEquationElement(\n  domNode: HTMLElement\n): null | DOMConversionOutput {\n  let equation = domNode.getAttribute('data-lexical-equation')\n  const inline = domNode.getAttribute('data-lexical-inline') === 'true'\n  // Decode the equation from base64\n  equation = atob(equation || '')\n  if (equation) {\n    const node = $createEquationNode(equation, inline)\n    return { node }\n  }\n\n  return null\n}\n\nexport class EquationNode extends DecoratorNode<JSX.Element> {\n  __equation: string\n  __inline: boolean\n\n  static getType(): string {\n    return 'equation'\n  }\n\n  static clone(node: EquationNode): EquationNode {\n    return new EquationNode(node.__equation, node.__inline, node.__key)\n  }\n\n  constructor(equation: string, inline?: boolean, key?: NodeKey) {\n    super(key)\n    this.__equation = equation\n    this.__inline = inline ?? false\n  }\n\n  static importJSON(serializedNode: SerializedEquationNode): EquationNode {\n    const node = $createEquationNode(\n      serializedNode.equation,\n      serializedNode.inline\n    )\n    return node\n  }\n\n  exportJSON(): SerializedEquationNode {\n    return {\n      equation: this.getEquation(),\n      inline: this.__inline,\n      type: 'equation',\n      version: 1,\n    }\n  }\n\n  createDOM(_config: EditorConfig): HTMLElement {\n    const element = document.createElement(this.__inline ? 'span' : 'div')\n    // EquationNodes should implement `user-action:none` in their CSS to avoid issues with deletion on Android.\n    element.className =\n      'editor-equation user-action-none cursor-default focus:ring-2 focus:ring-primary focus:ring-offset-2 inline-block'\n    return element\n  }\n\n  exportDOM(): DOMExportOutput {\n    const element = document.createElement(this.__inline ? 'span' : 'div')\n    // Encode the equation as base64 to avoid issues with special characters\n    const equation = btoa(this.__equation)\n    element.setAttribute('data-lexical-equation', equation)\n    element.setAttribute('data-lexical-inline', `${this.__inline}`)\n    katex.render(this.__equation, element, {\n      displayMode: !this.__inline, // true === block display //\n      errorColor: '#cc0000',\n      output: 'html',\n      strict: 'warn',\n      throwOnError: false,\n      trust: false,\n    })\n    return { element }\n  }\n\n  static importDOM(): DOMConversionMap | null {\n    return {\n      div: (domNode: HTMLElement) => {\n        if (!domNode.hasAttribute('data-lexical-equation')) {\n          return null\n        }\n        return {\n          conversion: $convertEquationElement,\n          priority: 2,\n        }\n      },\n      span: (domNode: HTMLElement) => {\n        if (!domNode.hasAttribute('data-lexical-equation')) {\n          return null\n        }\n        return {\n          conversion: $convertEquationElement,\n          priority: 1,\n        }\n      },\n    }\n  }\n\n  updateDOM(prevNode: EquationNode): boolean {\n    // If the inline property changes, replace the element\n    return this.__inline !== prevNode.__inline\n  }\n\n  getTextContent(): string {\n    return this.__equation\n  }\n\n  getEquation(): string {\n    return this.__equation\n  }\n\n  setEquation(equation: string): void {\n    const writable = this.getWritable()\n    writable.__equation = equation\n  }\n\n  decorate(): JSX.Element {\n    return (\n      <Suspense fallback={null}>\n        <EquationComponent\n          equation={this.__equation}\n          inline={this.__inline}\n          nodeKey={this.__key}\n        />\n      </Suspense>\n    )\n  }\n}\n\nexport function $createEquationNode(\n  equation = '',\n  inline = false\n): EquationNode {\n  const equationNode = new EquationNode(equation, inline)\n  return $applyNodeReplacement(equationNode)\n}\n\nexport function $isEquationNode(\n  node: LexicalNode | null | undefined\n): node is EquationNode {\n  return node instanceof EquationNode\n}\n"]}