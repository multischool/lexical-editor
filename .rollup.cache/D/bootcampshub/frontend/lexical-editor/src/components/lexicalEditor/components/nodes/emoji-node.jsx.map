{"version":3,"file":"emoji-node.jsx","sourceRoot":"","sources":["emoji-node.tsx"],"names":[],"mappings":"AAOA,OAAO,EAAE,qBAAqB,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAA;AASzD,MAAM,OAAO,SAAU,SAAQ,QAAQ;IAGrC,MAAM,CAAC,OAAO;QACZ,OAAO,OAAO,CAAA;IAChB,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,IAAe;QAC1B,OAAO,IAAI,SAAS,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAA;IACjE,CAAC;IAED,YAAY,SAAiB,EAAE,IAAY,EAAE,GAAa;QACxD,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC,CAAA;QAChB,IAAI,CAAC,WAAW,GAAG,SAAS,CAAA;IAC9B,CAAC;IAED,SAAS,CAAC,MAAoB;QAC5B,MAAM,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAA;QAC1C,MAAM,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;QACrC,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAA;QAChC,KAAK,CAAC,SAAS,GAAG,aAAa,CAAA;QAC/B,GAAG,CAAC,WAAW,CAAC,KAAK,CAAC,CAAA;QACtB,OAAO,GAAG,CAAA;IACZ,CAAC;IAED,SAAS,CACP,QAAkB,EAClB,GAAgB,EAChB,MAAoB;QAEpB,MAAM,KAAK,GAAG,GAAG,CAAC,UAAU,CAAA;QAC5B,IAAI,KAAK,KAAK,IAAI,EAAE,CAAC;YACnB,OAAO,IAAI,CAAA;QACb,CAAC;QACD,KAAK,CAAC,SAAS,CAAC,QAAe,EAAE,KAAoB,EAAE,MAAM,CAAC,CAAA;QAC9D,OAAO,KAAK,CAAA;IACd,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,cAAmC;QACnD,MAAM,IAAI,GAAG,gBAAgB,CAAC,cAAc,CAAC,SAAS,EAAE,cAAc,CAAC,IAAI,CAAC,CAAA;QAC5E,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,MAAM,CAAC,CAAA;QACrC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,MAAM,CAAC,CAAA;QACrC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;QACjC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAA;QACnC,OAAO,IAAI,CAAA;IACb,CAAC;IAED,UAAU;QACR,uCACK,KAAK,CAAC,UAAU,EAAE,KACrB,SAAS,EAAE,IAAI,CAAC,YAAY,EAAE,EAC9B,IAAI,EAAE,OAAO,IACd;IACH,CAAC;IAED,YAAY;QACV,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,EAAE,CAAA;QAC7B,OAAO,IAAI,CAAC,WAAW,CAAA;IACzB,CAAC;CACF;AAED,MAAM,UAAU,YAAY,CAC1B,IAAoC;IAEpC,OAAO,IAAI,YAAY,SAAS,CAAA;AAClC,CAAC;AAED,MAAM,UAAU,gBAAgB,CAC9B,SAAiB,EACjB,SAAiB;IAEjB,MAAM,IAAI,GAAG,IAAI,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;IACjE,OAAO,qBAAqB,CAAC,IAAI,CAAC,CAAA;AACpC,CAAC","sourcesContent":["import type {\n  EditorConfig,\n  LexicalNode,\n  NodeKey,\n  SerializedTextNode,\n  Spread,\n} from 'lexical'\nimport { $applyNodeReplacement, TextNode } from 'lexical'\n\nexport type SerializedEmojiNode = Spread<\n  {\n    className: string\n  },\n  SerializedTextNode\n>\n\nexport class EmojiNode extends TextNode {\n  __className: string\n\n  static getType(): string {\n    return 'emoji'\n  }\n\n  static clone(node: EmojiNode): EmojiNode {\n    return new EmojiNode(node.__className, node.__text, node.__key)\n  }\n\n  constructor(className: string, text: string, key?: NodeKey) {\n    super(text, key)\n    this.__className = className\n  }\n\n  createDOM(config: EditorConfig): HTMLElement {\n    const dom = document.createElement('span')\n    const inner = super.createDOM(config)\n    dom.className = this.__className\n    inner.className = 'emoji-inner'\n    dom.appendChild(inner)\n    return dom\n  }\n\n  updateDOM(\n    prevNode: TextNode,\n    dom: HTMLElement,\n    config: EditorConfig\n  ): boolean {\n    const inner = dom.firstChild\n    if (inner === null) {\n      return true\n    }\n    super.updateDOM(prevNode as any, inner as HTMLElement, config)\n    return false\n  }\n\n  static importJSON(serializedNode: SerializedEmojiNode): EmojiNode {\n    const node = $createEmojiNode(serializedNode.className, serializedNode.text)\n    node.setFormat(serializedNode.format)\n    node.setDetail(serializedNode.detail)\n    node.setMode(serializedNode.mode)\n    node.setStyle(serializedNode.style)\n    return node\n  }\n\n  exportJSON(): SerializedEmojiNode {\n    return {\n      ...super.exportJSON(),\n      className: this.getClassName(),\n      type: 'emoji',\n    }\n  }\n\n  getClassName(): string {\n    const self = this.getLatest()\n    return self.__className\n  }\n}\n\nexport function $isEmojiNode(\n  node: LexicalNode | null | undefined\n): node is EmojiNode {\n  return node instanceof EmojiNode\n}\n\nexport function $createEmojiNode(\n  className: string,\n  emojiText: string\n): EmojiNode {\n  const node = new EmojiNode(className, emojiText).setMode('token')\n  return $applyNodeReplacement(node)\n}\n"]}