{"version":3,"file":"useBeautifulMentions.js","sourceRoot":"","sources":["useBeautifulMentions.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,yBAAyB,EAAE,MAAM,uCAAuC,CAAC;AAClF,OAAO,EAAE,WAAW,EAAE,MAAM,OAAO,CAAC;AACpC,OAAO,EAEL,sBAAsB,EAEtB,yBAAyB,EAEzB,uBAAuB,EACvB,uBAAuB,GAGxB,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EAAE,0BAA0B,EAAE,MAAM,iBAAiB,CAAC;AAE7D;;;GAGG;AACH,MAAM,UAAU,oBAAoB;IAClC,MAAM,CAAC,MAAM,CAAC,GAAG,yBAAyB,EAAE,CAAC;IAE7C;;OAEG;IACH,MAAM,aAAa,GAAG,WAAW,CAC/B,CAAC,OAAsB,EAAE,EAAE,CACzB,MAAM,CAAC,eAAe,CAAC,sBAAsB,EAAE,OAAO,CAAC,EACzD,CAAC,MAAM,CAAC,CACT,CAAC;IAEF;;OAEG;IACH,MAAM,cAAc,GAAG,WAAW,CAChC,CAAC,OAAuB,EAAE,EAAE,CAC1B,MAAM,CAAC,eAAe,CAAC,uBAAuB,EAAE,OAAO,CAAC,EAC1D,CAAC,MAAM,CAAC,CACT,CAAC;IAEF;;OAEG;IACH,MAAM,cAAc,GAAG,WAAW,CAChC,CAAC,OAAuB,EAAE,EAAE,CAC1B,MAAM,CAAC,eAAe,CAAC,uBAAuB,EAAE,OAAO,CAAC,EAC1D,CAAC,MAAM,CAAC,CACT,CAAC;IAEF;;OAEG;IACH,MAAM,WAAW,GAAG,WAAW,CAC7B,CAAC,EAAE,KAAK,EAAE,OAAO,EAAe,EAAE,EAAE;QAClC,OAAO,MAAM,CAAC,cAAc,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE;YACvC,MAAM,QAAQ,GAAG,0BAA0B,CAAC,MAAM,CAAC,CAAC;YACpD,IAAI,KAAK,EAAE,CAAC;gBACV,OAAO,QAAQ,CAAC,IAAI,CAClB,CAAC,OAAO,EAAE,EAAE,CACV,OAAO,CAAC,UAAU,EAAE,KAAK,OAAO,IAAI,OAAO,CAAC,QAAQ,EAAE,KAAK,KAAK,CACnE,CAAC;YACJ,CAAC;YACD,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,UAAU,EAAE,KAAK,OAAO,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;IACL,CAAC,EACD,CAAC,MAAM,CAAC,CACT,CAAC;IAEF;;OAEG;IACH,MAAM,eAAe,GAAG,WAAW,CACjC,CAAC,OAAwB,EAAE,EAAE,CAC3B,MAAM,CAAC,eAAe,CAAC,yBAAyB,EAAE,OAAO,CAAC,EAC5D,CAAC,MAAM,CAAC,CACT,CAAC;IAEF;;OAEG;IACH,MAAM,WAAW,GAAG,WAAW,CAAC,GAAG,EAAE;QACnC,OAAO,MAAM,CAAC,cAAc,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CACvC,0BAA0B,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;YAC9C,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;YACnD,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;QAClC,CAAC,CAAC,CACH,CAAC;IACJ,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;IAEb,OAAO;QACL,WAAW;QACX,aAAa;QACb,cAAc;QACd,cAAc;QACd,WAAW;QACX,eAAe;KAChB,CAAC;AACJ,CAAC","sourcesContent":["import { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\nimport { useCallback } from \"react\";\nimport {\n  HasMentions,\n  INSERT_MENTION_COMMAND,\n  InsertMention,\n  OPEN_MENTION_MENU_COMMAND,\n  OpenMentionMenu,\n  REMOVE_MENTIONS_COMMAND,\n  RENAME_MENTIONS_COMMAND,\n  RemoveMentions,\n  RenameMentions,\n} from \"./mention-commands\";\nimport { $findBeautifulMentionNodes } from \"./mention-utils\";\n\n/**\n * Hook that provides access to the BeautifulMentionsPlugin. It allows you to insert,\n * remove and rename mentions from outside the editor.\n */\nexport function useBeautifulMentions() {\n  const [editor] = useLexicalComposerContext();\n\n  /**\n   * Inserts a mention at the current selection.\n   */\n  const insertMention = useCallback(\n    (options: InsertMention) =>\n      editor.dispatchCommand(INSERT_MENTION_COMMAND, options),\n    [editor],\n  );\n\n  /**\n   * Removes all mentions that match the given trigger and an optional value.\n   */\n  const removeMentions = useCallback(\n    (options: RemoveMentions) =>\n      editor.dispatchCommand(REMOVE_MENTIONS_COMMAND, options),\n    [editor],\n  );\n\n  /**\n   * Renames all mentions that match the given trigger and an optional value.\n   */\n  const renameMentions = useCallback(\n    (options: RenameMentions) =>\n      editor.dispatchCommand(RENAME_MENTIONS_COMMAND, options),\n    [editor],\n  );\n\n  /**\n   * Returns `true` if there are mentions that match the given trigger and an optional value.\n   */\n  const hasMentions = useCallback(\n    ({ value, trigger }: HasMentions) => {\n      return editor.getEditorState().read(() => {\n        const mentions = $findBeautifulMentionNodes(editor);\n        if (value) {\n          return mentions.some(\n            (mention) =>\n              mention.getTrigger() === trigger && mention.getValue() === value,\n          );\n        }\n        return mentions.some((mention) => mention.getTrigger() === trigger);\n      });\n    },\n    [editor],\n  );\n\n  /**\n   * Opens the mention menu at the current selection.\n   */\n  const openMentionMenu = useCallback(\n    (options: OpenMentionMenu) =>\n      editor.dispatchCommand(OPEN_MENTION_MENU_COMMAND, options),\n    [editor],\n  );\n\n  /**\n   * Returns all mentions used in the editor.\n   */\n  const getMentions = useCallback(() => {\n    return editor.getEditorState().read(() =>\n      $findBeautifulMentionNodes(editor).map((node) => {\n        const { trigger, value, data } = node.exportJSON();\n        return { trigger, value, data };\n      }),\n    );\n  }, [editor]);\n\n  return {\n    getMentions,\n    insertMention,\n    removeMentions,\n    renameMentions,\n    hasMentions,\n    openMentionMenu,\n  };\n}\n"]}