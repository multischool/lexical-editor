{"version":3,"file":"youtube-node.jsx","sourceRoot":"","sources":["youtube-node.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { JSX } from 'react'\n\nimport { BlockWithAlignableContents } from '@lexical/react/LexicalBlockWithAlignableContents'\nimport {\n  DecoratorBlockNode,\n  SerializedDecoratorBlockNode,\n} from '@lexical/react/LexicalDecoratorBlockNode'\nimport type {\n  DOMConversionMap,\n  DOMConversionOutput,\n  DOMExportOutput,\n  EditorConfig,\n  ElementFormatType,\n  LexicalEditor,\n  LexicalNode,\n  NodeKey,\n  Spread,\n} from 'lexical'\n\ntype YouTubeComponentProps = Readonly<{\n  className: Readonly<{\n    base: string\n    focus: string\n  }>\n  format: ElementFormatType | null\n  nodeKey: NodeKey\n  videoID: string\n}>\n\nfunction YouTubeComponent({\n  className,\n  format,\n  nodeKey,\n  videoID,\n}: YouTubeComponentProps) {\n  return (\n    <BlockWithAlignableContents\n      className={className}\n      format={format}\n      nodeKey={nodeKey}\n    >\n      <iframe\n        width=\"560\"\n        height=\"315\"\n        src={`https://www.youtube-nocookie.com/embed/${videoID}`}\n        frameBorder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen={true}\n        title=\"YouTube video\"\n      />\n    </BlockWithAlignableContents>\n  )\n}\n\nexport type SerializedYouTubeNode = Spread<\n  {\n    videoID: string\n  },\n  SerializedDecoratorBlockNode\n>\n\nfunction $convertYoutubeElement(\n  domNode: HTMLElement\n): null | DOMConversionOutput {\n  const videoID = domNode.getAttribute('data-lexical-youtube')\n  if (videoID) {\n    const node = $createYouTubeNode(videoID)\n    return { node }\n  }\n  return null\n}\n\nexport class YouTubeNode extends DecoratorBlockNode {\n  __id: string\n\n  static getType(): string {\n    return 'youtube'\n  }\n\n  static clone(node: YouTubeNode): YouTubeNode {\n    return new YouTubeNode(node.__id, node.__format, node.__key)\n  }\n\n  static importJSON(serializedNode: SerializedYouTubeNode): YouTubeNode {\n    const node = $createYouTubeNode(serializedNode.videoID)\n    node.setFormat(serializedNode.format)\n    return node\n  }\n\n  exportJSON(): SerializedYouTubeNode {\n    return {\n      ...super.exportJSON(),\n      type: 'youtube',\n      version: 1,\n      videoID: this.__id,\n    }\n  }\n\n  constructor(id: string, format?: ElementFormatType, key?: NodeKey) {\n    super(format, key)\n    this.__id = id\n  }\n\n  exportDOM(): DOMExportOutput {\n    const element = document.createElement('iframe')\n    element.setAttribute('data-lexical-youtube', this.__id)\n    element.setAttribute('width', '560')\n    element.setAttribute('height', '315')\n    element.setAttribute(\n      'src',\n      `https://www.youtube-nocookie.com/embed/${this.__id}`\n    )\n    element.setAttribute('frameborder', '0')\n    element.setAttribute(\n      'allow',\n      'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture'\n    )\n    element.setAttribute('allowfullscreen', 'true')\n    element.setAttribute('title', 'YouTube video')\n    return { element }\n  }\n\n  static importDOM(): DOMConversionMap | null {\n    return {\n      iframe: (domNode: HTMLElement) => {\n        if (!domNode.hasAttribute('data-lexical-youtube')) {\n          return null\n        }\n        return {\n          conversion: $convertYoutubeElement,\n          priority: 1,\n        }\n      },\n    }\n  }\n\n  updateDOM(): false {\n    return false\n  }\n\n  getId(): string {\n    return this.__id\n  }\n\n  getTextContent(\n    _includeInert?: boolean | undefined,\n    _includeDirectionless?: false | undefined\n  ): string {\n    return `https://www.youtube.com/watch?v=${this.__id}`\n  }\n\n  decorate(_editor: LexicalEditor, config: EditorConfig): JSX.Element {\n    const embedBlockTheme = config.theme.embedBlock || {}\n    const className = {\n      base: embedBlockTheme.base || '',\n      focus: embedBlockTheme.focus || '',\n    }\n    return (\n      <YouTubeComponent\n        className={className}\n        format={this.__format}\n        nodeKey={this.getKey()}\n        videoID={this.__id}\n      />\n    )\n  }\n}\n\nexport function $createYouTubeNode(videoID: string): YouTubeNode {\n  return new YouTubeNode(videoID)\n}\n\nexport function $isYouTubeNode(\n  node: YouTubeNode | LexicalNode | null | undefined\n): node is YouTubeNode {\n  return node instanceof YouTubeNode\n}\n"]}