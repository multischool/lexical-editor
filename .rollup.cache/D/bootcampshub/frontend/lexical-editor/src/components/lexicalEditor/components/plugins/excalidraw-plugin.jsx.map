{"version":3,"file":"excalidraw-plugin.jsx","sourceRoot":"","sources":["excalidraw-plugin.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAA;AAEZ;;;;;;GAMG;AACH,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAO,MAAM,OAAO,CAAA;AAEhD,kFAAkF;AAClF,OAAO,EAAE,yBAAyB,EAAE,MAAM,uCAAuC,CAAA;AACjF,OAAO,EAAE,kBAAkB,EAAE,MAAM,gBAAgB,CAAA;AACnD,OAAO,EACL,oBAAoB,EACpB,YAAY,EACZ,mBAAmB,EACnB,uBAAuB,EAEvB,aAAa,GACd,MAAM,SAAS,CAAA;AAEhB,OAAO,EAAE,qBAAqB,EAAE,cAAc,EAAE,MAAM,0BAA0B,CAAA;AAEhF,OAAO,EAAE,eAAe,EAAE,MAAM,+BAA+B,CAAA;AAE/D,MAAM,CAAC,MAAM,yBAAyB,GAAyB,aAAa,CAC1E,2BAA2B,CAC5B,CAAA;AAKD,MAAM,UAAU,gBAAgB;IAC9B,MAAM,CAAC,MAAM,CAAC,GAAG,yBAAyB,EAAE,CAAA;IAC5C,MAAM,CAAC,WAAW,EAAE,YAAY,CAAC,GAAG,QAAQ,CAAU,KAAK,CAAC,CAAA;IAE5D,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC;YACvC,MAAM,IAAI,KAAK,CACb,2DAA2D,CAC5D,CAAA;QACH,CAAC;QAED,OAAO,MAAM,CAAC,eAAe,CAC3B,yBAAyB,EACzB,GAAG,EAAE;YACH,YAAY,CAAC,IAAI,CAAC,CAAA;YAClB,OAAO,IAAI,CAAA;QACb,CAAC,EACD,uBAAuB,CACxB,CAAA;IACH,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAA;IAEZ,MAAM,OAAO,GAAG,GAAG,EAAE;QACnB,YAAY,CAAC,KAAK,CAAC,CAAA;IACrB,CAAC,CAAA;IAED,MAAM,QAAQ,GAAG,GAAG,EAAE;QACpB,YAAY,CAAC,KAAK,CAAC,CAAA;IACrB,CAAC,CAAA;IAED,MAAM,MAAM,GAAG,CACb,QAAmC,EACnC,QAA2B,EAC3B,KAAkB,EAClB,EAAE;QACF,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE;YACjB,MAAM,cAAc,GAAG,qBAAqB,EAAE,CAAA;YAC9C,cAAc,CAAC,OAAO,CACpB,IAAI,CAAC,SAAS,CAAC;gBACb,QAAQ;gBACR,QAAQ;gBACR,KAAK;aACN,CAAC,CACH,CAAA;YACD,YAAY,CAAC,CAAC,cAAc,CAAC,CAAC,CAAA;YAC9B,IAAI,mBAAmB,CAAC,cAAc,CAAC,gBAAgB,EAAE,CAAC,EAAE,CAAC;gBAC3D,kBAAkB,CAAC,cAAc,EAAE,oBAAoB,CAAC,CAAC,SAAS,EAAE,CAAA;YACtE,CAAC;QACH,CAAC,CAAC,CAAA;QACF,YAAY,CAAC,KAAK,CAAC,CAAA;IACrB,CAAC,CAAA;IACD,OAAO,CACL,CAAC,eAAe,CACd,eAAe,CAAC,CAAC,EAAE,CAAC,CACpB,eAAe,CAAC,CAAC,EAAc,CAAC,CAChC,YAAY,CAAC,CAAC,EAAE,CAAC,CACjB,OAAO,CAAC,CAAC,WAAW,CAAC,CACrB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CACnB,OAAO,CAAC,CAAC,OAAO,CAAC,CACjB,MAAM,CAAC,CAAC,MAAM,CAAC,CACf,mBAAmB,CAAC,CAAC,KAAK,CAAC,EAC3B,CACH,CAAA;AACH,CAAC","sourcesContent":["'use client'\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { useEffect, useState, JSX } from 'react'\n\n// import type { AppState, BinaryFiles } from '@excalidraw/excalidraw/types/types'\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport { $wrapNodeInElement } from '@lexical/utils'\nimport {\n  $createParagraphNode,\n  $insertNodes,\n  $isRootOrShadowRoot,\n  COMMAND_PRIORITY_EDITOR,\n  LexicalCommand,\n  createCommand,\n} from 'lexical'\n\nimport { $createExcalidrawNode, ExcalidrawNode } from '../nodes/excalidraw-node'\nimport type { ExcalidrawInitialElements } from '../editor-ui/excalidraw-modal'\nimport { ExcalidrawModal } from '../editor-ui/excalidraw-modal'\n\nexport const INSERT_EXCALIDRAW_COMMAND: LexicalCommand<void> = createCommand(\n  'INSERT_EXCALIDRAW_COMMAND'\n)\n\ntype AppState = any\ntype BinaryFiles = any\n\nexport function ExcalidrawPlugin(): JSX.Element | null {\n  const [editor] = useLexicalComposerContext()\n  const [isModalOpen, setModalOpen] = useState<boolean>(false)\n\n  useEffect(() => {\n    if (!editor.hasNodes([ExcalidrawNode])) {\n      throw new Error(\n        'ExcalidrawPlugin: ExcalidrawNode not registered on editor'\n      )\n    }\n\n    return editor.registerCommand(\n      INSERT_EXCALIDRAW_COMMAND,\n      () => {\n        setModalOpen(true)\n        return true\n      },\n      COMMAND_PRIORITY_EDITOR\n    )\n  }, [editor])\n\n  const onClose = () => {\n    setModalOpen(false)\n  }\n\n  const onDelete = () => {\n    setModalOpen(false)\n  }\n\n  const onSave = (\n    elements: ExcalidrawInitialElements,\n    appState: Partial<AppState>,\n    files: BinaryFiles\n  ) => {\n    editor.update(() => {\n      const excalidrawNode = $createExcalidrawNode()\n      excalidrawNode.setData(\n        JSON.stringify({\n          appState,\n          elements,\n          files,\n        })\n      )\n      $insertNodes([excalidrawNode])\n      if ($isRootOrShadowRoot(excalidrawNode.getParentOrThrow())) {\n        $wrapNodeInElement(excalidrawNode, $createParagraphNode).selectEnd()\n      }\n    })\n    setModalOpen(false)\n  }\n  return (\n    <ExcalidrawModal\n      initialElements={[]}\n      initialAppState={{} as AppState}\n      initialFiles={{}}\n      isShown={isModalOpen}\n      onDelete={onDelete}\n      onClose={onClose}\n      onSave={onSave}\n      closeOnClickOutside={false}\n    />\n  )\n}\n"]}