{"version":3,"file":"simple-diff-with-cursor.js","sourceRoot":"","sources":["simple-diff-with-cursor.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,OAAO,UAAU,oBAAoB,CAC1C,CAAS,EACT,CAAS,EACT,MAAc;IAEd,MAAM,OAAO,GAAG,CAAC,CAAC,MAAM,CAAA;IACxB,MAAM,OAAO,GAAG,CAAC,CAAC,MAAM,CAAA;IACxB,IAAI,IAAI,GAAG,CAAC,CAAA,CAAC,+CAA+C;IAC5D,IAAI,KAAK,GAAG,CAAC,CAAA,CAAC,gDAAgD;IAC9D,8DAA8D;IAC9D,wDAAwD;IACxD,OACE,IAAI,GAAG,OAAO;QACd,IAAI,GAAG,OAAO;QACd,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC;QACnB,IAAI,GAAG,MAAM,EACb,CAAC;QACD,IAAI,EAAE,CAAA;IACR,CAAC;IACD,8DAA8D;IAC9D,OACE,KAAK,GAAG,IAAI,GAAG,OAAO;QACtB,KAAK,GAAG,IAAI,GAAG,OAAO;QACtB,CAAC,CAAC,OAAO,GAAG,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,GAAG,KAAK,GAAG,CAAC,CAAC,EACjD,CAAC;QACD,KAAK,EAAE,CAAA;IACT,CAAC;IACD,4FAA4F;IAC5F,OACE,KAAK,GAAG,IAAI,GAAG,OAAO;QACtB,KAAK,GAAG,IAAI,GAAG,OAAO;QACtB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,EACnB,CAAC;QACD,IAAI,EAAE,CAAA;IACR,CAAC;IACD,OAAO;QACL,KAAK,EAAE,IAAI;QACX,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,GAAG,KAAK,CAAC;QACtC,MAAM,EAAE,OAAO,GAAG,IAAI,GAAG,KAAK;KAC/B,CAAA;AACH,CAAC","sourcesContent":["export default function simpleDiffWithCursor(\n  a: string,\n  b: string,\n  cursor: number\n): { index: number; insert: string; remove: number } {\n  const aLength = a.length\n  const bLength = b.length\n  let left = 0 // number of same characters counting from left\n  let right = 0 // number of same characters counting from right\n  // Iterate left to the right until we find a changed character\n  // First iteration considers the current cursor position\n  while (\n    left < aLength &&\n    left < bLength &&\n    a[left] === b[left] &&\n    left < cursor\n  ) {\n    left++\n  }\n  // Iterate right to the left until we find a changed character\n  while (\n    right + left < aLength &&\n    right + left < bLength &&\n    a[aLength - right - 1] === b[bLength - right - 1]\n  ) {\n    right++\n  }\n  // Try to iterate left further to the right without caring about the current cursor position\n  while (\n    right + left < aLength &&\n    right + left < bLength &&\n    a[left] === b[left]\n  ) {\n    left++\n  }\n  return {\n    index: left,\n    insert: b.slice(left, bLength - right),\n    remove: aLength - left - right,\n  }\n}\n"]}