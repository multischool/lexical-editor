{"version":3,"file":"excalidraw-component.jsx","sourceRoot":"","sources":["excalidraw-component.tsx"],"names":[],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useMemo, useRef, useState, JSX } from 'react'\nimport * as React from 'react'\n\n// import { AppState, BinaryFiles } from '@excalidraw/excalidraw/types/types'\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport { useLexicalEditable } from '@lexical/react/useLexicalEditable'\nimport { useLexicalNodeSelection } from '@lexical/react/useLexicalNodeSelection'\nimport { mergeRegister } from '@lexical/utils'\nimport type { NodeKey } from 'lexical'\nimport {\n  $getNodeByKey,\n  CLICK_COMMAND,\n  COMMAND_PRIORITY_LOW,\n  KEY_BACKSPACE_COMMAND,\n  KEY_DELETE_COMMAND,\n} from 'lexical'\n\nimport { $isExcalidrawNode } from '../nodes/excalidraw-node'\nimport ExcalidrawImage from '../editor-ui/excalidraw-image'\nimport type { ExcalidrawInitialElements } from '../editor-ui/excalidraw-modal'\nimport { ExcalidrawModal } from '../editor-ui/excalidraw-modal'\nimport { ImageResizer } from '../editor-ui/image-resizer'\n\nexport default function ExcalidrawComponent({\n  nodeKey,\n  data,\n  width,\n  height,\n}: {\n  data: string\n  nodeKey: NodeKey\n  width: 'inherit' | number\n  height: 'inherit' | number\n}): JSX.Element {\n  const [editor] = useLexicalComposerContext()\n  const isEditable = useLexicalEditable()\n  const [isModalOpen, setModalOpen] = useState<boolean>(\n    data === '[]' && editor.isEditable()\n  )\n  const imageContainerRef = useRef<HTMLDivElement | null>(null)\n  const buttonRef = useRef<HTMLButtonElement | null>(null)\n  const captionButtonRef = useRef<HTMLButtonElement | null>(null)\n  const [isSelected, setSelected, clearSelection] =\n    useLexicalNodeSelection(nodeKey)\n  const [isResizing, setIsResizing] = useState<boolean>(false)\n\n  const $onDelete = useCallback(\n    (event: KeyboardEvent) => {\n      if (isSelected) {\n        event.preventDefault()\n        editor.update(() => {\n          const node = $getNodeByKey(nodeKey)\n          if (node) {\n            node.remove()\n          }\n        })\n      }\n      return false\n    },\n    [editor, isSelected, nodeKey]\n  )\n\n  useEffect(() => {\n    if (!isEditable) {\n      if (isSelected) {\n        clearSelection()\n      }\n      return\n    }\n    return mergeRegister(\n      editor.registerCommand(\n        CLICK_COMMAND,\n        (event: MouseEvent) => {\n          const buttonElem = buttonRef.current\n          const eventTarget = event.target\n\n          if (isResizing) {\n            return true\n          }\n\n          if (buttonElem !== null && buttonElem.contains(eventTarget as Node)) {\n            if (!event.shiftKey) {\n              clearSelection()\n            }\n            setSelected(!isSelected)\n            if (event.detail > 1) {\n              setModalOpen(true)\n            }\n            return true\n          }\n\n          return false\n        },\n        COMMAND_PRIORITY_LOW\n      ),\n      editor.registerCommand(\n        KEY_DELETE_COMMAND,\n        $onDelete,\n        COMMAND_PRIORITY_LOW\n      ),\n      editor.registerCommand(\n        KEY_BACKSPACE_COMMAND,\n        $onDelete,\n        COMMAND_PRIORITY_LOW\n      )\n    )\n  }, [\n    clearSelection,\n    editor,\n    isSelected,\n    isResizing,\n    $onDelete,\n    setSelected,\n    isEditable,\n  ])\n\n  const deleteNode = useCallback(() => {\n    setModalOpen(false)\n    return editor.update(() => {\n      const node = $getNodeByKey(nodeKey)\n      if (node) {\n        node.remove()\n      }\n    })\n  }, [editor, nodeKey])\n\n  type AppState = any\n  type  BinaryFiles = any\n\n  const setData = (\n    els: ExcalidrawInitialElements,\n    aps: Partial<AppState>,\n    fls: BinaryFiles\n  ) => {\n    return editor.update(() => {\n      const node = $getNodeByKey(nodeKey)\n      if ($isExcalidrawNode(node)) {\n        if ((els && els.length > 0) || Object.keys(fls).length > 0) {\n          node.setData(\n            JSON.stringify({\n              appState: aps,\n              elements: els,\n              files: fls,\n            })\n          )\n        } else {\n          node.remove()\n        }\n      }\n    })\n  }\n\n  const onResizeStart = () => {\n    setIsResizing(true)\n  }\n\n  const onResizeEnd = (\n    nextWidth: 'inherit' | number,\n    nextHeight: 'inherit' | number\n  ) => {\n    // Delay hiding the resize bars for click case\n    setTimeout(() => {\n      setIsResizing(false)\n    }, 200)\n\n    editor.update(() => {\n      const node = $getNodeByKey(nodeKey)\n\n      if ($isExcalidrawNode(node)) {\n        node.setWidth(nextWidth)\n        node.setHeight(nextHeight)\n      }\n    })\n  }\n\n  const openModal = useCallback(() => {\n    setModalOpen(true)\n  }, [])\n\n  const {\n    elements = [],\n    files = {},\n    appState = {},\n  } = useMemo(() => JSON.parse(data), [data])\n\n  const closeModal = useCallback(() => {\n    setModalOpen(false)\n    if (elements.length === 0) {\n      editor.update(() => {\n        const node = $getNodeByKey(nodeKey)\n        if (node) {\n          node.remove()\n        }\n      })\n    }\n  }, [editor, nodeKey, elements.length])\n\n  return (\n    <>\n      {isEditable && isModalOpen && (\n        <ExcalidrawModal\n          initialElements={elements}\n          initialFiles={files}\n          initialAppState={appState}\n          isShown={isModalOpen}\n          onDelete={deleteNode}\n          onClose={closeModal}\n          onSave={(els, aps, fls) => {\n            setData(els, aps, fls)\n            setModalOpen(false)\n          }}\n          closeOnClickOutside={false}\n        />\n      )}\n      {elements.length > 0 && (\n        <button\n          ref={buttonRef}\n          className={`m-0 border-0 bg-transparent p-0 ${isSelected ? 'user-select-none ring-2 ring-primary ring-offset-2' : ''}`}\n        >\n          <ExcalidrawImage\n            imageContainerRef={imageContainerRef}\n            className=\"image\"\n            elements={elements}\n            files={files}\n            appState={appState}\n            width={width}\n            height={height}\n          />\n          {isSelected && isEditable && (\n            <div\n              className=\"image-edit-button\"\n              role=\"button\"\n              tabIndex={0}\n              onMouseDown={(event) => event.preventDefault()}\n              onClick={openModal}\n            />\n          )}\n          {(isSelected || isResizing) && isEditable && (\n            <ImageResizer\n              buttonRef={captionButtonRef}\n              showCaption={true}\n              setShowCaption={() => null}\n              imageRef={imageContainerRef}\n              editor={editor}\n              onResizeStart={onResizeStart}\n              onResizeEnd={onResizeEnd}\n              captionsEnabled={true}\n            />\n          )}\n        </button>\n      )}\n    </>\n  )\n}\n"]}