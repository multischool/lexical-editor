{"version":3,"file":"ZeroWidthPlugin.jsx","sourceRoot":"","sources":["ZeroWidthPlugin.tsx"],"names":[],"mappings":"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","sourcesContent":["import { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\nimport { mergeRegister } from \"@lexical/utils\";\nimport {\n  $getRoot,\n  $getSelection,\n  $isDecoratorNode,\n  $isRangeSelection,\n  $nodesOfType,\n  COMMAND_PRIORITY_HIGH,\n  KEY_DOWN_COMMAND,\n  LineBreakNode,\n  SELECTION_CHANGE_COMMAND,\n} from \"lexical\";\nimport { useEffect } from \"react\";\nimport {\n  $createZeroWidthNode,\n  $isZeroWidthNode,\n  ZeroWidthNode,\n} from \"./ZeroWidthNode\";\n\nexport const ZERO_WIDTH_CHARACTER = \"â€‹\"; // ðŸš¨ contains a zero-width space (U+200B)\n\ninterface ZeroWidthPluginProps {\n  /**\n   * Defines the return value of `getTextContent()`. By default, an empty string to not corrupt\n   * the text content of the editor.\n   *\n   * Note: If other nodes are not at the correct position when inserting via `$insertNodes`,\n   * try to use a non-empty string like \" \" or a zero-width character. But don't forget\n   * to remove these characters when exporting the editor content.\n   *\n   * @default empty string\n   */\n  textContent?: string;\n}\n\n/**\n * This plugin serves as a patch to fix an incorrect cursor position in Safari.\n * It also ensures that the cursor is correctly aligned with the line height in\n * all browsers.\n * {@link https://github.com/facebook/lexical/issues/4487}.\n *\n * @deprecated Use `PlaceholderPlugin` instead. This Plugin will be removed in a future version.\n */\nexport function ZeroWidthPlugin({ textContent }: ZeroWidthPluginProps) {\n  const [editor] = useLexicalComposerContext();\n\n  useEffect(() => {\n    return mergeRegister(\n      editor.registerUpdateListener(() => {\n        // add a zero-width space node at the end if the last node is a decorator node\n        editor.update(\n          () => {\n            const root = $getRoot();\n            const last = root.getLastDescendant();\n            // add ZeroWidthNode at the end of the editor\n            if ($isDecoratorNode(last)) {\n              // eslint-disable-next-line @typescript-eslint/no-deprecated\n              $nodesOfType(ZeroWidthNode).forEach((node) => {\n                node.remove();\n              }); // cleanup\n              last.insertAfter($createZeroWidthNode(textContent));\n            }\n            // add ZeroWidthNode before each line break\n            // eslint-disable-next-line @typescript-eslint/no-deprecated\n            $nodesOfType(LineBreakNode).forEach((node) => {\n              const prev = node.getPreviousSibling();\n              if ($isDecoratorNode(prev)) {\n                node.insertBefore($createZeroWidthNode(textContent));\n              }\n            });\n          },\n          // merge with previous history entry to allow undoing\n          { tag: \"history-merge\" },\n        );\n      }),\n      editor.registerCommand(\n        KEY_DOWN_COMMAND,\n        (event) => {\n          // prevent the unnecessary removal of the zero-width space, since this\n          // would lead to the insertion of another zero-width space and thus break\n          // undo with Ctrl+z\n          if (event.ctrlKey || event.metaKey || event.altKey) {\n            return false;\n          }\n          // remove the zero-width space if the user starts typing\n          const selection = $getSelection();\n          if ($isRangeSelection(selection)) {\n            const node = selection.anchor.getNode();\n            if ($isZeroWidthNode(node)) {\n              node.remove();\n            }\n          }\n          return false;\n        },\n        COMMAND_PRIORITY_HIGH,\n      ),\n      editor.registerCommand(\n        SELECTION_CHANGE_COMMAND,\n        () => {\n          // select the previous node to avoid an error that occurs when the\n          // user tries to insert a node directly after the zero-width space\n          const selection = $getSelection();\n          if ($isRangeSelection(selection) && selection.isCollapsed()) {\n            const node = selection.anchor.getNode();\n            if ($isZeroWidthNode(node)) {\n              node.selectPrevious();\n            }\n          }\n          return false;\n        },\n        COMMAND_PRIORITY_HIGH,\n      ),\n    );\n  }, [editor, textContent]);\n\n  return null;\n}\n"]}