{"version":3,"file":"tweet-node.jsx","sourceRoot":"","sources":["tweet-node.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { useCallback, useEffect, useRef, useState, JSX } from 'react'\n\nimport { BlockWithAlignableContents } from '@lexical/react/LexicalBlockWithAlignableContents'\nimport {\n  DecoratorBlockNode,\n  SerializedDecoratorBlockNode,\n} from '@lexical/react/LexicalDecoratorBlockNode'\nimport type {\n  DOMConversionMap,\n  DOMConversionOutput,\n  DOMExportOutput,\n  EditorConfig,\n  ElementFormatType,\n  LexicalEditor,\n  LexicalNode,\n  NodeKey,\n  Spread,\n} from 'lexical'\n\nconst WIDGET_SCRIPT_URL = 'https://platform.twitter.com/widgets.js'\n\ntype TweetComponentProps = Readonly<{\n  className: Readonly<{\n    base: string\n    focus: string\n  }>\n  format: ElementFormatType | null\n  loadingComponent?: JSX.Element | string\n  nodeKey: NodeKey\n  onError?: (error: string) => void\n  onLoad?: () => void\n  tweetID: string\n}>\n\nfunction $convertTweetElement(\n  domNode: HTMLDivElement\n): DOMConversionOutput | null {\n  const id = domNode.getAttribute('data-lexical-tweet-id')\n  if (id) {\n    const node = $createTweetNode(id)\n    return { node }\n  }\n  return null\n}\n\nlet isTwitterScriptLoading = true\n\nfunction TweetComponent({\n  className,\n  format,\n  loadingComponent,\n  nodeKey,\n  onError,\n  onLoad,\n  tweetID,\n}: TweetComponentProps) {\n  const containerRef = useRef<HTMLDivElement | null>(null)\n\n  const previousTweetIDRef = useRef<string>('')\n  const [isTweetLoading, setIsTweetLoading] = useState(false)\n\n  const createTweet = useCallback(async () => {\n    try {\n      // @ts-expect-error Twitter is attached to the window.\n      await window.twttr.widgets.createTweet(tweetID, containerRef.current)\n\n      setIsTweetLoading(false)\n      isTwitterScriptLoading = false\n\n      if (onLoad) {\n        onLoad()\n      }\n    } catch (error) {\n      if (onError) {\n        onError(String(error))\n      }\n    }\n  }, [onError, onLoad, tweetID])\n\n  useEffect(() => {\n    if (tweetID !== previousTweetIDRef.current) {\n      setIsTweetLoading(true)\n\n      if (isTwitterScriptLoading) {\n        const script = document.createElement('script')\n        script.src = WIDGET_SCRIPT_URL\n        script.async = true\n        document.body?.appendChild(script)\n        script.onload = createTweet\n        if (onError) {\n          script.onerror = onError as OnErrorEventHandler\n        }\n      } else {\n        createTweet()\n      }\n\n      if (previousTweetIDRef) {\n        previousTweetIDRef.current = tweetID\n      }\n    }\n  }, [createTweet, onError, tweetID])\n\n  return (\n    <BlockWithAlignableContents\n      className={className}\n      format={format}\n      nodeKey={nodeKey}\n    >\n      {isTweetLoading ? loadingComponent : null}\n      <div\n        style={{ display: 'inline-block', width: '550px' }}\n        ref={containerRef}\n      />\n    </BlockWithAlignableContents>\n  )\n}\n\nexport type SerializedTweetNode = Spread<\n  {\n    id: string\n  },\n  SerializedDecoratorBlockNode\n>\n\nexport class TweetNode extends DecoratorBlockNode {\n  __id: string\n\n  static getType(): string {\n    return 'tweet'\n  }\n\n  static clone(node: TweetNode): TweetNode {\n    return new TweetNode(node.__id, node.__format, node.__key)\n  }\n\n  static importJSON(serializedNode: SerializedTweetNode): TweetNode {\n    const node = $createTweetNode(serializedNode.id)\n    node.setFormat(serializedNode.format)\n    return node\n  }\n\n  exportJSON(): SerializedTweetNode {\n    return {\n      ...super.exportJSON(),\n      id: this.getId(),\n      type: 'tweet',\n      version: 1,\n    }\n  }\n\n  static importDOM(): DOMConversionMap<HTMLDivElement> | null {\n    return {\n      div: (domNode: HTMLDivElement) => {\n        if (!domNode.hasAttribute('data-lexical-tweet-id')) {\n          return null\n        }\n        return {\n          conversion: $convertTweetElement,\n          priority: 2,\n        }\n      },\n    }\n  }\n\n  exportDOM(): DOMExportOutput {\n    const element = document.createElement('div')\n    element.setAttribute('data-lexical-tweet-id', this.__id)\n    const text = document.createTextNode(this.getTextContent())\n    element.append(text)\n    return { element }\n  }\n\n  constructor(id: string, format?: ElementFormatType, key?: NodeKey) {\n    super(format, key)\n    this.__id = id\n  }\n\n  getId(): string {\n    return this.__id\n  }\n\n  getTextContent(\n    _includeInert?: boolean | undefined,\n    _includeDirectionless?: false | undefined\n  ): string {\n    return `https://x.com/i/web/status/${this.__id}`\n  }\n\n  decorate(editor: LexicalEditor, config: EditorConfig): JSX.Element {\n    const embedBlockTheme = config.theme.embedBlock || {}\n    const className = {\n      base: embedBlockTheme.base || '',\n      focus: embedBlockTheme.focus || '',\n    }\n    return (\n      <TweetComponent\n        className={className}\n        format={this.__format}\n        loadingComponent=\"Loading...\"\n        nodeKey={this.getKey()}\n        tweetID={this.__id}\n      />\n    )\n  }\n}\n\nexport function $createTweetNode(tweetID: string): TweetNode {\n  return new TweetNode(tweetID)\n}\n\nexport function $isTweetNode(\n  node: TweetNode | LexicalNode | null | undefined\n): node is TweetNode {\n  return node instanceof TweetNode\n}\n"]}