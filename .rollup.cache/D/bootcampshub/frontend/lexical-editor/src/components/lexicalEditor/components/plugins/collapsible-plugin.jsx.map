{"version":3,"file":"collapsible-plugin.jsx","sourceRoot":"","sources":["collapsible-plugin.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client'\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { useEffect } from 'react'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport {\n  $findMatchingParent,\n  $insertNodeToNearestRoot,\n  mergeRegister,\n} from '@lexical/utils'\nimport {\n  $createParagraphNode,\n  $getSelection,\n  $isRangeSelection,\n  COMMAND_PRIORITY_LOW,\n  DELETE_CHARACTER_COMMAND,\n  ElementNode,\n  INSERT_PARAGRAPH_COMMAND,\n  KEY_ARROW_DOWN_COMMAND,\n  KEY_ARROW_LEFT_COMMAND,\n  KEY_ARROW_RIGHT_COMMAND,\n  KEY_ARROW_UP_COMMAND,\n  LexicalNode,\n  createCommand,\n} from 'lexical'\n\nimport {\n  $createCollapsibleContainerNode,\n  $isCollapsibleContainerNode,\n  CollapsibleContainerNode,\n} from '../nodes/collapsible-container-node'\nimport {\n  $createCollapsibleContentNode,\n  $isCollapsibleContentNode,\n  CollapsibleContentNode,\n} from '../nodes/collapsible-content-node'\nimport {\n  $createCollapsibleTitleNode,\n  $isCollapsibleTitleNode,\n  CollapsibleTitleNode,\n} from '../nodes/collapsible-title-node'\n\nexport const INSERT_COLLAPSIBLE_COMMAND = createCommand<void>()\n\nexport function CollapsiblePlugin(): null {\n  const [editor] = useLexicalComposerContext()\n\n  useEffect(() => {\n    if (\n      !editor.hasNodes([\n        CollapsibleContainerNode,\n        CollapsibleTitleNode,\n        CollapsibleContentNode,\n      ])\n    ) {\n      throw new Error(\n        'CollapsiblePlugin: CollapsibleContainerNode, CollapsibleTitleNode, or CollapsibleContentNode not registered on editor'\n      )\n    }\n\n    const $onEscapeUp = () => {\n      const selection = $getSelection()\n      if (\n        $isRangeSelection(selection) &&\n        selection.isCollapsed() &&\n        selection.anchor.offset === 0\n      ) {\n        const container = $findMatchingParent(\n          selection.anchor.getNode(),\n          $isCollapsibleContainerNode\n        )\n\n        if ($isCollapsibleContainerNode(container)) {\n          const parent = container.getParent<ElementNode>()\n          if (\n            parent !== null &&\n            parent.getFirstChild<LexicalNode>() === container &&\n            selection.anchor.key ===\n              container.getFirstDescendant<LexicalNode>()?.getKey()\n          ) {\n            container.insertBefore($createParagraphNode())\n          }\n        }\n      }\n\n      return false\n    }\n\n    const $onEscapeDown = () => {\n      const selection = $getSelection()\n      if ($isRangeSelection(selection) && selection.isCollapsed()) {\n        const container = $findMatchingParent(\n          selection.anchor.getNode(),\n          $isCollapsibleContainerNode\n        )\n\n        if ($isCollapsibleContainerNode(container)) {\n          const parent = container.getParent<ElementNode>()\n          if (\n            parent !== null &&\n            parent.getLastChild<LexicalNode>() === container\n          ) {\n            const titleParagraph = container.getFirstDescendant<LexicalNode>()\n            const contentParagraph = container.getLastDescendant<LexicalNode>()\n\n            if (\n              (contentParagraph !== null &&\n                selection.anchor.key === contentParagraph.getKey() &&\n                selection.anchor.offset ===\n                  contentParagraph.getTextContentSize()) ||\n              (titleParagraph !== null &&\n                selection.anchor.key === titleParagraph.getKey() &&\n                selection.anchor.offset === titleParagraph.getTextContentSize())\n            ) {\n              container.insertAfter($createParagraphNode())\n            }\n          }\n        }\n      }\n\n      return false\n    }\n\n    return mergeRegister(\n      // Structure enforcing transformers for each node type. In case nesting structure is not\n      // \"Container > Title + Content\" it'll unwrap nodes and convert it back\n      // to regular content.\n      editor.registerNodeTransform(CollapsibleContentNode, (node) => {\n        const parent = node.getParent<ElementNode>()\n        if (!$isCollapsibleContainerNode(parent)) {\n          const children = node.getChildren<LexicalNode>()\n          for (const child of children) {\n            node.insertBefore(child)\n          }\n          node.remove()\n        }\n      }),\n\n      editor.registerNodeTransform(CollapsibleTitleNode, (node) => {\n        const parent = node.getParent<ElementNode>()\n        if (!$isCollapsibleContainerNode(parent)) {\n          node.replace(\n            $createParagraphNode().append(...node.getChildren<LexicalNode>())\n          )\n          return\n        }\n      }),\n\n      editor.registerNodeTransform(CollapsibleContainerNode, (node) => {\n        const children = node.getChildren<LexicalNode>()\n        if (\n          children.length !== 2 ||\n          !$isCollapsibleTitleNode(children[0]) ||\n          !$isCollapsibleContentNode(children[1])\n        ) {\n          for (const child of children) {\n            node.insertBefore(child)\n          }\n          node.remove()\n        }\n      }),\n\n      // This handles the case when container is collapsed and we delete its previous sibling\n      // into it, it would cause collapsed content deleted (since it's display: none, and selection\n      // swallows it when deletes single char). Instead we expand container, which is although\n      // not perfect, but avoids bigger problem\n      editor.registerCommand(\n        DELETE_CHARACTER_COMMAND,\n        () => {\n          const selection = $getSelection()\n          if (\n            !$isRangeSelection(selection) ||\n            !selection.isCollapsed() ||\n            selection.anchor.offset !== 0\n          ) {\n            return false\n          }\n\n          const anchorNode = selection.anchor.getNode()\n          const topLevelElement = anchorNode.getTopLevelElement()\n          if (topLevelElement === null) {\n            return false\n          }\n\n          const container = topLevelElement.getPreviousSibling<LexicalNode>()\n          if (!$isCollapsibleContainerNode(container) || container.getOpen()) {\n            return false\n          }\n\n          container.setOpen(true)\n          return true\n        },\n        COMMAND_PRIORITY_LOW\n      ),\n\n      // When collapsible is the last child pressing down/right arrow will insert paragraph\n      // below it to allow adding more content. It's similar what $insertBlockNode\n      // (mainly for decorators), except it'll always be possible to continue adding\n      // new content even if trailing paragraph is accidentally deleted\n      editor.registerCommand(\n        KEY_ARROW_DOWN_COMMAND,\n        $onEscapeDown,\n        COMMAND_PRIORITY_LOW\n      ),\n\n      editor.registerCommand(\n        KEY_ARROW_RIGHT_COMMAND,\n        $onEscapeDown,\n        COMMAND_PRIORITY_LOW\n      ),\n\n      // When collapsible is the first child pressing up/left arrow will insert paragraph\n      // above it to allow adding more content. It's similar what $insertBlockNode\n      // (mainly for decorators), except it'll always be possible to continue adding\n      // new content even if leading paragraph is accidentally deleted\n      editor.registerCommand(\n        KEY_ARROW_UP_COMMAND,\n        $onEscapeUp,\n        COMMAND_PRIORITY_LOW\n      ),\n\n      editor.registerCommand(\n        KEY_ARROW_LEFT_COMMAND,\n        $onEscapeUp,\n        COMMAND_PRIORITY_LOW\n      ),\n\n      // Enter goes from Title to Content rather than a new line inside Title\n      editor.registerCommand(\n        INSERT_PARAGRAPH_COMMAND,\n        () => {\n          const selection = $getSelection()\n          if ($isRangeSelection(selection)) {\n            const titleNode = $findMatchingParent(\n              selection.anchor.getNode(),\n              (node) => $isCollapsibleTitleNode(node)\n            )\n\n            if ($isCollapsibleTitleNode(titleNode)) {\n              const container = titleNode.getParent<ElementNode>()\n              if (container && $isCollapsibleContainerNode(container)) {\n                if (!container.getOpen()) {\n                  container.toggleOpen()\n                }\n                titleNode.getNextSibling()?.selectEnd()\n                return true\n              }\n            }\n          }\n\n          return false\n        },\n        COMMAND_PRIORITY_LOW\n      ),\n      editor.registerCommand(\n        INSERT_COLLAPSIBLE_COMMAND,\n        () => {\n          editor.update(() => {\n            const title = $createCollapsibleTitleNode()\n            const paragraph = $createParagraphNode()\n            $insertNodeToNearestRoot(\n              $createCollapsibleContainerNode(true).append(\n                title.append(paragraph),\n                $createCollapsibleContentNode().append($createParagraphNode())\n              )\n            )\n            paragraph.select()\n          })\n          return true\n        },\n        COMMAND_PRIORITY_LOW\n      )\n    )\n  }, [editor])\n\n  return null\n}\n"]}