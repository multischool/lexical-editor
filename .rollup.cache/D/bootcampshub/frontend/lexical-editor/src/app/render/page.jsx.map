{"version":3,"file":"page.jsx","sourceRoot":"","sources":["page.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAA;AACZ,OAAO,mBAAmB,MAAM,kDAAkD,CAAC;AACnF,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAEnD,IAAI,SAAS,GAAG,KAAK,CAAC,CAAC,gEAAgE;AACvF,mEAAmE;AACnE,MAAM,iBAAiB,GAAG,GAAG,EAAE;IAC3B,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC7C,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;IACzC,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,QAAQ,CAAM,IAAI,CAAC,CAAC;IAElD,SAAS,CAAC,GAAG,EAAE;QACX,0DAA0D;QAC1D,MAAM,YAAY,GAAG,KAAK,IAAI,EAAE;YAC5B,IAAI,CAAC;gBACD,UAAU,CAAC,IAAI,CAAC,CAAC;gBAEjB,mDAAmD;gBACnD,6DAA6D;gBAC7D,sCAAsC;gBAEtC,sDAAsD;gBACtD,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;gBAExD,yDAAyD;gBACzD,MAAM,UAAU,GAAG;oBACf,MAAM,EAAE;wBACJ,UAAU,EAAE;4BACR;gCACI,UAAU,EAAE;oCACR;wCACI,UAAU,EAAE;4CACR;gDACI,QAAQ,EAAE,CAAC;gDACX,QAAQ,EAAE,CAAC;gDACX,MAAM,EAAE,QAAQ;gDAChB,OAAO,EAAE,EAAE;gDACX,MAAM,EAAE,WAAW;gDACnB,MAAM,EAAE,MAAM;gDACd,SAAS,EAAE,CAAC;6CACf;yCACJ;wCACD,WAAW,EAAE,KAAK;wCAClB,QAAQ,EAAE,EAAE;wCACZ,QAAQ,EAAE,CAAC;wCACX,MAAM,EAAE,MAAM;wCACd,SAAS,EAAE,CAAC;wCACZ,KAAK,EAAE,YAAY;wCACnB,QAAQ,EAAE,IAAI;wCACd,OAAO,EAAE,IAAI;wCACb,KAAK,EAAE,sBAAsB;qCAChC;iCACJ;gCACD,WAAW,EAAE,KAAK;gCAClB,QAAQ,EAAE,EAAE;gCACZ,QAAQ,EAAE,CAAC;gCACX,MAAM,EAAE,WAAW;gCACnB,SAAS,EAAE,CAAC;gCACZ,YAAY,EAAE,CAAC;gCACf,WAAW,EAAE,EAAE;6BAClB;4BACD;gCACI,MAAM,EAAE,YAAY;gCACpB,SAAS,EAAE,CAAC;6BACf;4BACD;gCACI,UAAU,EAAE;oCACR;wCACI,QAAQ,EAAE,CAAC;wCACX,QAAQ,EAAE,CAAC;wCACX,MAAM,EAAE,QAAQ;wCAChB,OAAO,EAAE,uBAAuB;wCAChC,MAAM,EAAE,GAAG;wCACX,MAAM,EAAE,MAAM;wCACd,SAAS,EAAE,CAAC;qCACf;oCACD;wCACI,QAAQ,EAAE,CAAC;wCACX,QAAQ,EAAE,CAAC;wCACX,MAAM,EAAE,QAAQ;wCAChB,OAAO,EAAE,iDAAiD;wCAC1D,MAAM,EAAE,OAAO;wCACf,MAAM,EAAE,MAAM;wCACd,SAAS,EAAE,CAAC;qCACf;iCACJ;gCACD,WAAW,EAAE,KAAK;gCAClB,QAAQ,EAAE,EAAE;gCACZ,QAAQ,EAAE,CAAC;gCACX,MAAM,EAAE,WAAW;gCACnB,SAAS,EAAE,CAAC;gCACZ,WAAW,EAAE,uBAAuB;gCACpC,YAAY,EAAE,CAAC;6BAClB;4BACD;gCACI,MAAM,EAAE,gBAAgB;gCACxB,SAAS,EAAE,CAAC;6BACf;4BACD;gCACI,UAAU,EAAE,EAAE;gCACd,WAAW,EAAE,IAAI;gCACjB,QAAQ,EAAE,EAAE;gCACZ,QAAQ,EAAE,CAAC;gCACX,MAAM,EAAE,WAAW;gCACnB,SAAS,EAAE,CAAC;gCACZ,YAAY,EAAE,CAAC;gCACf,WAAW,EAAE,EAAE;6BAClB;yBACJ;wBACD,WAAW,EAAE,KAAK;wBAClB,QAAQ,EAAE,EAAE;wBACZ,QAAQ,EAAE,CAAC;wBACX,MAAM,EAAE,MAAM;wBACd,SAAS,EAAE,CAAC;wBACZ,WAAW,EAAE,uBAAuB;qBACvC;iBACJ,CAAA;gBACD,UAAU,CAAC,UAAU,CAAC,CAAC;gBACvB,QAAQ,CAAC,IAAI,CAAC,CAAC;YACnB,CAAC;YAAC,OAAO,GAAQ,EAAE,CAAC;gBAChB,OAAO,CAAC,KAAK,CAAC,yBAAyB,EAAE,GAAG,CAAC,CAAC;gBAC9C,QAAQ,CAAC,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,OAAO,CAAC,CAAC;YAC3B,CAAC;oBAAS,CAAC;gBACP,UAAU,CAAC,KAAK,CAAC,CAAC;YACtB,CAAC;QACL,CAAC,CAAC;QAEF,IAAI,SAAS,EAAE,CAAC;YACZ,YAAY,EAAE,CAAC;QACnB,CAAC;IACL,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;IAEhB,IAAI,OAAO,EAAE,CAAC;QACV,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,4CAA4C,CAAC,kBAAkB,EAAE,GAAG,CAAC,CAAC;IAChG,CAAC;IAED,IAAI,KAAK,EAAE,CAAC;QACR,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,kBAAkB,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC;IAClE,CAAC;IAED,IAAI,CAAC,OAAO,EAAE,CAAC;QACX,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;IACvD,CAAC;IAED,OAAO,CACH,CAAC,GAAG,CAAC,SAAS,CAAC,sCAAsC,CACjD;YAAA,CAAC,mBAAmB,CAChB,YAAY,CAAC,CAAC,OAAO,CAAC,CACtB,SAAS,CAAC,kBAAkB,CAC5B,OAAO,EAEf;QAAA,EAAE,GAAG,CAAC,CACT,CAAC;AACN,CAAC,CAAC;AAEF,eAAe,iBAAiB,CAAC","sourcesContent":["\"use client\"\r\nimport LexicalJsonRenderer from '@/components/lexicalEditor/renderer/JsonRenderer';\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nlet contentId = '123'; // Example content ID, replace with actual ID from your database\r\n// Example component to fetch and render Lexical JSON from database\r\nconst DBContentRenderer = () => {\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [content, setContent] = useState<any>(null);\r\n\r\n    useEffect(() => {\r\n        // Mock API call (replace with your actual database fetch)\r\n        const fetchContent = async () => {\r\n            try {\r\n                setLoading(true);\r\n\r\n                // In a real app, this would be a fetch to your API\r\n                // const response = await fetch(`/api/content/${contentId}`);\r\n                // const data = await response.json();\r\n\r\n                // For demo, simulate API delay and return sample data\r\n                await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n                // Sample Lexical JSON that would come from your database\r\n                const sampleData = {\r\n                    \"root\": {\r\n                        \"children\": [\r\n                            {\r\n                                \"children\": [\r\n                                    {\r\n                                        \"children\": [\r\n                                            {\r\n                                                \"detail\": 0,\r\n                                                \"format\": 0,\r\n                                                \"mode\": \"normal\",\r\n                                                \"style\": \"\",\r\n                                                \"text\": \"sdfsdffdg\",\r\n                                                \"type\": \"text\",\r\n                                                \"version\": 1\r\n                                            }\r\n                                        ],\r\n                                        \"direction\": \"ltr\",\r\n                                        \"format\": \"\",\r\n                                        \"indent\": 0,\r\n                                        \"type\": \"link\",\r\n                                        \"version\": 1,\r\n                                        \"rel\": \"noreferrer\",\r\n                                        \"target\": null,\r\n                                        \"title\": null,\r\n                                        \"url\": \"https://drghrthy.com\"\r\n                                    }\r\n                                ],\r\n                                \"direction\": \"ltr\",\r\n                                \"format\": \"\",\r\n                                \"indent\": 0,\r\n                                \"type\": \"paragraph\",\r\n                                \"version\": 1,\r\n                                \"textFormat\": 0,\r\n                                \"textStyle\": \"\"\r\n                            },\r\n                            {\r\n                                \"type\": \"page-break\",\r\n                                \"version\": 1\r\n                            },\r\n                            {\r\n                                \"children\": [\r\n                                    {\r\n                                        \"detail\": 0,\r\n                                        \"format\": 0,\r\n                                        \"mode\": \"normal\",\r\n                                        \"style\": \"font-family: Verdana;\",\r\n                                        \"text\": \"f\",\r\n                                        \"type\": \"text\",\r\n                                        \"version\": 1\r\n                                    },\r\n                                    {\r\n                                        \"detail\": 0,\r\n                                        \"format\": 0,\r\n                                        \"mode\": \"normal\",\r\n                                        \"style\": \"background-color: #942b2b;font-family: Verdana;\",\r\n                                        \"text\": \"dgdfg\",\r\n                                        \"type\": \"text\",\r\n                                        \"version\": 1\r\n                                    }\r\n                                ],\r\n                                \"direction\": \"ltr\",\r\n                                \"format\": \"\",\r\n                                \"indent\": 0,\r\n                                \"type\": \"paragraph\",\r\n                                \"version\": 1,\r\n                                \"textStyle\": \"font-family: Verdana;\",\r\n                                \"textFormat\": 0\r\n                            },\r\n                            {\r\n                                \"type\": \"horizontalrule\",\r\n                                \"version\": 1\r\n                            },\r\n                            {\r\n                                \"children\": [],\r\n                                \"direction\": null,\r\n                                \"format\": \"\",\r\n                                \"indent\": 0,\r\n                                \"type\": \"paragraph\",\r\n                                \"version\": 1,\r\n                                \"textFormat\": 0,\r\n                                \"textStyle\": \"\"\r\n                            }\r\n                        ],\r\n                        \"direction\": \"ltr\",\r\n                        \"format\": \"\",\r\n                        \"indent\": 0,\r\n                        \"type\": \"root\",\r\n                        \"version\": 1,\r\n                        \"textStyle\": \"font-family: Verdana;\"\r\n                    }\r\n                }\r\n                setContent(sampleData);\r\n                setError(null);\r\n            } catch (err: any) {\r\n                console.error('Error fetching content:', err);\r\n                setError(err?.message);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        if (contentId) {\r\n            fetchContent();\r\n        }\r\n    }, [contentId]);\r\n\r\n    if (loading) {\r\n        return <div className=\"p-4 animate-pulse bg-gray-100 h-32 rounded\">Loading content...</div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div className=\"p-4 text-red-500\">Error: {error}</div>;\r\n    }\r\n\r\n    if (!content) {\r\n        return <div className=\"p-4\">No content found</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"border-l-4 border-blue-500 pl-4 py-2\">\r\n            <LexicalJsonRenderer\r\n                lexicalState={content}\r\n                className=\"prose max-w-none\"\r\n                showTOC\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DBContentRenderer;"]}