{"version":3,"file":"page.jsx","sourceRoot":"","sources":["page.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client'\n\nimport { useState } from 'react'\nimport { SerializedEditorState } from 'lexical'\nimport { MarkdownEditor, PluginOptions } from '@/components/lexicalEditor/markdown/editor'\nimport axios from 'axios'\nimport { MentionMenu, MentionMenuItem } from '@/components/lexicalEditor/components/editor-ui/MentionMenu'\n\n// Initial markdown content\nconst initialMarkdown = '# Hello, welcome to the powerful editor!\\n\\nThis is a markdown-based editor. You can use **bold**, *italic*, @[shimul](1) and other markdown features.\\n\\n- List item 1\\n- List item 2'\n\nexport default function MinimalEditor() {\n  // Store actual markdown content - this is what you'll use in your app\n  const [markdownContent, setMarkdownContent] = useState<string>(initialMarkdown)\n\n  // Define a minimal set of toolbar options\n  const pluginOptions: PluginOptions = {\n    // Main plugin options\n    history: true,\n    autoFocus: true,\n    richText: true,\n    checkList: true,\n    horizontalRule: true,\n    table: true,\n    list: true,\n    tabIndentation: true,\n    draggableBlock: true,\n    images: true,\n    codeHighlight: true,\n    autoLink: true,\n    link: true,\n    componentPicker: true,\n    contextMenu: true,\n    dragDropPaste: true,\n    emojiPicker: true,\n    floatingLinkEditor: true,\n    floatingTextFormat: true,\n    maxIndentLevel: true,\n    beautifulMentions: true,\n    showToolbar: true,\n    showBottomBar: true,\n\n    // Toolbar-specific options\n    toolbar: {\n      history: true,\n      blockFormat: true,\n      codeLanguage: true,\n      fontFormat: {\n        bold: true,\n        italic: true,\n        underline: true,\n        strikethrough: true,\n      },\n      link: true,\n      clearFormatting: true,\n      blockInsert: {\n        horizontalRule: true,\n        image: true,\n        table: true,\n      }\n    },\n\n    // Action bar specific options\n    actionBar: {\n      maxLength: true,\n      characterLimit: true,\n      counter: true,\n      speechToText: true,\n      editModeToggle: true,\n      clearEditor: true,\n      treeView: true,\n    }\n  };\n\n  // Custom image upload handler\n  const handleImageUpload = async (file: File) => {\n    console.log(`Uploading image: ${file.name}`);\n\n    // Demo implementation\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({\n          url: URL.createObjectURL(file)\n        });\n      }, 1000);\n    });\n  };\n\n  // Handle AI text generation\n  const handleAIGeneration = async (prompt: string, transformType: string) => {\n    console.log(`AI Generation request: ${transformType}, prompt: ${prompt}`);\n\n    // Example implementation - replace with your actual API call\n    try {\n      const response = await axios.post(\n        'https://staging-api.bootcampshub.ai/api/organization/integration/generate-text',\n        { prompt },\n        {\n          headers: {\n            'authorization': 'Bearer YOUR_TOKEN',\n            'branch': 'YOUR_BRANCH_ID'\n          }\n        }\n      )\n\n      const data = await response.data;\n\n      if (data.success) {\n        return { text: data.text, success: true };\n      } else {\n        console.error('AI generation failed:', data.error);\n        return { text: '', success: false, error: data.error };\n      }\n    } catch (error) {\n      console.error('Error calling AI generation API:', error);\n      return { text: '', success: false, error: 'Failed to connect to AI service' };\n    }\n  };\n\n  // Custom mention search handler\n  const handleMentionSearch = async (trigger: string, query?: string | null) => {\n    console.log(`Searching for mentions with trigger: ${trigger}, query: ${query}`);\n\n    // You can customize this to fetch from your own API\n    const searchQuery = query || '';\n    const response = await fetch(\n      `https://jsonplaceholder.typicode.com/users?trigger=${trigger}&query=${searchQuery}`\n    );\n    const data = await response.json();\n\n    return data?.map((x: { name: string; id: string | number, avatar: string }) => ({\n      value: x?.name,\n      id: String(x?.id),\n      avatar: x?.avatar || `https://placehold.co/400`,\n    }));\n  };\n\n  // Function to save markdown to your backend or elsewhere\n  const saveMarkdown = () => {\n    console.log('Saving markdown content:', markdownContent);\n    // Here you would implement your save functionality\n    // e.g., saveToDatabase(markdownContent);\n  };\n\n  return (\n    <div className=\"flex flex-col h-screen\">\n      <div className=\"flex-1\">\n        <MarkdownEditor\n          height=\"100%\"\n          initialMarkdown={markdownContent}\n          onMarkdownChange={(markdown) => setMarkdownContent(markdown)}\n          pluginOptions={pluginOptions}\n          maxLength={50000}\n          onImageUpload={handleImageUpload}\n          onAIGeneration={handleAIGeneration}\n          onMentionSearch={handleMentionSearch}\n          mentionMenu={MentionMenu}\n          mentionMenuItem={MentionMenuItem}\n        />\n      </div>\n\n\n    </div>\n  )\n}"]}