{"version":3,"file":"LexicalHashtag.dev.mjs.js","sources":["../../../../node_modules/@lexical/hashtag/LexicalHashtag.dev.mjs"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { addClassNamesToElement } from '@lexical/utils';\nimport { TextNode, $applyNodeReplacement } from 'lexical';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n/** @noInheritDoc */\nclass HashtagNode extends TextNode {\n  static getType() {\n    return 'hashtag';\n  }\n  static clone(node) {\n    return new HashtagNode(node.__text, node.__key);\n  }\n  createDOM(config) {\n    const element = super.createDOM(config);\n    addClassNamesToElement(element, config.theme.hashtag);\n    return element;\n  }\n  static importJSON(serializedNode) {\n    return $createHashtagNode().updateFromJSON(serializedNode);\n  }\n  canInsertTextBefore() {\n    return false;\n  }\n  isTextEntity() {\n    return true;\n  }\n}\n\n/**\n * Generates a HashtagNode, which is a string following the format of a # followed by some text, eg. #lexical.\n * @param text - The text used inside the HashtagNode.\n * @returns - The HashtagNode with the embedded text.\n */\nfunction $createHashtagNode(text = '') {\n  return $applyNodeReplacement(new HashtagNode(text));\n}\n\n/**\n * Determines if node is a HashtagNode.\n * @param node - The node to be checked.\n * @returns true if node is a HashtagNode, false otherwise.\n */\nfunction $isHashtagNode(node) {\n  return node instanceof HashtagNode;\n}\n\nexport { $createHashtagNode, $isHashtagNode, HashtagNode };\n"],"names":["HashtagNode","TextNode","getType","clone","node","__text","__key","createDOM","config","element","super","addClassNamesToElement","theme","hashtag","importJSON","serializedNode","$createHashtagNode","updateFromJSON","canInsertTextBefore","isTextEntity","text","$applyNodeReplacement","$isHashtagNode"],"mappings":"sHAqBA,MAAMA,UAAoBC,EACxB,cAAOC,GACL,MAAO,SACR,CACD,YAAOC,CAAMC,GACX,OAAO,IAAIJ,EAAYI,EAAKC,OAAQD,EAAKE,MAC1C,CACD,SAAAC,CAAUC,GACR,MAAMC,EAAUC,MAAMH,UAAUC,GAEhC,OADAG,EAAuBF,EAASD,EAAOI,MAAMC,SACtCJ,CACR,CACD,iBAAOK,CAAWC,GAChB,OAAOC,IAAqBC,eAAeF,EAC5C,CACD,mBAAAG,GACE,OAAO,CACR,CACD,YAAAC,GACE,OAAO,CACR,EAQH,SAASH,EAAmBI,EAAO,IACjC,OAAOC,EAAsB,IAAIrB,EAAYoB,GAC/C,CAOA,SAASE,EAAelB,GACtB,OAAOA,aAAgBJ,CACzB"}