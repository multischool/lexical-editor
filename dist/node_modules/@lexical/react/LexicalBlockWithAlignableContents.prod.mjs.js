import{useLexicalComposerContext as e}from"./LexicalComposerContext.mjs.js";import{$isDecoratorBlockNode as t}from"./LexicalDecoratorBlockNode.mjs.js";import{useLexicalNodeSelection as o}from"./useLexicalNodeSelection.mjs.js";import{mergeRegister as r,$getNearestBlockElementAncestorOrThrow as s}from"@lexical/utils";import{FORMAT_ELEMENT_COMMAND as i,$getSelection as m,$isNodeSelection as n,$getNodeByKey as l,$isRangeSelection as a,COMMAND_PRIORITY_LOW as c,CLICK_COMMAND as f}from"lexical";import{useRef as u,useEffect as j}from"react";import"../../react/jsx-runtime.js";import{j as p}from"../../../_virtual/jsx-runtime.js";function x({children:x,format:d,nodeKey:g,className:C}){const[N]=e(),[h,v,y]=o(g),B=u(null);return j((()=>r(N.registerCommand(i,(e=>{if(h){const o=m();if(n(o)){const o=l(g);t(o)&&o.setFormat(e)}else if(a(o)){const r=o.getNodes();for(const o of r)t(o)?o.setFormat(e):s(o).setFormat(e)}return!0}return!1}),c),N.registerCommand(f,(e=>e.target===B.current&&(e.preventDefault(),e.shiftKey||y(),v(!h),!0)),c))),[y,N,h,g,v]),p.exports.jsx("div",{className:[C.base,h?C.focus:null].filter(Boolean).join(" "),ref:B,style:{textAlign:d||void 0},children:x})}export{x as BlockWithAlignableContents};
//# sourceMappingURL=LexicalBlockWithAlignableContents.prod.mjs.js.map
