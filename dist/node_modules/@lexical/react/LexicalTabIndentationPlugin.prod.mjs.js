import{useLexicalComposerContext as t}from"./LexicalComposerContext.mjs.js";import{mergeRegister as n,$filter as e,$getNearestBlockElementAncestorOrThrow as r}from"@lexical/utils";import{KEY_TAB_COMMAND as o,$getSelection as i,$isRangeSelection as s,$isBlockElementNode as a,$createRangeSelection as c,$normalizeSelection__EXPERIMENTAL as m,OUTDENT_CONTENT_COMMAND as u,INDENT_CONTENT_COMMAND as f,INSERT_TAB_COMMAND as l,COMMAND_PRIORITY_EDITOR as d,COMMAND_PRIORITY_CRITICAL as g}from"lexical";import{useEffect as p}from"react";function h(t,p){return n(t.registerCommand(o,(n=>{const o=i();if(!s(o))return!1;n.preventDefault();const d=function(t){const n=t.getNodes();if(e(n,(t=>a(t)&&t.canIndent()?t:null)).length>0)return!0;const o=t.anchor,i=t.focus,s=i.isBefore(o)?i:o,u=s.getNode(),f=r(u);if(f.canIndent()){const t=f.getKey();let n=c();if(n.anchor.set(t,0,"element"),n.focus.set(t,0,"element"),n=m(n),n.anchor.is(s))return!0}return!1}(o)?n.shiftKey?u:f:l;return t.dispatchCommand(d,void 0)}),d),t.registerCommand(f,(()=>{if(null==p)return!1;const t=i();if(!s(t))return!1;const n=t.getNodes().map((t=>r(t).getIndent()));return Math.max(...n)+1>=p}),g))}function x({maxIndent:n}){const[e]=t();return p((()=>h(e,n)),[e,n]),null}export{x as TabIndentationPlugin,h as registerTabIndentation};
//# sourceMappingURL=LexicalTabIndentationPlugin.prod.mjs.js.map
