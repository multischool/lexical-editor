{"version":3,"file":"LexicalTabIndentationPlugin.dev.mjs.js","sources":["../../../../node_modules/@lexical/react/LexicalTabIndentationPlugin.dev.mjs"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { mergeRegister, $getNearestBlockElementAncestorOrThrow, $filter } from '@lexical/utils';\nimport { KEY_TAB_COMMAND, $getSelection, $isRangeSelection, OUTDENT_CONTENT_COMMAND, INDENT_CONTENT_COMMAND, INSERT_TAB_COMMAND, COMMAND_PRIORITY_EDITOR, COMMAND_PRIORITY_CRITICAL, $isBlockElementNode, $createRangeSelection, $normalizeSelection__EXPERIMENTAL } from 'lexical';\nimport { useEffect } from 'react';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction $indentOverTab(selection) {\n  // const handled = new Set();\n  const nodes = selection.getNodes();\n  const canIndentBlockNodes = $filter(nodes, node => {\n    if ($isBlockElementNode(node) && node.canIndent()) {\n      return node;\n    }\n    return null;\n  });\n  // 1. If selection spans across canIndent block nodes: indent\n  if (canIndentBlockNodes.length > 0) {\n    return true;\n  }\n  // 2. If first (anchor/focus) is at block start: indent\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const first = focus.isBefore(anchor) ? focus : anchor;\n  const firstNode = first.getNode();\n  const firstBlock = $getNearestBlockElementAncestorOrThrow(firstNode);\n  if (firstBlock.canIndent()) {\n    const firstBlockKey = firstBlock.getKey();\n    let selectionAtStart = $createRangeSelection();\n    selectionAtStart.anchor.set(firstBlockKey, 0, 'element');\n    selectionAtStart.focus.set(firstBlockKey, 0, 'element');\n    selectionAtStart = $normalizeSelection__EXPERIMENTAL(selectionAtStart);\n    if (selectionAtStart.anchor.is(first)) {\n      return true;\n    }\n  }\n  // 3. Else: tab\n  return false;\n}\nfunction registerTabIndentation(editor, maxIndent) {\n  return mergeRegister(editor.registerCommand(KEY_TAB_COMMAND, event => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    event.preventDefault();\n    const command = $indentOverTab(selection) ? event.shiftKey ? OUTDENT_CONTENT_COMMAND : INDENT_CONTENT_COMMAND : INSERT_TAB_COMMAND;\n    return editor.dispatchCommand(command, undefined);\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(INDENT_CONTENT_COMMAND, () => {\n    if (maxIndent == null) {\n      return false;\n    }\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    const indents = selection.getNodes().map(node => $getNearestBlockElementAncestorOrThrow(node).getIndent());\n    return Math.max(...indents) + 1 >= maxIndent;\n  }, COMMAND_PRIORITY_CRITICAL));\n}\n\n/**\n * This plugin adds the ability to indent content using the tab key. Generally, we don't\n * recommend using this plugin as it could negatively affect acessibility for keyboard\n * users, causing focus to become trapped within the editor.\n */\nfunction TabIndentationPlugin({\n  maxIndent\n}) {\n  const [editor] = useLexicalComposerContext();\n  useEffect(() => {\n    return registerTabIndentation(editor, maxIndent);\n  }, [editor, maxIndent]);\n  return null;\n}\n\nexport { TabIndentationPlugin, registerTabIndentation };\n"],"names":["registerTabIndentation","editor","maxIndent","mergeRegister","registerCommand","KEY_TAB_COMMAND","event","selection","$getSelection","$isRangeSelection","preventDefault","command","nodes","getNodes","$filter","node","$isBlockElementNode","canIndent","length","anchor","focus","first","isBefore","firstNode","getNode","firstBlock","$getNearestBlockElementAncestorOrThrow","firstBlockKey","getKey","selectionAtStart","$createRangeSelection","set","$normalizeSelection__EXPERIMENTAL","is","$indentOverTab","shiftKey","OUTDENT_CONTENT_COMMAND","INDENT_CONTENT_COMMAND","INSERT_TAB_COMMAND","dispatchCommand","undefined","COMMAND_PRIORITY_EDITOR","indents","map","getIndent","Math","max","COMMAND_PRIORITY_CRITICAL","TabIndentationPlugin","useLexicalComposerContext","useEffect"],"mappings":"khBAqDA,SAASA,EAAuBC,EAAQC,GACtC,OAAOC,EAAcF,EAAOG,gBAAgBC,GAAiBC,IAC3D,MAAMC,EAAYC,IAClB,IAAKC,EAAkBF,GACrB,OAAO,EAETD,EAAMI,iBACN,MAAMC,EAvCV,SAAwBJ,GAEtB,MAAMK,EAAQL,EAAUM,WAQxB,GAP4BC,EAAQF,GAAOG,GACrCC,EAAoBD,IAASA,EAAKE,YAC7BF,EAEF,OAGeG,OAAS,EAC/B,OAAO,EAGT,MAAMC,EAASZ,EAAUY,OACnBC,EAAQb,EAAUa,MAClBC,EAAQD,EAAME,SAASH,GAAUC,EAAQD,EACzCI,EAAYF,EAAMG,UAClBC,EAAaC,EAAuCH,GAC1D,GAAIE,EAAWR,YAAa,CAC1B,MAAMU,EAAgBF,EAAWG,SACjC,IAAIC,EAAmBC,IAIvB,GAHAD,EAAiBV,OAAOY,IAAIJ,EAAe,EAAG,WAC9CE,EAAiBT,MAAMW,IAAIJ,EAAe,EAAG,WAC7CE,EAAmBG,EAAkCH,GACjDA,EAAiBV,OAAOc,GAAGZ,GAC7B,OAAO,CAEV,CAED,OAAO,CACT,CAQoBa,CAAe3B,GAAaD,EAAM6B,SAAWC,EAA0BC,EAAyBC,EAChH,OAAOrC,EAAOsC,gBAAgB5B,OAAS6B,EAAU,GAChDC,GAA0BxC,EAAOG,gBAAgBiC,GAAwB,KAC1E,GAAiB,MAAbnC,EACF,OAAO,EAET,MAAMK,EAAYC,IAClB,IAAKC,EAAkBF,GACrB,OAAO,EAET,MAAMmC,EAAUnC,EAAUM,WAAW8B,KAAI5B,GAAQW,EAAuCX,GAAM6B,cAC9F,OAAOC,KAAKC,OAAOJ,GAAW,GAAKxC,CAAS,GAC3C6C,GACL,CAOA,SAASC,GAAqB9C,UAC5BA,IAEA,MAAOD,GAAUgD,IAIjB,OAHAC,GAAU,IACDlD,EAAuBC,EAAQC,IACrC,CAACD,EAAQC,IACL,IACT"}