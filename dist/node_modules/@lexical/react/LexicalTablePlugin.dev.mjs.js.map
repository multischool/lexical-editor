{"version":3,"file":"LexicalTablePlugin.dev.mjs.js","sources":["../../../../node_modules/@lexical/react/LexicalTablePlugin.dev.mjs"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { setScrollableTablesActive, registerTablePlugin, registerTableSelectionObserver, registerTableCellUnmergeTransform, TableCellNode } from '@lexical/table';\nimport { useEffect } from 'react';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * A plugin to enable all of the features of Lexical's TableNode.\n *\n * @param props - See type for documentation\n * @returns An element to render in your LexicalComposer\n */\nfunction TablePlugin({\n  hasCellMerge = true,\n  hasCellBackgroundColor = true,\n  hasTabHandler = true,\n  hasHorizontalScroll = false\n}) {\n  const [editor] = useLexicalComposerContext();\n  useEffect(() => {\n    setScrollableTablesActive(editor, hasHorizontalScroll);\n  }, [editor, hasHorizontalScroll]);\n  useEffect(() => registerTablePlugin(editor), [editor]);\n  useEffect(() => registerTableSelectionObserver(editor, hasTabHandler), [editor, hasTabHandler]);\n\n  // Unmerge cells when the feature isn't enabled\n  useEffect(() => {\n    if (!hasCellMerge) {\n      return registerTableCellUnmergeTransform(editor);\n    }\n  }, [editor, hasCellMerge]);\n\n  // Remove cell background color when feature is disabled\n  useEffect(() => {\n    if (hasCellBackgroundColor) {\n      return;\n    }\n    return editor.registerNodeTransform(TableCellNode, node => {\n      if (node.getBackgroundColor() !== null) {\n        node.setBackgroundColor(null);\n      }\n    });\n  }, [editor, hasCellBackgroundColor, hasCellMerge]);\n  return null;\n}\n\nexport { TablePlugin };\n"],"names":["TablePlugin","hasCellMerge","hasCellBackgroundColor","hasTabHandler","hasHorizontalScroll","editor","useLexicalComposerContext","useEffect","setScrollableTablesActive","registerTablePlugin","registerTableSelectionObserver","registerTableCellUnmergeTransform","registerNodeTransform","TableCellNode","node","getBackgroundColor","setBackgroundColor"],"mappings":"gSA0BA,SAASA,GAAYC,aACnBA,GAAe,EAAIC,uBACnBA,GAAyB,EAAIC,cAC7BA,GAAgB,EAAIC,oBACpBA,GAAsB,IAEtB,MAAOC,GAAUC,IAyBjB,OAxBAC,GAAU,KACRC,EAA0BH,EAAQD,EAAoB,GACrD,CAACC,EAAQD,IACZG,GAAU,IAAME,EAAoBJ,IAAS,CAACA,IAC9CE,GAAU,IAAMG,EAA+BL,EAAQF,IAAgB,CAACE,EAAQF,IAGhFI,GAAU,KACR,IAAKN,EACH,OAAOU,EAAkCN,EAC1C,GACA,CAACA,EAAQJ,IAGZM,GAAU,KACR,IAAIL,EAGJ,OAAOG,EAAOO,sBAAsBC,GAAeC,IACf,OAA9BA,EAAKC,sBACPD,EAAKE,mBAAmB,KACzB,GACD,GACD,CAACX,EAAQH,EAAwBD,IAC7B,IACT"}