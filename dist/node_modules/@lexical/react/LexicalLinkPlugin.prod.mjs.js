import{LinkNode as t,TOGGLE_LINK_COMMAND as r,$toggleLink as e}from"@lexical/link";import{useLexicalComposerContext as i}from"./LexicalComposerContext.mjs.js";import{mergeRegister as o,objectKlassEquals as n}from"@lexical/utils";import{COMMAND_PRIORITY_LOW as l,PASTE_COMMAND as a,$getSelection as s,$isRangeSelection as m,$isElementNode as u}from"lexical";import{useEffect as d}from"react";function p({validateUrl:p,attributes:c}){const[f]=i();return d((()=>{if(!f.hasNodes([t]))throw new Error("LinkPlugin: LinkNode not registered on editor");return o(f.registerCommand(r,(t=>{if(null===t)return e(t),!0;if("string"==typeof t)return!(void 0!==p&&!p(t)||(e(t,c),0));{const{url:r,target:i,rel:o,title:n}=t;return e(r,{...c,rel:o,target:i,title:n}),!0}}),l),void 0!==p?f.registerCommand(a,(t=>{const e=s();if(!m(e)||e.isCollapsed()||!n(t,ClipboardEvent))return!1;if(null===t.clipboardData)return!1;const i=t.clipboardData.getData("text");return!!p(i)&&!e.getNodes().some((t=>u(t)))&&(f.dispatchCommand(r,{...c,url:i}),t.preventDefault(),!0)}),l):()=>{})}),[f,p,c]),null}export{p as LinkPlugin};
//# sourceMappingURL=LexicalLinkPlugin.prod.mjs.js.map
