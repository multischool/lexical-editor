import{useLexicalComposerContext as t}from"./LexicalComposerContext.mjs.js";import{mergeRegister as e,$getNearestBlockElementAncestorOrThrow as n,$filter as r}from"@lexical/utils";import{KEY_TAB_COMMAND as o,$getSelection as i,$isRangeSelection as s,OUTDENT_CONTENT_COMMAND as c,INDENT_CONTENT_COMMAND as m,INSERT_TAB_COMMAND as u,COMMAND_PRIORITY_EDITOR as a,COMMAND_PRIORITY_CRITICAL as f,$isBlockElementNode as l,$createRangeSelection as d,$normalizeSelection__EXPERIMENTAL as p}from"lexical";import{useEffect as g}from"react";function h(t,g){return e(t.registerCommand(o,(e=>{const o=i();if(!s(o))return!1;e.preventDefault();const a=function(t){const e=t.getNodes();if(r(e,(t=>l(t)&&t.canIndent()?t:null)).length>0)return!0;const o=t.anchor,i=t.focus,s=i.isBefore(o)?i:o,c=s.getNode(),m=n(c);if(m.canIndent()){const t=m.getKey();let e=d();if(e.anchor.set(t,0,"element"),e.focus.set(t,0,"element"),e=p(e),e.anchor.is(s))return!0}return!1}(o)?e.shiftKey?c:m:u;return t.dispatchCommand(a,void 0)}),a),t.registerCommand(m,(()=>{if(null==g)return!1;const t=i();if(!s(t))return!1;const e=t.getNodes().map((t=>n(t).getIndent()));return Math.max(...e)+1>=g}),f))}function x({maxIndent:e}){const[n]=t();return g((()=>h(n,e)),[n,e]),null}export{x as TabIndentationPlugin,h as registerTabIndentation};
//# sourceMappingURL=LexicalTabIndentationPlugin.dev.mjs.js.map
