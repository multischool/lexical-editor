import{useLexicalCommandsLog as e,TreeView as t,generateContent as a}from"../devtools-core/LexicalDevtoolsCore.mjs.js";import{mergeRegister as r}from"@lexical/utils";import*as s from"react";import{useState as l,useEffect as i}from"react";import"../../react/jsx-runtime.js";import{j as o}from"../../../_virtual/jsx-runtime.js";function n({treeTypeButtonClassName:n,timeTravelButtonClassName:m,timeTravelPanelSliderClassName:u,timeTravelPanelButtonClassName:c,timeTravelPanelClassName:d,viewClassName:C,editor:v,customPrintNode:N}){const f=s.createRef(),[p,T]=l(v.getEditorState()),E=e(v);return i((()=>r(v.registerUpdateListener((({editorState:e})=>{T(e)})),v.registerEditableListener((()=>{T(v.getEditorState())})))),[v]),i((()=>{const e=f.current;if(null!==e)return e.__lexicalEditor=v,()=>{e.__lexicalEditor=null}}),[v,f]),o.exports.jsx(t,{treeTypeButtonClassName:n,timeTravelButtonClassName:m,timeTravelPanelSliderClassName:u,timeTravelPanelButtonClassName:c,viewClassName:C,timeTravelPanelClassName:d,setEditorReadOnly:e=>{const t=v.getRootElement();null!=t&&(t.contentEditable=e?"false":"true")},editorState:p,setEditorState:e=>v.setEditorState(e),generateContent:async function(e){return a(v,E,e,N)},ref:f})}export{n as TreeView};
//# sourceMappingURL=LexicalTreeView.prod.mjs.js.map
