import{useLexicalComposerContext as t}from"./LexicalComposerContext.mjs.js";import{$getSelection as e,$isNodeSelection as r,$createNodeSelection as o,$setSelection as n,$getNodeByKey as c}from"lexical";import{useState as i,useEffect as a,useCallback as l}from"react";function s(t,e){return t.getEditorState().read((()=>{const t=c(e);return null!==t&&t.isSelected()}))}function d(c){const[d]=t(),[u,m]=i((()=>s(d,c)));a((()=>{let t=!0;const e=d.registerUpdateListener((()=>{t&&m(s(d,c))}));return()=>{t=!1,e()}}),[d,c]);return[u,l((t=>{d.update((()=>{let i=e();r(i)||(i=o(),n(i)),r(i)&&(t?i.add(c):i.delete(c))}))}),[d,c]),l((()=>{d.update((()=>{const t=e();r(t)&&t.clear()}))}),[d])]}export{d as useLexicalNodeSelection};
//# sourceMappingURL=useLexicalNodeSelection.dev.mjs.js.map
