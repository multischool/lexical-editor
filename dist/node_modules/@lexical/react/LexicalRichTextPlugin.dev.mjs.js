import{useLexicalComposerContext as t}from"./LexicalComposerContext.mjs.js";import{useLexicalEditable as r}from"./useLexicalEditable.mjs.js";import{$canShowPlaceholderCurry as e}from"../text/LexicalText.mjs.js";import{mergeRegister as o}from"@lexical/utils";import{useState as n,useEffect as i,useMemo as s,Suspense as c,useLayoutEffect as m}from"react";import{flushSync as l,createPortal as u}from"react-dom";import"../../react/jsx-runtime.js";import{registerDragonSupport as a}from"../dragon/LexicalDragon.mjs.js";import{registerRichText as p}from"@lexical/rich-text";import{j as d}from"../../../_virtual/jsx-runtime.js";const f="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?m:i;function x(t){return t.getEditorState().read(e(t.isComposing()))}function j({contentEditable:r,placeholder:e=null,ErrorBoundary:m}){const[x]=t(),j=function(t,r){const[e,o]=n((()=>t.getDecorators()));return f((()=>t.registerDecoratorListener((t=>{l((()=>{o(t)}))}))),[t]),i((()=>{o(t.getDecorators())}),[t]),s((()=>{const o=[],n=Object.keys(e);for(let i=0;i<n.length;i++){const s=n[i],m=d.exports.jsx(r,{onError:r=>t._onError(r),children:d.exports.jsx(c,{fallback:null,children:e[s]})}),l=t.getElementByKey(s);null!==l&&o.push(u(m,l,s))}return o}),[r,e,t])}(x,m);return function(t){f((()=>o(p(t),a(t))),[t])}(x),d.exports.jsxs(d.exports.Fragment,{children:[r,d.exports.jsx(g,{content:e}),j]})}function g({content:e}){const[i]=t(),s=function(t){const[r,e]=n((()=>x(t)));return f((()=>{function r(){const r=x(t);e(r)}return r(),o(t.registerUpdateListener((()=>{r()})),t.registerEditableListener((()=>{r()})))}),[t]),r}(i),c=r();return s?"function"==typeof e?e(c):e:null}export{j as RichTextPlugin};
//# sourceMappingURL=LexicalRichTextPlugin.dev.mjs.js.map
