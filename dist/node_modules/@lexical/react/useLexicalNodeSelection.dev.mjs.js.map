{"version":3,"file":"useLexicalNodeSelection.dev.mjs.js","sources":["../../../../node_modules/@lexical/react/useLexicalNodeSelection.dev.mjs"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { $getSelection, $isNodeSelection, $createNodeSelection, $setSelection, $getNodeByKey } from 'lexical';\nimport { useState, useEffect, useCallback } from 'react';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n/**\n * A helper function to determine if a specific node is selected in a Lexical editor.\n *\n * @param {LexicalEditor} editor - The LexicalEditor instance.\n * @param {NodeKey} key - The key of the node to check.\n * @returns {boolean} Whether the node is selected.\n */\n\nfunction isNodeSelected(editor, key) {\n  return editor.getEditorState().read(() => {\n    const node = $getNodeByKey(key);\n    if (node === null) {\n      return false; // Node doesn't exist, so it's not selected.\n    }\n    return node.isSelected(); // Check if the node is selected.\n  });\n}\n\n/**\n * A custom hook to manage the selection state of a specific node in a Lexical editor.\n *\n * This hook provides utilities to:\n * - Check if a node is selected.\n * - Update its selection state.\n * - Clear the selection.\n *\n * @param {NodeKey} key - The key of the node to track selection for.\n * @returns {[boolean, (selected: boolean) => void, () => void]} A tuple containing:\n * - `isSelected` (boolean): Whether the node is currently selected.\n * - `setSelected` (function): A function to set the selection state of the node.\n * - `clearSelected` (function): A function to clear the selection of the node.\n *\n */\n\nfunction useLexicalNodeSelection(key) {\n  const [editor] = useLexicalComposerContext();\n\n  // State to track whether the node is currently selected.\n  const [isSelected, setIsSelected] = useState(() => isNodeSelected(editor, key));\n  useEffect(() => {\n    let isMounted = true;\n    const unregister = editor.registerUpdateListener(() => {\n      if (isMounted) {\n        setIsSelected(isNodeSelected(editor, key));\n      }\n    });\n    return () => {\n      isMounted = false; // Prevent updates after component unmount.\n      unregister();\n    };\n  }, [editor, key]);\n  const setSelected = useCallback(selected => {\n    editor.update(() => {\n      let selection = $getSelection();\n      if (!$isNodeSelection(selection)) {\n        selection = $createNodeSelection();\n        $setSelection(selection);\n      }\n      if ($isNodeSelection(selection)) {\n        if (selected) {\n          selection.add(key);\n        } else {\n          selection.delete(key);\n        }\n      }\n    });\n  }, [editor, key]);\n  const clearSelected = useCallback(() => {\n    editor.update(() => {\n      const selection = $getSelection();\n      if ($isNodeSelection(selection)) {\n        selection.clear();\n      }\n    });\n  }, [editor]);\n  return [isSelected, setSelected, clearSelected];\n}\n\nexport { useLexicalNodeSelection };\n"],"names":["isNodeSelected","editor","key","getEditorState","read","node","$getNodeByKey","isSelected","useLexicalNodeSelection","useLexicalComposerContext","setIsSelected","useState","useEffect","isMounted","unregister","registerUpdateListener","useCallback","selected","update","selection","$getSelection","$isNodeSelection","$createNodeSelection","$setSelection","add","delete","clear"],"mappings":"2QA6BA,SAASA,EAAeC,EAAQC,GAC9B,OAAOD,EAAOE,iBAAiBC,MAAK,KAClC,MAAMC,EAAOC,EAAcJ,GAC3B,OAAa,OAATG,GAGGA,EAAKE,YAAY,GAE5B,CAkBA,SAASC,EAAwBN,GAC/B,MAAOD,GAAUQ,KAGVF,EAAYG,GAAiBC,GAAS,IAAMX,EAAeC,EAAQC,KAC1EU,GAAU,KACR,IAAIC,GAAY,EAChB,MAAMC,EAAab,EAAOc,wBAAuB,KAC3CF,GACFH,EAAcV,EAAeC,EAAQC,GACtC,IAEH,MAAO,KACLW,GAAY,EACZC,GAAY,CACb,GACA,CAACb,EAAQC,IAyBZ,MAAO,CAACK,EAxBYS,GAAYC,IAC9BhB,EAAOiB,QAAO,KACZ,IAAIC,EAAYC,IACXC,EAAiBF,KACpBA,EAAYG,IACZC,EAAcJ,IAEZE,EAAiBF,KACfF,EACFE,EAAUK,IAAItB,GAEdiB,EAAUM,OAAOvB,GAEpB,GACD,GACD,CAACD,EAAQC,IACUc,GAAY,KAChCf,EAAOiB,QAAO,KACZ,MAAMC,EAAYC,IACdC,EAAiBF,IACnBA,EAAUO,OACX,GACD,GACD,CAACzB,IAEN"}