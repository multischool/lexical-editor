import{useLexicalComposerContext as e}from"./LexicalComposerContext.mjs.js";import{useLexicalNodeSelection as t}from"./useLexicalNodeSelection.mjs.js";import{addClassNamesToElement as r,mergeRegister as n,removeClassNamesFromElement as o}from"@lexical/utils";import{createCommand as i,DecoratorNode as c,$applyNodeReplacement as s,CLICK_COMMAND as m,COMMAND_PRIORITY_LOW as u}from"lexical";import{useEffect as l}from"react";import"../../react/jsx-runtime.js";import{j as a}from"../../../_virtual/jsx-runtime.js";const p=i("INSERT_HORIZONTAL_RULE_COMMAND");function d({nodeKey:i}){const[c]=e(),[s,a,p]=t(i);return l((()=>n(c.registerCommand(m,(e=>{const t=c.getElementByKey(i);return e.target===t&&(e.shiftKey||p(),a(!s),!0)}),u))),[p,c,s,i,a]),l((()=>{const e=c.getElementByKey(i),t=c._config.theme.hrSelected??"selected";null!==e&&(s?r(e,t):o(e,t))}),[c,s,i]),null}class f extends c{static getType(){return"horizontalrule"}static clone(e){return new f(e.__key)}static importJSON(e){return y().updateFromJSON(e)}static importDOM(){return{hr:()=>({conversion:x,priority:0})}}exportDOM(){return{element:document.createElement("hr")}}createDOM(e){const t=document.createElement("hr");return r(t,e.theme.hr),t}getTextContent(){return"\n"}isInline(){return!1}updateDOM(){return!1}decorate(){return a.exports.jsx(d,{nodeKey:this.__key})}}function x(){return{node:y()}}function y(){return s(new f)}function h(e){return e instanceof f}export{y as $createHorizontalRuleNode,h as $isHorizontalRuleNode,f as HorizontalRuleNode,p as INSERT_HORIZONTAL_RULE_COMMAND};
//# sourceMappingURL=LexicalHorizontalRuleNode.dev.mjs.js.map
