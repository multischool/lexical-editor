{"version":3,"file":"LexicalHorizontalRuleNode.dev.mjs.js","sources":["../../../../node_modules/@lexical/react/LexicalHorizontalRuleNode.dev.mjs"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { useLexicalNodeSelection } from '@lexical/react/useLexicalNodeSelection';\nimport { addClassNamesToElement, mergeRegister, removeClassNamesFromElement } from '@lexical/utils';\nimport { createCommand, DecoratorNode, $applyNodeReplacement, CLICK_COMMAND, COMMAND_PRIORITY_LOW } from 'lexical';\nimport { useEffect } from 'react';\nimport { jsx } from 'react/jsx-runtime';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst INSERT_HORIZONTAL_RULE_COMMAND = createCommand('INSERT_HORIZONTAL_RULE_COMMAND');\nfunction HorizontalRuleComponent({\n  nodeKey\n}) {\n  const [editor] = useLexicalComposerContext();\n  const [isSelected, setSelected, clearSelection] = useLexicalNodeSelection(nodeKey);\n  useEffect(() => {\n    return mergeRegister(editor.registerCommand(CLICK_COMMAND, event => {\n      const hrElem = editor.getElementByKey(nodeKey);\n      if (event.target === hrElem) {\n        if (!event.shiftKey) {\n          clearSelection();\n        }\n        setSelected(!isSelected);\n        return true;\n      }\n      return false;\n    }, COMMAND_PRIORITY_LOW));\n  }, [clearSelection, editor, isSelected, nodeKey, setSelected]);\n  useEffect(() => {\n    const hrElem = editor.getElementByKey(nodeKey);\n    const isSelectedClassName = editor._config.theme.hrSelected ?? 'selected';\n    if (hrElem !== null) {\n      if (isSelected) {\n        addClassNamesToElement(hrElem, isSelectedClassName);\n      } else {\n        removeClassNamesFromElement(hrElem, isSelectedClassName);\n      }\n    }\n  }, [editor, isSelected, nodeKey]);\n  return null;\n}\nclass HorizontalRuleNode extends DecoratorNode {\n  static getType() {\n    return 'horizontalrule';\n  }\n  static clone(node) {\n    return new HorizontalRuleNode(node.__key);\n  }\n  static importJSON(serializedNode) {\n    return $createHorizontalRuleNode().updateFromJSON(serializedNode);\n  }\n  static importDOM() {\n    return {\n      hr: () => ({\n        conversion: $convertHorizontalRuleElement,\n        priority: 0\n      })\n    };\n  }\n  exportDOM() {\n    return {\n      element: document.createElement('hr')\n    };\n  }\n  createDOM(config) {\n    const element = document.createElement('hr');\n    addClassNamesToElement(element, config.theme.hr);\n    return element;\n  }\n  getTextContent() {\n    return '\\n';\n  }\n  isInline() {\n    return false;\n  }\n  updateDOM() {\n    return false;\n  }\n  decorate() {\n    return /*#__PURE__*/jsx(HorizontalRuleComponent, {\n      nodeKey: this.__key\n    });\n  }\n}\nfunction $convertHorizontalRuleElement() {\n  return {\n    node: $createHorizontalRuleNode()\n  };\n}\nfunction $createHorizontalRuleNode() {\n  return $applyNodeReplacement(new HorizontalRuleNode());\n}\nfunction $isHorizontalRuleNode(node) {\n  return node instanceof HorizontalRuleNode;\n}\n\nexport { $createHorizontalRuleNode, $isHorizontalRuleNode, HorizontalRuleNode, INSERT_HORIZONTAL_RULE_COMMAND };\n"],"names":["INSERT_HORIZONTAL_RULE_COMMAND","createCommand","HorizontalRuleComponent","nodeKey","editor","useLexicalComposerContext","isSelected","setSelected","clearSelection","useLexicalNodeSelection","useEffect","mergeRegister","registerCommand","CLICK_COMMAND","event","hrElem","getElementByKey","target","shiftKey","COMMAND_PRIORITY_LOW","isSelectedClassName","_config","theme","hrSelected","addClassNamesToElement","removeClassNamesFromElement","HorizontalRuleNode","DecoratorNode","getType","clone","node","__key","importJSON","serializedNode","$createHorizontalRuleNode","updateFromJSON","importDOM","hr","conversion","$convertHorizontalRuleElement","priority","exportDOM","element","document","createElement","createDOM","config","getTextContent","isInline","updateDOM","decorate","jsx","this","$applyNodeReplacement","$isHorizontalRuleNode"],"mappings":"ggBAuBK,MAACA,EAAiCC,EAAc,kCACrD,SAASC,GAAwBC,QAC/BA,IAEA,MAAOC,GAAUC,KACVC,EAAYC,EAAaC,GAAkBC,EAAwBN,GAyB1E,OAxBAO,GAAU,IACDC,EAAcP,EAAOQ,gBAAgBC,GAAeC,IACzD,MAAMC,EAASX,EAAOY,gBAAgBb,GACtC,OAAIW,EAAMG,SAAWF,IACdD,EAAMI,UACTV,IAEFD,GAAaD,IACN,EAEG,GACXa,KACF,CAACX,EAAgBJ,EAAQE,EAAYH,EAASI,IACjDG,GAAU,KACR,MAAMK,EAASX,EAAOY,gBAAgBb,GAChCiB,EAAsBhB,EAAOiB,QAAQC,MAAMC,YAAc,WAChD,OAAXR,IACET,EACFkB,EAAuBT,EAAQK,GAE/BK,EAA4BV,EAAQK,GAEvC,GACA,CAAChB,EAAQE,EAAYH,IACjB,IACT,CACA,MAAMuB,UAA2BC,EAC/B,cAAOC,GACL,MAAO,gBACR,CACD,YAAOC,CAAMC,GACX,OAAO,IAAIJ,EAAmBI,EAAKC,MACpC,CACD,iBAAOC,CAAWC,GAChB,OAAOC,IAA4BC,eAAeF,EACnD,CACD,gBAAOG,GACL,MAAO,CACLC,GAAI,KAAO,CACTC,WAAYC,EACZC,SAAU,IAGf,CACD,SAAAC,GACE,MAAO,CACLC,QAASC,SAASC,cAAc,MAEnC,CACD,SAAAC,CAAUC,GACR,MAAMJ,EAAUC,SAASC,cAAc,MAEvC,OADApB,EAAuBkB,EAASI,EAAOxB,MAAMe,IACtCK,CACR,CACD,cAAAK,GACE,MAAO,IACR,CACD,QAAAC,GACE,OAAO,CACR,CACD,SAAAC,GACE,OAAO,CACR,CACD,QAAAC,GACE,OAAoBC,EAAAA,QAAAA,IAAIjD,EAAyB,CAC/CC,QAASiD,KAAKrB,OAEjB,EAEH,SAASQ,IACP,MAAO,CACLT,KAAMI,IAEV,CACA,SAASA,IACP,OAAOmB,EAAsB,IAAI3B,EACnC,CACA,SAAS4B,EAAsBxB,GAC7B,OAAOA,aAAgBJ,CACzB"}