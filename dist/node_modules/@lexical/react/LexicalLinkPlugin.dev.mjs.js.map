{"version":3,"file":"LexicalLinkPlugin.dev.mjs.js","sources":["../../../../node_modules/@lexical/react/LexicalLinkPlugin.dev.mjs"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { LinkNode, TOGGLE_LINK_COMMAND, $toggleLink } from '@lexical/link';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { mergeRegister, objectKlassEquals } from '@lexical/utils';\nimport { COMMAND_PRIORITY_LOW, PASTE_COMMAND, $getSelection, $isRangeSelection, $isElementNode } from 'lexical';\nimport { useEffect } from 'react';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction LinkPlugin({\n  validateUrl,\n  attributes\n}) {\n  const [editor] = useLexicalComposerContext();\n  useEffect(() => {\n    if (!editor.hasNodes([LinkNode])) {\n      throw new Error('LinkPlugin: LinkNode not registered on editor');\n    }\n    return mergeRegister(editor.registerCommand(TOGGLE_LINK_COMMAND, payload => {\n      if (payload === null) {\n        $toggleLink(payload);\n        return true;\n      } else if (typeof payload === 'string') {\n        if (validateUrl === undefined || validateUrl(payload)) {\n          $toggleLink(payload, attributes);\n          return true;\n        }\n        return false;\n      } else {\n        const {\n          url,\n          target,\n          rel,\n          title\n        } = payload;\n        $toggleLink(url, {\n          ...attributes,\n          rel,\n          target,\n          title\n        });\n        return true;\n      }\n    }, COMMAND_PRIORITY_LOW), validateUrl !== undefined ? editor.registerCommand(PASTE_COMMAND, event => {\n      const selection = $getSelection();\n      if (!$isRangeSelection(selection) || selection.isCollapsed() || !objectKlassEquals(event, ClipboardEvent)) {\n        return false;\n      }\n      if (event.clipboardData === null) {\n        return false;\n      }\n      const clipboardText = event.clipboardData.getData('text');\n      if (!validateUrl(clipboardText)) {\n        return false;\n      }\n      // If we select nodes that are elements then avoid applying the link.\n      if (!selection.getNodes().some(node => $isElementNode(node))) {\n        editor.dispatchCommand(TOGGLE_LINK_COMMAND, {\n          ...attributes,\n          url: clipboardText\n        });\n        event.preventDefault();\n        return true;\n      }\n      return false;\n    }, COMMAND_PRIORITY_LOW) : () => {\n      // Don't paste arbitrary text as a link when there's no validate function\n    });\n  }, [editor, validateUrl, attributes]);\n  return null;\n}\n\nexport { LinkPlugin };\n"],"names":["LinkPlugin","validateUrl","attributes","editor","useLexicalComposerContext","useEffect","hasNodes","LinkNode","Error","mergeRegister","registerCommand","TOGGLE_LINK_COMMAND","payload","$toggleLink","undefined","url","target","rel","title","COMMAND_PRIORITY_LOW","PASTE_COMMAND","event","selection","$getSelection","$isRangeSelection","isCollapsed","objectKlassEquals","ClipboardEvent","clipboardData","clipboardText","getData","getNodes","some","node","$isElementNode","dispatchCommand","preventDefault"],"mappings":"uYAsBA,SAASA,GAAWC,YAClBA,EAAWC,WACXA,IAEA,MAAOC,GAAUC,IAwDjB,OAvDAC,GAAU,KACR,IAAKF,EAAOG,SAAS,CAACC,IACpB,MAAM,IAAIC,MAAM,iDAElB,OAAOC,EAAcN,EAAOO,gBAAgBC,GAAqBC,IAC/D,GAAgB,OAAZA,EAEF,OADAC,EAAYD,IACL,EACF,GAAuB,iBAAZA,EAChB,aAAoBE,IAAhBb,IAA6BA,EAAYW,MAC3CC,EAAYD,EAASV,IACd,GAGJ,CACL,MAAMa,IACJA,EAAGC,OACHA,EAAMC,IACNA,EAAGC,MACHA,GACEN,EAOJ,OANAC,EAAYE,EAAK,IACZb,EACHe,MACAD,SACAE,WAEK,CACR,IACAC,QAAuCL,IAAhBb,EAA4BE,EAAOO,gBAAgBU,GAAeC,IAC1F,MAAMC,EAAYC,IAClB,IAAKC,EAAkBF,IAAcA,EAAUG,gBAAkBC,EAAkBL,EAAOM,gBACxF,OAAO,EAET,GAA4B,OAAxBN,EAAMO,cACR,OAAO,EAET,MAAMC,EAAgBR,EAAMO,cAAcE,QAAQ,QAClD,QAAK7B,EAAY4B,MAIZP,EAAUS,WAAWC,MAAKC,GAAQC,EAAeD,OACpD9B,EAAOgC,gBAAgBxB,EAAqB,IACvCT,EACHa,IAAKc,IAEPR,EAAMe,kBACC,GAEG,GACXjB,GAAwB,OAEzB,GACD,CAAChB,EAAQF,EAAaC,IAClB,IACT"}