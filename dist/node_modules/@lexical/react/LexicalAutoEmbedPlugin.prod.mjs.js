import{$isLinkNode as e,LinkNode as t,AutoLinkNode as n}from"@lexical/link";import{useLexicalComposerContext as o}from"./LexicalComposerContext.mjs.js";import{MenuOption as r,LexicalNodeMenuPlugin as i}from"./LexicalNodeMenuPlugin.mjs.js";import{mergeRegister as s}from"@lexical/utils";import{createCommand as l,$getNodeByKey as a,COMMAND_PRIORITY_EDITOR as u,$getSelection as m,COMMAND_PRIORITY_LOW as c}from"lexical";import{useState as d,useCallback as p,useEffect as f,useMemo as x}from"react";import"../../react/jsx-runtime.js";import{j as E}from"../../../_virtual/jsx-runtime.js";const g=/((https?:\/\/(www\.)?)|(www\.))[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/,M=l("INSERT_EMBED_COMMAND");class j extends r{constructor(e,t){super(e),this.title=e,this.onSelect=t.onSelect.bind(this)}}function C({embedConfigs:r,onOpenEmbedModalForConfig:l,getMenuOptions:g,menuRenderFn:j,menuCommandPriority:C=c}){const[_]=o(),[A,w]=d(null),[S,y]=d(null),L=p((()=>{w(null),y(null)}),[]),R=p((async t=>{const n=_.getEditorState().read((function(){const n=a(t);if(e(n))return n.getURL()}));if(void 0!==n)for(const e of r)null!=await Promise.resolve(e.parseUrl(n))&&(y(e),w(t))}),[_,r]);f((()=>s(...[t,n].map((e=>_.registerMutationListener(e,((...e)=>((e,{updateTags:t,dirtyLeaves:n})=>{for(const[o,r]of e)"created"===r&&t.has("paste")&&n.size<=3?R(o):o===A&&L()})(...e)),{skipInitialization:!0}))))),[R,_,r,A,L]),f((()=>_.registerCommand(M,(e=>{const t=r.find((({type:t})=>t===e));return!!t&&(l(t),!0)}),u)),[_,r,l]);const b=p((async function(){if(null!=S&&null!=A){const t=_.getEditorState().read((()=>{const t=a(A);return e(t)?t:null}));if(e(t)){const e=await Promise.resolve(S.parseUrl(t.__url));null!=e&&_.update((()=>{m()||t.selectEnd(),S.insertNode(_,e),t.isAttached()&&t.remove()}))}}}),[S,_,A]),h=x((()=>null!=S&&null!=A?g(S,b,L):[]),[S,b,g,A,L]),v=p(((e,t,n)=>{_.update((()=>{e.onSelect(t),n()}))}),[_]);return null!=A?E.exports.jsx(i,{nodeKey:A,onClose:L,onSelectOption:v,options:h,menuRenderFn:j,commandPriority:C}):null}export{j as AutoEmbedOption,M as INSERT_EMBED_COMMAND,C as LexicalAutoEmbedPlugin,g as URL_MATCHER};
//# sourceMappingURL=LexicalAutoEmbedPlugin.prod.mjs.js.map
