import{useLexicalComposerContext as e}from"./LexicalComposerContext.mjs.js";import{forwardRef as t,useState as i,useLayoutEffect as r,useCallback as a,useMemo as n,useEffect as o}from"react";import"../../react/jsx-runtime.js";import{$canShowPlaceholderCurry as l}from"../text/LexicalText.mjs.js";import{mergeRegister as s}from"@lexical/utils";import{j as d}from"../../../_virtual/jsx-runtime.js";const c="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r:o;function u({editor:e,ariaActiveDescendant:t,ariaAutoComplete:r,ariaControls:o,ariaDescribedBy:l,ariaErrorMessage:s,ariaExpanded:u,ariaInvalid:m,ariaLabel:p,ariaLabelledBy:x,ariaMultiline:f,ariaOwns:b,ariaRequired:v,autoCapitalize:E,className:j,id:w,role:y="textbox",spellCheck:g=!0,style:C,tabIndex:L,"data-testid":h,...D},I){const[R,k]=i(e.isEditable()),q=a((t=>{t&&t.ownerDocument&&t.ownerDocument.defaultView?e.setRootElement(t):e.setRootElement(null)}),[e]),z=n((()=>function(...e){return t=>{e.forEach((e=>{"function"==typeof e?e(t):null!=e&&(e.current=t)}))}}(I,q)),[q,I]);return c((()=>(k(e.isEditable()),e.registerEditableListener((e=>{k(e)})))),[e]),d.exports.jsx("div",{"aria-activedescendant":R?t:void 0,"aria-autocomplete":R?r:"none","aria-controls":R?o:void 0,"aria-describedby":l,...null!=s?{"aria-errormessage":s}:{},"aria-expanded":R&&"combobox"===y?!!u:void 0,...null!=m?{"aria-invalid":m}:{},"aria-label":p,"aria-labelledby":x,"aria-multiline":f,"aria-owns":R?b:void 0,"aria-readonly":!R||void 0,"aria-required":v,autoCapitalize:E,className:j,contentEditable:R,"data-testid":h,id:w,ref:z,role:R?y:void 0,spellCheck:g,style:C,tabIndex:L,...D})}const m=t(u);function p(e){return e.getEditorState().read(l(e.isComposing()))}const x=t(f);function f(t,i){const{placeholder:r,...a}=t,[n]=e();return d.exports.jsxs(d.exports.Fragment,{children:[d.exports.jsx(m,{editor:n,...a,ref:i}),null!=r&&d.exports.jsx(b,{editor:n,content:r})]})}function b({content:e,editor:t}){const a=function(e){const[t,r]=i((()=>p(e)));return c((()=>{function t(){const t=p(e);r(t)}return t(),s(e.registerUpdateListener((()=>{t()})),e.registerEditableListener((()=>{t()})))}),[e]),t}(t),[n,o]=i(t.isEditable());if(r((()=>(o(t.isEditable()),t.registerEditableListener((e=>{o(e)})))),[t]),!a)return null;let l=null;return"function"==typeof e?l=e(n):null!==e&&(l=e),null===l?null:d.exports.jsx("div",{"aria-hidden":!0,children:l})}export{x as ContentEditable,m as ContentEditableElement};
//# sourceMappingURL=LexicalContentEditable.dev.mjs.js.map
