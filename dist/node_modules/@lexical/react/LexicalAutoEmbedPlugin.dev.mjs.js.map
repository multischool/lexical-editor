{"version":3,"file":"LexicalAutoEmbedPlugin.dev.mjs.js","sources":["../../../../node_modules/@lexical/react/LexicalAutoEmbedPlugin.dev.mjs"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { $isLinkNode, LinkNode, AutoLinkNode } from '@lexical/link';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { MenuOption, LexicalNodeMenuPlugin } from '@lexical/react/LexicalNodeMenuPlugin';\nimport { mergeRegister } from '@lexical/utils';\nimport { createCommand, $getNodeByKey, COMMAND_PRIORITY_EDITOR, $getSelection, COMMAND_PRIORITY_LOW } from 'lexical';\nimport { useState, useCallback, useEffect, useMemo } from 'react';\nimport { jsx } from 'react/jsx-runtime';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst URL_MATCHER = /((https?:\\/\\/(www\\.)?)|(www\\.))[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/;\nconst INSERT_EMBED_COMMAND = createCommand('INSERT_EMBED_COMMAND');\nclass AutoEmbedOption extends MenuOption {\n  constructor(title, options) {\n    super(title);\n    this.title = title;\n    this.onSelect = options.onSelect.bind(this);\n  }\n}\nfunction LexicalAutoEmbedPlugin({\n  embedConfigs,\n  onOpenEmbedModalForConfig,\n  getMenuOptions,\n  menuRenderFn,\n  menuCommandPriority = COMMAND_PRIORITY_LOW\n}) {\n  const [editor] = useLexicalComposerContext();\n  const [nodeKey, setNodeKey] = useState(null);\n  const [activeEmbedConfig, setActiveEmbedConfig] = useState(null);\n  const reset = useCallback(() => {\n    setNodeKey(null);\n    setActiveEmbedConfig(null);\n  }, []);\n  const checkIfLinkNodeIsEmbeddable = useCallback(async key => {\n    const url = editor.getEditorState().read(function () {\n      const linkNode = $getNodeByKey(key);\n      if ($isLinkNode(linkNode)) {\n        return linkNode.getURL();\n      }\n    });\n    if (url === undefined) {\n      return;\n    }\n    for (const embedConfig of embedConfigs) {\n      const urlMatch = await Promise.resolve(embedConfig.parseUrl(url));\n      if (urlMatch != null) {\n        setActiveEmbedConfig(embedConfig);\n        setNodeKey(key);\n      }\n    }\n  }, [editor, embedConfigs]);\n  useEffect(() => {\n    const listener = (nodeMutations, {\n      updateTags,\n      dirtyLeaves\n    }) => {\n      for (const [key, mutation] of nodeMutations) {\n        if (mutation === 'created' && updateTags.has('paste') && dirtyLeaves.size <= 3) {\n          checkIfLinkNodeIsEmbeddable(key);\n        } else if (key === nodeKey) {\n          reset();\n        }\n      }\n    };\n    return mergeRegister(...[LinkNode, AutoLinkNode].map(Klass => editor.registerMutationListener(Klass, (...args) => listener(...args), {\n      skipInitialization: true\n    })));\n  }, [checkIfLinkNodeIsEmbeddable, editor, embedConfigs, nodeKey, reset]);\n  useEffect(() => {\n    return editor.registerCommand(INSERT_EMBED_COMMAND, embedConfigType => {\n      const embedConfig = embedConfigs.find(({\n        type\n      }) => type === embedConfigType);\n      if (embedConfig) {\n        onOpenEmbedModalForConfig(embedConfig);\n        return true;\n      }\n      return false;\n    }, COMMAND_PRIORITY_EDITOR);\n  }, [editor, embedConfigs, onOpenEmbedModalForConfig]);\n  const embedLinkViaActiveEmbedConfig = useCallback(async function () {\n    if (activeEmbedConfig != null && nodeKey != null) {\n      const linkNode = editor.getEditorState().read(() => {\n        const node = $getNodeByKey(nodeKey);\n        if ($isLinkNode(node)) {\n          return node;\n        }\n        return null;\n      });\n      if ($isLinkNode(linkNode)) {\n        const result = await Promise.resolve(activeEmbedConfig.parseUrl(linkNode.__url));\n        if (result != null) {\n          editor.update(() => {\n            if (!$getSelection()) {\n              linkNode.selectEnd();\n            }\n            activeEmbedConfig.insertNode(editor, result);\n            if (linkNode.isAttached()) {\n              linkNode.remove();\n            }\n          });\n        }\n      }\n    }\n  }, [activeEmbedConfig, editor, nodeKey]);\n  const options = useMemo(() => {\n    return activeEmbedConfig != null && nodeKey != null ? getMenuOptions(activeEmbedConfig, embedLinkViaActiveEmbedConfig, reset) : [];\n  }, [activeEmbedConfig, embedLinkViaActiveEmbedConfig, getMenuOptions, nodeKey, reset]);\n  const onSelectOption = useCallback((selectedOption, targetNode, closeMenu) => {\n    editor.update(() => {\n      selectedOption.onSelect(targetNode);\n      closeMenu();\n    });\n  }, [editor]);\n  return nodeKey != null ? /*#__PURE__*/jsx(LexicalNodeMenuPlugin, {\n    nodeKey: nodeKey,\n    onClose: reset,\n    onSelectOption: onSelectOption,\n    options: options,\n    menuRenderFn: menuRenderFn,\n    commandPriority: menuCommandPriority\n  }) : null;\n}\n\nexport { AutoEmbedOption, INSERT_EMBED_COMMAND, LexicalAutoEmbedPlugin, URL_MATCHER };\n"],"names":["URL_MATCHER","INSERT_EMBED_COMMAND","createCommand","AutoEmbedOption","MenuOption","constructor","title","options","super","this","onSelect","bind","LexicalAutoEmbedPlugin","embedConfigs","onOpenEmbedModalForConfig","getMenuOptions","menuRenderFn","menuCommandPriority","COMMAND_PRIORITY_LOW","editor","useLexicalComposerContext","nodeKey","setNodeKey","useState","activeEmbedConfig","setActiveEmbedConfig","reset","useCallback","checkIfLinkNodeIsEmbeddable","async","url","getEditorState","read","linkNode","$getNodeByKey","key","$isLinkNode","getURL","undefined","embedConfig","Promise","resolve","parseUrl","useEffect","mergeRegister","LinkNode","AutoLinkNode","map","Klass","registerMutationListener","args","nodeMutations","updateTags","dirtyLeaves","mutation","has","size","listener","skipInitialization","registerCommand","embedConfigType","find","type","COMMAND_PRIORITY_EDITOR","embedLinkViaActiveEmbedConfig","node","result","__url","update","$getSelection","selectEnd","insertNode","isAttached","remove","useMemo","onSelectOption","selectedOption","targetNode","closeMenu","jsx","exports","LexicalNodeMenuPlugin","onClose","commandPriority"],"mappings":"ykBAwBK,MAACA,EAAc,kHACdC,EAAuBC,EAAc,wBAC3C,MAAMC,UAAwBC,EAC5B,WAAAC,CAAYC,EAAOC,GACjBC,MAAMF,GACNG,KAAKH,MAAQA,EACbG,KAAKC,SAAWH,EAAQG,SAASC,KAAKF,KACvC,EAEH,SAASG,GAAuBC,aAC9BA,EAAYC,0BACZA,EAAyBC,eACzBA,EAAcC,aACdA,EAAYC,oBACZA,EAAsBC,IAEtB,MAAOC,GAAUC,KACVC,EAASC,GAAcC,EAAS,OAChCC,EAAmBC,GAAwBF,EAAS,MACrDG,EAAQC,GAAY,KACxBL,EAAW,MACXG,EAAqB,KAAK,GACzB,IACGG,EAA8BD,GAAYE,UAC9C,MAAMC,EAAMX,EAAOY,iBAAiBC,MAAK,WACvC,MAAMC,EAAWC,EAAcC,GAC/B,GAAIC,EAAYH,GACd,OAAOA,EAASI,QAExB,IACI,QAAYC,IAARR,EAGJ,IAAK,MAAMS,KAAe1B,EAAc,CAEtB,YADO2B,QAAQC,QAAQF,EAAYG,SAASZ,MAE1DL,EAAqBc,GACrBjB,EAAWa,GAEd,IACA,CAAChB,EAAQN,IACZ8B,GAAU,IAaDC,KAAiB,CAACC,EAAUC,GAAcC,KAAIC,GAAS7B,EAAO8B,yBAAyBD,GAAO,IAAIE,IAZxF,EAACC,GAChBC,aACAC,kBAEA,IAAK,MAAOlB,EAAKmB,KAAaH,EACX,YAAbG,GAA0BF,EAAWG,IAAI,UAAYF,EAAYG,MAAQ,EAC3E5B,EAA4BO,GACnBA,IAAQd,GACjBK,GAEH,EAE+G+B,IAAYP,IAAO,CACnIQ,oBAAoB,QAErB,CAAC9B,EAA6BT,EAAQN,EAAcQ,EAASK,IAChEiB,GAAU,IACDxB,EAAOwC,gBAAgB1D,GAAsB2D,IAClD,MAAMrB,EAAc1B,EAAagD,MAAK,EACpCC,UACIA,IAASF,IACf,QAAIrB,IACFzB,EAA0ByB,IACnB,EAEG,GACXwB,IACF,CAAC5C,EAAQN,EAAcC,IAC1B,MAAMkD,EAAgCrC,GAAYE,iBAChD,GAAyB,MAArBL,GAAwC,MAAXH,EAAiB,CAChD,MAAMY,EAAWd,EAAOY,iBAAiBC,MAAK,KAC5C,MAAMiC,EAAO/B,EAAcb,GAC3B,OAAIe,EAAY6B,GACPA,EAEF,IAAI,IAEb,GAAI7B,EAAYH,GAAW,CACzB,MAAMiC,QAAe1B,QAAQC,QAAQjB,EAAkBkB,SAAST,EAASkC,QAC3D,MAAVD,GACF/C,EAAOiD,QAAO,KACPC,KACHpC,EAASqC,YAEX9C,EAAkB+C,WAAWpD,EAAQ+C,GACjCjC,EAASuC,cACXvC,EAASwC,QACV,GAGN,CACF,CACF,GAAE,CAACjD,EAAmBL,EAAQE,IACzBd,EAAUmE,GAAQ,IACM,MAArBlD,GAAwC,MAAXH,EAAkBN,EAAeS,EAAmBwC,EAA+BtC,GAAS,IAC/H,CAACF,EAAmBwC,EAA+BjD,EAAgBM,EAASK,IACzEiD,EAAiBhD,GAAY,CAACiD,EAAgBC,EAAYC,KAC9D3D,EAAOiD,QAAO,KACZQ,EAAelE,SAASmE,GACxBC,GAAW,GACX,GACD,CAAC3D,IACJ,OAAkB,MAAXE,EAA+B0D,EAAGC,QAAAD,IAACE,EAAuB,CAC/D5D,QAASA,EACT6D,QAASxD,EACTiD,eAAgBA,EAChBpE,QAASA,EACTS,aAAcA,EACdmE,gBAAiBlE,IACd,IACP"}