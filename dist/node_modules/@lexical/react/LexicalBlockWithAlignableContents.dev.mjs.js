import{useLexicalComposerContext as e}from"./LexicalComposerContext.mjs.js";import{$isDecoratorBlockNode as t}from"./LexicalDecoratorBlockNode.mjs.js";import{useLexicalNodeSelection as r}from"./useLexicalNodeSelection.mjs.js";import{mergeRegister as o,$getNearestBlockElementAncestorOrThrow as s}from"@lexical/utils";import{FORMAT_ELEMENT_COMMAND as i,$getSelection as m,$isNodeSelection as l,$getNodeByKey as n,$isRangeSelection as a,COMMAND_PRIORITY_LOW as c,CLICK_COMMAND as f}from"lexical";import{useRef as u,useEffect as j}from"react";import"../../react/jsx-runtime.js";import{j as p}from"../../../_virtual/jsx-runtime.js";function x({children:x,format:d,nodeKey:g,className:N}){const[v]=e(),[C,h,y]=r(g),F=u(null);return j((()=>o(v.registerCommand(i,(e=>{if(C){const r=m();if(l(r)){const r=n(g);t(r)&&r.setFormat(e)}else if(a(r)){const o=r.getNodes();for(const r of o)if(t(r))r.setFormat(e);else{s(r).setFormat(e)}}return!0}return!1}),c),v.registerCommand(f,(e=>e.target===F.current&&(e.preventDefault(),e.shiftKey||y(),h(!C),!0)),c))),[y,v,C,g,h]),p.exports.jsx("div",{className:[N.base,C?N.focus:null].filter(Boolean).join(" "),ref:F,style:{textAlign:d||void 0},children:x})}export{x as BlockWithAlignableContents};
//# sourceMappingURL=LexicalBlockWithAlignableContents.dev.mjs.js.map
