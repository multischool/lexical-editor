import{useLexicalComposerContext as e}from"./LexicalComposerContext.mjs.js";import{$getSelection as t,$isNodeSelection as r,$createNodeSelection as o,$setSelection as n,$getNodeByKey as c}from"lexical";import{useState as i,useEffect as a,useCallback as l}from"react";function s(e,t){return e.getEditorState().read((()=>{const e=c(t);return null!==e&&e.isSelected()}))}function d(c){const[d]=e(),[u,m]=i((()=>s(d,c)));return a((()=>{let e=!0;const t=d.registerUpdateListener((()=>{e&&m(s(d,c))}));return()=>{e=!1,t()}}),[d,c]),[u,l((e=>{d.update((()=>{let i=t();r(i)||(i=o(),n(i)),r(i)&&(e?i.add(c):i.delete(c))}))}),[d,c]),l((()=>{d.update((()=>{const e=t();r(e)&&e.clear()}))}),[d])]}export{d as useLexicalNodeSelection};
//# sourceMappingURL=useLexicalNodeSelection.prod.mjs.js.map
