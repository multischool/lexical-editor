import{useCollaborationContext as e}from"./LexicalCollaborationContext.mjs.js";import{LexicalComposerContext as t,createLexicalComposerContext as o}from"./LexicalComposerContext.mjs.js";import{useRef as r,useContext as s,useMemo as n,useEffect as i}from"react";import"../../react/jsx-runtime.js";import{j as a}from"../../../_virtual/jsx-runtime.js";function l(e){const t=e.transform();return new Set(t?[t]:[])}function c({initialEditor:c,children:p,initialNodes:f,initialTheme:d,skipCollabChecks:m,skipEditableListener:u}){const h=r(!1),g=s(t);null==g&&function(e,...t){const o=new URL("https://lexical.dev/docs/error"),r=new URLSearchParams;r.append("code",e);for(const e of t)r.append("v",e);throw o.search=r.toString(),Error(`Minified Lexical error #${e}; visit ${o.toString()} for the full message or use the non-minified dev environment for full errors and additional helpful warnings.`)}(9);const[x,{getTheme:_}]=g,v=n((()=>{const e=d||_()||void 0,t=o(g,e);void 0!==e&&(c._config.theme=e),c._parentEditor=c._parentEditor||x;const r=c._createEditorArgs,s=r&&r.namespace;if(f){s||(c._config.namespace=x._config.namespace);for(let e of f){let t=null,o=null;if("function"!=typeof e){const r=e;e=r.replace,t=r.with,o=r.withKlass||null}const r=c._nodes.get(e.getType());c._nodes.set(e.getType(),{exportDOM:r?r.exportDOM:void 0,klass:e,replace:t,replaceWithKlass:o,transforms:l(e)})}}else if(r&&r.nodes)s||(c._config.namespace=x._config.namespace);else{const e=c._nodes=new Map(x._nodes);s||(c._config.namespace=x._config.namespace);for(const[t,o]of e)c._nodes.set(t,{exportDOM:o.exportDOM,klass:o.klass,replace:o.replace,replaceWithKlass:o.replaceWithKlass,transforms:l(o.klass)})}return[c,t]}),[]),{isCollabActive:j,yjsDocMap:E}=e(),w=m||h.current||E.has(c.getKey());return i((()=>{w&&(h.current=!0)}),[w]),i((()=>{if(!u){const e=e=>c.setEditable(e);return e(x.isEditable()),x.registerEditableListener(e)}}),[c,x,u]),a.exports.jsx(t.Provider,{value:v,children:!j||w?p:null})}export{c as LexicalNestedComposer};
//# sourceMappingURL=LexicalNestedComposer.prod.mjs.js.map
