import{useLexicalComposerContext as e}from"./LexicalComposerContext.mjs.js";import{useLexicalNodeSelection as t}from"./useLexicalNodeSelection.mjs.js";import{addClassNamesToElement as r,mergeRegister as n,removeClassNamesFromElement as o}from"@lexical/utils";import{createCommand as i,DecoratorNode as s,$applyNodeReplacement as c,CLICK_COMMAND as u,COMMAND_PRIORITY_LOW as m}from"lexical";import{useEffect as a}from"react";import"../../react/jsx-runtime.js";import{j as l}from"../../../_virtual/jsx-runtime.js";const p=i("INSERT_HORIZONTAL_RULE_COMMAND");function d({nodeKey:i}){const[s]=e(),[c,l,p]=t(i);return a((()=>n(s.registerCommand(u,(e=>{const t=s.getElementByKey(i);return e.target===t&&(e.shiftKey||p(),l(!c),!0)}),m))),[p,s,c,i,l]),a((()=>{const e=s.getElementByKey(i),t=s._config.theme.hrSelected??"selected";null!==e&&(c?r(e,t):o(e,t))}),[s,c,i]),null}class f extends s{static getType(){return"horizontalrule"}static clone(e){return new f(e.__key)}static importJSON(e){return N().updateFromJSON(e)}static importDOM(){return{hr:()=>({conversion:x,priority:0})}}exportDOM(){return{element:document.createElement("hr")}}createDOM(e){const t=document.createElement("hr");return r(t,e.theme.hr),t}getTextContent(){return"\n"}isInline(){return!1}updateDOM(){return!1}decorate(){return l.exports.jsx(d,{nodeKey:this.__key})}}function x(){return{node:N()}}function N(){return c(new f)}function O(e){return e instanceof f}export{N as $createHorizontalRuleNode,O as $isHorizontalRuleNode,f as HorizontalRuleNode,p as INSERT_HORIZONTAL_RULE_COMMAND};
//# sourceMappingURL=LexicalHorizontalRuleNode.prod.mjs.js.map
