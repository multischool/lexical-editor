{"version":3,"file":"LexicalTreeView.dev.mjs.js","sources":["../../../../node_modules/@lexical/react/LexicalTreeView.dev.mjs"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { useLexicalCommandsLog, TreeView as TreeView$1, generateContent } from '@lexical/devtools-core';\nimport { mergeRegister } from '@lexical/utils';\nimport * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport { jsx } from 'react/jsx-runtime';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction TreeView({\n  treeTypeButtonClassName,\n  timeTravelButtonClassName,\n  timeTravelPanelSliderClassName,\n  timeTravelPanelButtonClassName,\n  timeTravelPanelClassName,\n  viewClassName,\n  editor,\n  customPrintNode\n}) {\n  const treeElementRef = /*#__PURE__*/React.createRef();\n  const [editorCurrentState, setEditorCurrentState] = useState(editor.getEditorState());\n  const commandsLog = useLexicalCommandsLog(editor);\n  useEffect(() => {\n    // Registers listeners to update the tree view when the editor state changes\n    return mergeRegister(editor.registerUpdateListener(({\n      editorState\n    }) => {\n      setEditorCurrentState(editorState);\n    }), editor.registerEditableListener(() => {\n      setEditorCurrentState(editor.getEditorState());\n    }));\n  }, [editor]);\n  useEffect(() => {\n    const element = treeElementRef.current;\n    if (element !== null) {\n      // Assigns the editor instance to the tree view DOM element for internal tracking\n      // @ts-ignore Internal field used by Lexical\n      element.__lexicalEditor = editor;\n      return () => {\n        // Cleans up the reference when the component is unmounted\n        // @ts-ignore Internal field used by Lexical\n        element.__lexicalEditor = null;\n      };\n    }\n  }, [editor, treeElementRef]);\n\n  /**\n   * Handles toggling the readonly state of the editor.\n   *\n   * @param {boolean} isReadonly - Whether the editor should be set to readonly.\n   */\n  const handleEditorReadOnly = isReadonly => {\n    const rootElement = editor.getRootElement();\n    if (rootElement == null) {\n      return;\n    }\n    rootElement.contentEditable = isReadonly ? 'false' : 'true';\n  };\n  return /*#__PURE__*/jsx(TreeView$1, {\n    treeTypeButtonClassName: treeTypeButtonClassName,\n    timeTravelButtonClassName: timeTravelButtonClassName,\n    timeTravelPanelSliderClassName: timeTravelPanelSliderClassName,\n    timeTravelPanelButtonClassName: timeTravelPanelButtonClassName,\n    viewClassName: viewClassName,\n    timeTravelPanelClassName: timeTravelPanelClassName,\n    setEditorReadOnly: handleEditorReadOnly,\n    editorState: editorCurrentState,\n    setEditorState: state => editor.setEditorState(state),\n    generateContent: async function (exportDOM) {\n      // Generates the content for the tree view, allowing customization with exportDOM and customPrintNode\n      return generateContent(editor, commandsLog, exportDOM, customPrintNode);\n    },\n    ref: treeElementRef\n  });\n}\n\nexport { TreeView };\n"],"names":["TreeView","treeTypeButtonClassName","timeTravelButtonClassName","timeTravelPanelSliderClassName","timeTravelPanelButtonClassName","timeTravelPanelClassName","viewClassName","editor","customPrintNode","treeElementRef","React","createRef","editorCurrentState","setEditorCurrentState","useState","getEditorState","commandsLog","useLexicalCommandsLog","useEffect","mergeRegister","registerUpdateListener","editorState","registerEditableListener","element","current","__lexicalEditor","jsx","TreeView$1","setEditorReadOnly","isReadonly","rootElement","getRootElement","contentEditable","setEditorState","state","generateContent","async","exportDOM","ref"],"mappings":"sUAsBA,SAASA,GAASC,wBAChBA,EAAuBC,0BACvBA,EAAyBC,+BACzBA,EAA8BC,+BAC9BA,EAA8BC,yBAC9BA,EAAwBC,cACxBA,EAAaC,OACbA,EAAMC,gBACNA,IAEA,MAAMC,EAA8BC,EAAMC,aACnCC,EAAoBC,GAAyBC,EAASP,EAAOQ,kBAC9DC,EAAcC,EAAsBV,GAC1CW,GAAU,IAEDC,EAAcZ,EAAOa,wBAAuB,EACjDC,kBAEAR,EAAsBQ,EAAY,IAChCd,EAAOe,0BAAyB,KAClCT,EAAsBN,EAAOQ,iBAAiB,MAE/C,CAACR,IACJW,GAAU,KACR,MAAMK,EAAUd,EAAee,QAC/B,GAAgB,OAAZD,EAIF,OADAA,EAAQE,gBAAkBlB,EACnB,KAGLgB,EAAQE,gBAAkB,IAAI,CAEjC,GACA,CAAClB,EAAQE,IAcZ,OAAoBiB,EAAAA,QAAAA,IAAIC,EAAY,CAClC1B,wBAAyBA,EACzBC,0BAA2BA,EAC3BC,+BAAgCA,EAChCC,+BAAgCA,EAChCE,cAAeA,EACfD,yBAA0BA,EAC1BuB,kBAd2BC,IAC3B,MAAMC,EAAcvB,EAAOwB,iBACR,MAAfD,IAGJA,EAAYE,gBAAkBH,EAAa,QAAU,OAAM,EAU3DR,YAAaT,EACbqB,eAAgBC,GAAS3B,EAAO0B,eAAeC,GAC/CC,gBAAiBC,eAAgBC,GAE/B,OAAOF,EAAgB5B,EAAQS,EAAaqB,EAAW7B,EACxD,EACD8B,IAAK7B,GAET"}