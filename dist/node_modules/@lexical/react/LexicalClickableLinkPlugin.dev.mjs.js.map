{"version":3,"file":"LexicalClickableLinkPlugin.dev.mjs.js","sources":["../../../../node_modules/@lexical/react/LexicalClickableLinkPlugin.dev.mjs"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { $isLinkNode } from '@lexical/link';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { $findMatchingParent, isHTMLAnchorElement } from '@lexical/utils';\nimport { isDOMNode, getNearestEditorFromDOMNode, $getNearestNodeFromDOMNode, $isElementNode, $getSelection, $isRangeSelection } from 'lexical';\nimport { useEffect } from 'react';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction findMatchingDOM(startNode, predicate) {\n  let node = startNode;\n  while (node != null) {\n    if (predicate(node)) {\n      return node;\n    }\n    node = node.parentNode;\n  }\n  return null;\n}\nfunction ClickableLinkPlugin({\n  newTab = true,\n  disabled = false\n}) {\n  const [editor] = useLexicalComposerContext();\n  useEffect(() => {\n    const onClick = event => {\n      const target = event.target;\n      if (!isDOMNode(target)) {\n        return;\n      }\n      const nearestEditor = getNearestEditorFromDOMNode(target);\n      if (nearestEditor === null) {\n        return;\n      }\n      let url = null;\n      let urlTarget = null;\n      nearestEditor.update(() => {\n        const clickedNode = $getNearestNodeFromDOMNode(target);\n        if (clickedNode !== null) {\n          const maybeLinkNode = $findMatchingParent(clickedNode, $isElementNode);\n          if (!disabled) {\n            if ($isLinkNode(maybeLinkNode)) {\n              url = maybeLinkNode.sanitizeUrl(maybeLinkNode.getURL());\n              urlTarget = maybeLinkNode.getTarget();\n            } else {\n              const a = findMatchingDOM(target, isHTMLAnchorElement);\n              if (a !== null) {\n                url = a.href;\n                urlTarget = a.target;\n              }\n            }\n          }\n        }\n      });\n      if (url === null || url === '') {\n        return;\n      }\n\n      // Allow user to select link text without follwing url\n      const selection = editor.getEditorState().read($getSelection);\n      if ($isRangeSelection(selection) && !selection.isCollapsed()) {\n        event.preventDefault();\n        return;\n      }\n      const isMiddle = event.type === 'auxclick' && event.button === 1;\n      window.open(url, newTab || isMiddle || event.metaKey || event.ctrlKey || urlTarget === '_blank' ? '_blank' : '_self');\n      event.preventDefault();\n    };\n    const onMouseUp = event => {\n      if (event.button === 1) {\n        onClick(event);\n      }\n    };\n    return editor.registerRootListener((rootElement, prevRootElement) => {\n      if (prevRootElement !== null) {\n        prevRootElement.removeEventListener('click', onClick);\n        prevRootElement.removeEventListener('mouseup', onMouseUp);\n      }\n      if (rootElement !== null) {\n        rootElement.addEventListener('click', onClick);\n        rootElement.addEventListener('mouseup', onMouseUp);\n      }\n    });\n  }, [editor, newTab, disabled]);\n  return null;\n}\n\nexport { ClickableLinkPlugin };\n"],"names":["ClickableLinkPlugin","newTab","disabled","editor","useLexicalComposerContext","useEffect","onClick","event","target","isDOMNode","nearestEditor","getNearestEditorFromDOMNode","url","urlTarget","update","clickedNode","$getNearestNodeFromDOMNode","maybeLinkNode","$findMatchingParent","$isElementNode","$isLinkNode","sanitizeUrl","getURL","getTarget","a","startNode","predicate","node","parentNode","findMatchingDOM","isHTMLAnchorElement","href","selection","getEditorState","read","$getSelection","$isRangeSelection","isCollapsed","preventDefault","isMiddle","type","button","window","open","metaKey","ctrlKey","onMouseUp","registerRootListener","rootElement","prevRootElement","removeEventListener","addEventListener"],"mappings":"2YAgCA,SAASA,GAAoBC,OAC3BA,GAAS,EAAIC,SACbA,GAAW,IAEX,MAAOC,GAAUC,IA6DjB,OA5DAC,GAAU,KACR,MAAMC,EAAUC,IACd,MAAMC,EAASD,EAAMC,OACrB,IAAKC,EAAUD,GACb,OAEF,MAAME,EAAgBC,EAA4BH,GAClD,GAAsB,OAAlBE,EACF,OAEF,IAAIE,EAAM,KACNC,EAAY,KAmBhB,GAlBAH,EAAcI,QAAO,KACnB,MAAMC,EAAcC,EAA2BR,GAC/C,GAAoB,OAAhBO,EAAsB,CACxB,MAAME,EAAgBC,EAAoBH,EAAaI,GACvD,IAAKjB,EACH,GAAIkB,EAAYH,GACdL,EAAMK,EAAcI,YAAYJ,EAAcK,UAC9CT,EAAYI,EAAcM,gBACrB,CACL,MAAMC,EApCpB,SAAyBC,EAAWC,GAClC,IAAIC,EAAOF,EACX,KAAe,MAARE,GAAc,CACnB,GAAID,EAAUC,GACZ,OAAOA,EAETA,EAAOA,EAAKC,UACb,CACD,OAAO,IACT,CA2BwBC,CAAgBrB,EAAQsB,GACxB,OAANN,IACFZ,EAAMY,EAAEO,KACRlB,EAAYW,EAAEhB,OAEjB,CAEJ,KAES,OAARI,GAAwB,KAARA,EAClB,OAIF,MAAMoB,EAAY7B,EAAO8B,iBAAiBC,KAAKC,GAC/C,GAAIC,EAAkBJ,KAAeA,EAAUK,cAE7C,YADA9B,EAAM+B,iBAGR,MAAMC,EAA0B,aAAfhC,EAAMiC,MAAwC,IAAjBjC,EAAMkC,OACpDC,OAAOC,KAAK/B,EAAKX,GAAUsC,GAAYhC,EAAMqC,SAAWrC,EAAMsC,SAAyB,WAAdhC,EAAyB,SAAW,SAC7GN,EAAM+B,gBAAgB,EAElBQ,EAAYvC,IACK,IAAjBA,EAAMkC,QACRnC,EAAQC,EACT,EAEH,OAAOJ,EAAO4C,sBAAqB,CAACC,EAAaC,KACvB,OAApBA,IACFA,EAAgBC,oBAAoB,QAAS5C,GAC7C2C,EAAgBC,oBAAoB,UAAWJ,IAE7B,OAAhBE,IACFA,EAAYG,iBAAiB,QAAS7C,GACtC0C,EAAYG,iBAAiB,UAAWL,GACzC,GACD,GACD,CAAC3C,EAAQF,EAAQC,IACb,IACT"}