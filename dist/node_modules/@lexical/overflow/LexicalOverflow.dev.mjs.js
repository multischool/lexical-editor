import{ElementNode as t,$applyNodeReplacement as e}from"lexical";class r extends t{static getType(){return"overflow"}static clone(t){return new r(t.__key)}static importJSON(t){return n().updateFromJSON(t)}static importDOM(){return null}createDOM(t){const e=document.createElement("span"),r=t.theme.characterLimit;return"string"==typeof r&&(e.className=r),e}updateDOM(t,e){return!1}insertNewAfter(t,e=!0){return this.getParentOrThrow().insertNewAfter(t,e)}excludeFromCopy(){return!0}static transform(){return t=>{o(t)||function(t){throw new Error(t)}("node is not a OverflowNode"),t.isEmpty()&&t.remove()}}}function n(){return e(new r)}function o(t){return t instanceof r}export{n as $createOverflowNode,o as $isOverflowNode,r as OverflowNode};
//# sourceMappingURL=LexicalOverflow.dev.mjs.js.map
