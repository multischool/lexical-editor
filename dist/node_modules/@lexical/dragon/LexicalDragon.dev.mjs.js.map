{"version":3,"file":"LexicalDragon.dev.mjs.js","sources":["../../../../node_modules/@lexical/dragon/LexicalDragon.dev.mjs"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { $getSelection, $isRangeSelection, $isTextNode } from 'lexical';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction registerDragonSupport(editor) {\n  const origin = window.location.origin;\n  const handler = event => {\n    if (event.origin !== origin) {\n      return;\n    }\n    const rootElement = editor.getRootElement();\n    if (document.activeElement !== rootElement) {\n      return;\n    }\n    const data = event.data;\n    if (typeof data === 'string') {\n      let parsedData;\n      try {\n        parsedData = JSON.parse(data);\n      } catch (e) {\n        return;\n      }\n      if (parsedData && parsedData.protocol === 'nuanria_messaging' && parsedData.type === 'request') {\n        const payload = parsedData.payload;\n        if (payload && payload.functionId === 'makeChanges') {\n          const args = payload.args;\n          if (args) {\n            const [elementStart, elementLength, text, selStart, selLength, formatCommand] = args;\n            editor.update(() => {\n              const selection = $getSelection();\n              if ($isRangeSelection(selection)) {\n                const anchor = selection.anchor;\n                let anchorNode = anchor.getNode();\n                let setSelStart = 0;\n                let setSelEnd = 0;\n                if ($isTextNode(anchorNode)) {\n                  // set initial selection\n                  if (elementStart >= 0 && elementLength >= 0) {\n                    setSelStart = elementStart;\n                    setSelEnd = elementStart + elementLength;\n                    // If the offset is more than the end, make it the end\n                    selection.setTextNodeRange(anchorNode, setSelStart, anchorNode, setSelEnd);\n                  }\n                }\n                if (setSelStart !== setSelEnd || text !== '') {\n                  selection.insertRawText(text);\n                  anchorNode = anchor.getNode();\n                }\n                if ($isTextNode(anchorNode)) {\n                  // set final selection\n                  setSelStart = selStart;\n                  setSelEnd = selStart + selLength;\n                  const anchorNodeTextLength = anchorNode.getTextContentSize();\n                  // If the offset is more than the end, make it the end\n                  setSelStart = setSelStart > anchorNodeTextLength ? anchorNodeTextLength : setSelStart;\n                  setSelEnd = setSelEnd > anchorNodeTextLength ? anchorNodeTextLength : setSelEnd;\n                  selection.setTextNodeRange(anchorNode, setSelStart, anchorNode, setSelEnd);\n                }\n\n                // block the chrome extension from handling this event\n                event.stopImmediatePropagation();\n              }\n            });\n          }\n        }\n      }\n    }\n  };\n  window.addEventListener('message', handler, true);\n  return () => {\n    window.removeEventListener('message', handler, true);\n  };\n}\n\nexport { registerDragonSupport };\n"],"names":["registerDragonSupport","editor","origin","window","location","handler","event","rootElement","getRootElement","document","activeElement","data","parsedData","JSON","parse","e","protocol","type","payload","functionId","args","elementStart","elementLength","text","selStart","selLength","formatCommand","update","selection","$getSelection","$isRangeSelection","anchor","anchorNode","getNode","setSelStart","setSelEnd","$isTextNode","setTextNodeRange","insertRawText","anchorNodeTextLength","getTextContentSize","stopImmediatePropagation","addEventListener","removeEventListener"],"mappings":"gFAkBA,SAASA,EAAsBC,GAC7B,MAAMC,EAASC,OAAOC,SAASF,OACzBG,EAAUC,IACd,GAAIA,EAAMJ,SAAWA,EACnB,OAEF,MAAMK,EAAcN,EAAOO,iBAC3B,GAAIC,SAASC,gBAAkBH,EAC7B,OAEF,MAAMI,EAAOL,EAAMK,KACnB,GAAoB,iBAATA,EAAmB,CAC5B,IAAIC,EACJ,IACEA,EAAaC,KAAKC,MAAMH,EACzB,CAAC,MAAOI,GACP,MACD,CACD,GAAIH,GAAsC,sBAAxBA,EAAWI,UAAwD,YAApBJ,EAAWK,KAAoB,CAC9F,MAAMC,EAAUN,EAAWM,QAC3B,GAAIA,GAAkC,gBAAvBA,EAAQC,WAA8B,CACnD,MAAMC,EAAOF,EAAQE,KACrB,GAAIA,EAAM,CACR,MAAOC,EAAcC,EAAeC,EAAMC,EAAUC,EAAWC,GAAiBN,EAChFnB,EAAO0B,QAAO,KACZ,MAAMC,EAAYC,IAClB,GAAIC,EAAkBF,GAAY,CAChC,MAAMG,EAASH,EAAUG,OACzB,IAAIC,EAAaD,EAAOE,UACpBC,EAAc,EACdC,EAAY,EAchB,GAbIC,EAAYJ,IAEVX,GAAgB,GAAKC,GAAiB,IACxCY,EAAcb,EACdc,EAAYd,EAAeC,EAE3BM,EAAUS,iBAAiBL,EAAYE,EAAaF,EAAYG,IAGhED,IAAgBC,GAAsB,KAATZ,IAC/BK,EAAUU,cAAcf,GACxBS,EAAaD,EAAOE,WAElBG,EAAYJ,GAAa,CAE3BE,EAAcV,EACdW,EAAYX,EAAWC,EACvB,MAAMc,EAAuBP,EAAWQ,qBAExCN,EAAcA,EAAcK,EAAuBA,EAAuBL,EAC1EC,EAAYA,EAAYI,EAAuBA,EAAuBJ,EACtEP,EAAUS,iBAAiBL,EAAYE,EAAaF,EAAYG,EACjE,CAGD7B,EAAMmC,0BACP,IAEJ,CACF,CACF,CACF,GAGH,OADAtC,OAAOuC,iBAAiB,UAAWrC,GAAS,GACrC,KACLF,OAAOwC,oBAAoB,UAAWtC,GAAS,EAAK,CAExD"}