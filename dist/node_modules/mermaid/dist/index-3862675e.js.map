{"version":3,"file":"index-3862675e.js","sources":["../../../../node_modules/mermaid/dist/index-3862675e.js"],"sourcesContent":["import { layout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlibJson from \"dagre-d3-es/src/graphlib/json.js\";\nimport { c as createLabel, g as getSubGraphTitleMargins, i as intersectRect, a as insertMarkers, b as clear$2, d as clear$3, u as updateNodeBounds, s as setNodeElem, e as insertNode, f as insertEdgeLabel, p as positionNode, h as insertEdge, j as positionEdgeLabel } from \"./edges-e0da2a9e.js\";\nimport { l as log, c as getConfig, m as evaluate } from \"./mermaid-b5860b54.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { a as createText } from \"./createText-2e5e7dd3.js\";\nimport { select } from \"d3\";\nlet clusterDb = {};\nlet descendants = {};\nlet parents = {};\nconst clear$1 = () => {\n  descendants = {};\n  parents = {};\n  clusterDb = {};\n};\nconst isDescendant = (id, ancestorId) => {\n  log.trace(\"In isDescendant\", ancestorId, \" \", id, \" = \", descendants[ancestorId].includes(id));\n  if (descendants[ancestorId].includes(id)) {\n    return true;\n  }\n  return false;\n};\nconst edgeInCluster = (edge, clusterId) => {\n  log.info(\"Descendants of \", clusterId, \" is \", descendants[clusterId]);\n  log.info(\"Edge is \", edge);\n  if (edge.v === clusterId) {\n    return false;\n  }\n  if (edge.w === clusterId) {\n    return false;\n  }\n  if (!descendants[clusterId]) {\n    log.debug(\"Tilt, \", clusterId, \",not in descendants\");\n    return false;\n  }\n  return descendants[clusterId].includes(edge.v) || isDescendant(edge.v, clusterId) || isDescendant(edge.w, clusterId) || descendants[clusterId].includes(edge.w);\n};\nconst copy = (clusterId, graph, newGraph, rootId) => {\n  log.warn(\n    \"Copying children of \",\n    clusterId,\n    \"root\",\n    rootId,\n    \"data\",\n    graph.node(clusterId),\n    rootId\n  );\n  const nodes = graph.children(clusterId) || [];\n  if (clusterId !== rootId) {\n    nodes.push(clusterId);\n  }\n  log.warn(\"Copying (nodes) clusterId\", clusterId, \"nodes\", nodes);\n  nodes.forEach((node) => {\n    if (graph.children(node).length > 0) {\n      copy(node, graph, newGraph, rootId);\n    } else {\n      const data = graph.node(node);\n      log.info(\"cp \", node, \" to \", rootId, \" with parent \", clusterId);\n      newGraph.setNode(node, data);\n      if (rootId !== graph.parent(node)) {\n        log.warn(\"Setting parent\", node, graph.parent(node));\n        newGraph.setParent(node, graph.parent(node));\n      }\n      if (clusterId !== rootId && node !== clusterId) {\n        log.debug(\"Setting parent\", node, clusterId);\n        newGraph.setParent(node, clusterId);\n      } else {\n        log.info(\"In copy \", clusterId, \"root\", rootId, \"data\", graph.node(clusterId), rootId);\n        log.debug(\n          \"Not Setting parent for node=\",\n          node,\n          \"cluster!==rootId\",\n          clusterId !== rootId,\n          \"node!==clusterId\",\n          node !== clusterId\n        );\n      }\n      const edges = graph.edges(node);\n      log.debug(\"Copying Edges\", edges);\n      edges.forEach((edge) => {\n        log.info(\"Edge\", edge);\n        const data2 = graph.edge(edge.v, edge.w, edge.name);\n        log.info(\"Edge data\", data2, rootId);\n        try {\n          if (edgeInCluster(edge, rootId)) {\n            log.info(\"Copying as \", edge.v, edge.w, data2, edge.name);\n            newGraph.setEdge(edge.v, edge.w, data2, edge.name);\n            log.info(\"newGraph edges \", newGraph.edges(), newGraph.edge(newGraph.edges()[0]));\n          } else {\n            log.info(\n              \"Skipping copy of edge \",\n              edge.v,\n              \"-->\",\n              edge.w,\n              \" rootId: \",\n              rootId,\n              \" clusterId:\",\n              clusterId\n            );\n          }\n        } catch (e) {\n          log.error(e);\n        }\n      });\n    }\n    log.debug(\"Removing node\", node);\n    graph.removeNode(node);\n  });\n};\nconst extractDescendants = (id, graph) => {\n  const children = graph.children(id);\n  let res = [...children];\n  for (const child of children) {\n    parents[child] = id;\n    res = [...res, ...extractDescendants(child, graph)];\n  }\n  return res;\n};\nconst findNonClusterChild = (id, graph) => {\n  log.trace(\"Searching\", id);\n  const children = graph.children(id);\n  log.trace(\"Searching children of id \", id, children);\n  if (children.length < 1) {\n    log.trace(\"This is a valid node\", id);\n    return id;\n  }\n  for (const child of children) {\n    const _id = findNonClusterChild(child, graph);\n    if (_id) {\n      log.trace(\"Found replacement for\", id, \" => \", _id);\n      return _id;\n    }\n  }\n};\nconst getAnchorId = (id) => {\n  if (!clusterDb[id]) {\n    return id;\n  }\n  if (!clusterDb[id].externalConnections) {\n    return id;\n  }\n  if (clusterDb[id]) {\n    return clusterDb[id].id;\n  }\n  return id;\n};\nconst adjustClustersAndEdges = (graph, depth) => {\n  if (!graph || depth > 10) {\n    log.debug(\"Opting out, no graph \");\n    return;\n  } else {\n    log.debug(\"Opting in, graph \");\n  }\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    if (children.length > 0) {\n      log.warn(\n        \"Cluster identified\",\n        id,\n        \" Replacement id in edges: \",\n        findNonClusterChild(id, graph)\n      );\n      descendants[id] = extractDescendants(id, graph);\n      clusterDb[id] = { id: findNonClusterChild(id, graph), clusterData: graph.node(id) };\n    }\n  });\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    const edges = graph.edges();\n    if (children.length > 0) {\n      log.debug(\"Cluster identified\", id, descendants);\n      edges.forEach((edge) => {\n        if (edge.v !== id && edge.w !== id) {\n          const d1 = isDescendant(edge.v, id);\n          const d2 = isDescendant(edge.w, id);\n          if (d1 ^ d2) {\n            log.warn(\"Edge: \", edge, \" leaves cluster \", id);\n            log.warn(\"Descendants of XXX \", id, \": \", descendants[id]);\n            clusterDb[id].externalConnections = true;\n          }\n        }\n      });\n    } else {\n      log.debug(\"Not a cluster \", id, descendants);\n    }\n  });\n  for (let id of Object.keys(clusterDb)) {\n    const nonClusterChild = clusterDb[id].id;\n    const parent = graph.parent(nonClusterChild);\n    if (parent !== id && clusterDb[parent] && !clusterDb[parent].externalConnections) {\n      clusterDb[id].id = parent;\n    }\n  }\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n    let v = e.v;\n    let w = e.w;\n    log.warn(\n      \"Fix XXX\",\n      clusterDb,\n      \"ids:\",\n      e.v,\n      e.w,\n      \"Translating: \",\n      clusterDb[e.v],\n      \" --- \",\n      clusterDb[e.w]\n    );\n    if (clusterDb[e.v] && clusterDb[e.w] && clusterDb[e.v] === clusterDb[e.w]) {\n      log.warn(\"Fixing and trixing link to self - removing XXX\", e.v, e.w, e.name);\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      const specialId = e.w + \"---\" + e.v;\n      graph.setNode(specialId, {\n        domId: specialId,\n        id: specialId,\n        labelStyle: \"\",\n        labelText: edge.label,\n        padding: 0,\n        shape: \"labelRect\",\n        style: \"\"\n      });\n      const edge1 = structuredClone(edge);\n      const edge2 = structuredClone(edge);\n      edge1.label = \"\";\n      edge1.arrowTypeEnd = \"none\";\n      edge2.label = \"\";\n      edge1.fromCluster = e.v;\n      edge2.toCluster = e.v;\n      graph.setEdge(v, specialId, edge1, e.name + \"-cyclic-special\");\n      graph.setEdge(specialId, w, edge2, e.name + \"-cyclic-special\");\n    } else if (clusterDb[e.v] || clusterDb[e.w]) {\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      if (v !== e.v) {\n        const parent = graph.parent(v);\n        clusterDb[parent].externalConnections = true;\n        edge.fromCluster = e.v;\n      }\n      if (w !== e.w) {\n        const parent = graph.parent(w);\n        clusterDb[parent].externalConnections = true;\n        edge.toCluster = e.w;\n      }\n      log.warn(\"Fix Replacing with XXX\", v, w, e.name);\n      graph.setEdge(v, w, edge, e.name);\n    }\n  });\n  log.warn(\"Adjusted Graph\", graphlibJson.write(graph));\n  extractor(graph, 0);\n  log.trace(clusterDb);\n};\nconst extractor = (graph, depth) => {\n  log.warn(\"extractor - \", depth, graphlibJson.write(graph), graph.children(\"D\"));\n  if (depth > 10) {\n    log.error(\"Bailing out\");\n    return;\n  }\n  let nodes = graph.nodes();\n  let hasChildren = false;\n  for (const node of nodes) {\n    const children = graph.children(node);\n    hasChildren = hasChildren || children.length > 0;\n  }\n  if (!hasChildren) {\n    log.debug(\"Done, no node has children\", graph.nodes());\n    return;\n  }\n  log.debug(\"Nodes = \", nodes, depth);\n  for (const node of nodes) {\n    log.debug(\n      \"Extracting node\",\n      node,\n      clusterDb,\n      clusterDb[node] && !clusterDb[node].externalConnections,\n      !graph.parent(node),\n      graph.node(node),\n      graph.children(\"D\"),\n      \" Depth \",\n      depth\n    );\n    if (!clusterDb[node]) {\n      log.debug(\"Not a cluster\", node, depth);\n    } else if (!clusterDb[node].externalConnections && // !graph.parent(node) &&\n    graph.children(node) && graph.children(node).length > 0) {\n      log.warn(\n        \"Cluster without external connections, without a parent and with children\",\n        node,\n        depth\n      );\n      const graphSettings = graph.graph();\n      let dir = graphSettings.rankdir === \"TB\" ? \"LR\" : \"TB\";\n      if (clusterDb[node] && clusterDb[node].clusterData && clusterDb[node].clusterData.dir) {\n        dir = clusterDb[node].clusterData.dir;\n        log.warn(\"Fixing dir\", clusterDb[node].clusterData.dir, dir);\n      }\n      const clusterGraph = new graphlib.Graph({\n        multigraph: true,\n        compound: true\n      }).setGraph({\n        rankdir: dir,\n        // Todo: set proper spacing\n        nodesep: 50,\n        ranksep: 50,\n        marginx: 8,\n        marginy: 8\n      }).setDefaultEdgeLabel(function() {\n        return {};\n      });\n      log.warn(\"Old graph before copy\", graphlibJson.write(graph));\n      copy(node, graph, clusterGraph, node);\n      graph.setNode(node, {\n        clusterNode: true,\n        id: node,\n        clusterData: clusterDb[node].clusterData,\n        labelText: clusterDb[node].labelText,\n        graph: clusterGraph\n      });\n      log.warn(\"New graph after copy node: (\", node, \")\", graphlibJson.write(clusterGraph));\n      log.debug(\"Old graph after copy\", graphlibJson.write(graph));\n    } else {\n      log.warn(\n        \"Cluster ** \",\n        node,\n        \" **not meeting the criteria !externalConnections:\",\n        !clusterDb[node].externalConnections,\n        \" no parent: \",\n        !graph.parent(node),\n        \" children \",\n        graph.children(node) && graph.children(node).length > 0,\n        graph.children(\"D\"),\n        depth\n      );\n      log.debug(clusterDb);\n    }\n  }\n  nodes = graph.nodes();\n  log.warn(\"New list of nodes\", nodes);\n  for (const node of nodes) {\n    const data = graph.node(node);\n    log.warn(\" Now next level\", node, data);\n    if (data.clusterNode) {\n      extractor(data.graph, depth + 1);\n    }\n  }\n};\nconst sorter = (graph, nodes) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n  let result = Object.assign(nodes);\n  nodes.forEach((node) => {\n    const children = graph.children(node);\n    const sorted = sorter(graph, children);\n    result = [...result, ...sorted];\n  });\n  return result;\n};\nconst sortNodesByHierarchy = (graph) => sorter(graph, graph.children());\nconst rect = (parent, node) => {\n  log.info(\"Creating subgraph rect for \", node.id, node);\n  const siteConfig = getConfig();\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"cluster\" + (node.class ? \" \" + node.class : \"\")).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const useHtmlLabels = evaluate(siteConfig.flowchart.htmlLabels);\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  const text = node.labelType === \"markdown\" ? createText(label, node.labelText, { style: node.labelStyle, useHtmlLabels }) : label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\n  let bbox = text.getBBox();\n  if (evaluate(siteConfig.flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = node.width <= bbox.width + padding ? bbox.width + padding : node.width;\n  if (node.width <= bbox.width + padding) {\n    node.diff = (bbox.width - node.width) / 2 - node.padding / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n  log.trace(\"Data \", node, JSON.stringify(node));\n  rect2.attr(\"style\", node.style).attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - width / 2).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width).attr(\"height\", node.height + padding);\n  const { subGraphTitleTopMargin } = getSubGraphTitleMargins(siteConfig);\n  if (useHtmlLabels) {\n    label.attr(\n      \"transform\",\n      // This puts the label on top of the box instead of inside it\n      `translate(${node.x - bbox.width / 2}, ${node.y - node.height / 2 + subGraphTitleTopMargin})`\n    );\n  } else {\n    label.attr(\n      \"transform\",\n      // This puts the label on top of the box instead of inside it\n      `translate(${node.x}, ${node.y - node.height / 2 + subGraphTitleTopMargin})`\n    );\n  }\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst noteGroup = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"note-cluster\").attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding).attr(\"fill\", \"none\");\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst roundedWithTitle = (parent, node) => {\n  const siteConfig = getConfig();\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  const innerRect = shapeSvg.append(\"rect\");\n  const text = label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\n  let bbox = text.getBBox();\n  if (evaluate(siteConfig.flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  bbox = text.getBBox();\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = node.width <= bbox.width + node.padding ? bbox.width + node.padding : node.width;\n  if (node.width <= bbox.width + node.padding) {\n    node.diff = (bbox.width + node.padding * 0 - node.width) / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n  rect2.attr(\"class\", \"outer\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width + padding).attr(\"height\", node.height + padding);\n  innerRect.attr(\"class\", \"inner\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding + bbox.height - 1).attr(\"width\", width + padding).attr(\"height\", node.height + padding - bbox.height - 3);\n  const { subGraphTitleTopMargin } = getSubGraphTitleMargins(siteConfig);\n  label.attr(\n    \"transform\",\n    `translate(${node.x - bbox.width / 2}, ${node.y - node.height / 2 - node.padding / 3 + (evaluate(siteConfig.flowchart.htmlLabels) ? 5 : 3) + subGraphTitleTopMargin})`\n  );\n  const rectBox = rect2.node().getBBox();\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst divider = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"class\", \"divider\").attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding);\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.diff = -node.padding / 2;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst shapes = { rect, roundedWithTitle, noteGroup, divider };\nlet clusterElems = {};\nconst insertCluster = (elem, node) => {\n  log.trace(\"Inserting cluster\");\n  const shape = node.shape || \"rect\";\n  clusterElems[node.id] = shapes[shape](elem, node);\n};\nconst clear = () => {\n  clusterElems = {};\n};\nconst recursiveRender = async (_elem, graph, diagramType, id, parentCluster, siteConfig) => {\n  log.info(\"Graph in recursive render: XXX\", graphlibJson.write(graph), parentCluster);\n  const dir = graph.graph().rankdir;\n  log.trace(\"Dir in recursive render - dir:\", dir);\n  const elem = _elem.insert(\"g\").attr(\"class\", \"root\");\n  if (!graph.nodes()) {\n    log.info(\"No nodes found for\", graph);\n  } else {\n    log.info(\"Recursive render XXX\", graph.nodes());\n  }\n  if (graph.edges().length > 0) {\n    log.trace(\"Recursive edges\", graph.edge(graph.edges()[0]));\n  }\n  const clusters = elem.insert(\"g\").attr(\"class\", \"clusters\");\n  const edgePaths = elem.insert(\"g\").attr(\"class\", \"edgePaths\");\n  const edgeLabels = elem.insert(\"g\").attr(\"class\", \"edgeLabels\");\n  const nodes = elem.insert(\"g\").attr(\"class\", \"nodes\");\n  await Promise.all(\n    graph.nodes().map(async function(v) {\n      const node = graph.node(v);\n      if (parentCluster !== void 0) {\n        const data = JSON.parse(JSON.stringify(parentCluster.clusterData));\n        log.info(\"Setting data for cluster XXX (\", v, \") \", data, parentCluster);\n        graph.setNode(parentCluster.id, data);\n        if (!graph.parent(v)) {\n          log.trace(\"Setting parent\", v, parentCluster.id);\n          graph.setParent(v, parentCluster.id, data);\n        }\n      }\n      log.info(\"(Insert) Node XXX\" + v + \": \" + JSON.stringify(graph.node(v)));\n      if (node && node.clusterNode) {\n        log.info(\"Cluster identified\", v, node.width, graph.node(v));\n        const o = await recursiveRender(\n          nodes,\n          node.graph,\n          diagramType,\n          id,\n          graph.node(v),\n          siteConfig\n        );\n        const newEl = o.elem;\n        updateNodeBounds(node, newEl);\n        node.diff = o.diff || 0;\n        log.info(\"Node bounds (abc123)\", v, node, node.width, node.x, node.y);\n        setNodeElem(newEl, node);\n        log.warn(\"Recursive render complete \", newEl, node);\n      } else {\n        if (graph.children(v).length > 0) {\n          log.info(\"Cluster - the non recursive path XXX\", v, node.id, node, graph);\n          log.info(findNonClusterChild(node.id, graph));\n          clusterDb[node.id] = { id: findNonClusterChild(node.id, graph), node };\n        } else {\n          log.info(\"Node - the non recursive path\", v, node.id, node);\n          await insertNode(nodes, graph.node(v), dir);\n        }\n      }\n    })\n  );\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e.v, e.w, e.name);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \", e, \" \", JSON.stringify(graph.edge(e)));\n    log.info(\"Fix\", clusterDb, \"ids:\", e.v, e.w, \"Translating: \", clusterDb[e.v], clusterDb[e.w]);\n    insertEdgeLabel(edgeLabels, edge);\n  });\n  graph.edges().forEach(function(e) {\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n  });\n  log.info(\"#############################################\");\n  log.info(\"###                Layout                 ###\");\n  log.info(\"#############################################\");\n  log.info(graph);\n  layout(graph);\n  log.info(\"Graph after layout:\", graphlibJson.write(graph));\n  let diff = 0;\n  const { subGraphTitleTotalMargin } = getSubGraphTitleMargins(siteConfig);\n  sortNodesByHierarchy(graph).forEach(function(v) {\n    const node = graph.node(v);\n    log.info(\"Position \" + v + \": \" + JSON.stringify(graph.node(v)));\n    log.info(\n      \"Position \" + v + \": (\" + node.x,\n      \",\" + node.y,\n      \") width: \",\n      node.width,\n      \" height: \",\n      node.height\n    );\n    if (node && node.clusterNode) {\n      node.y += subGraphTitleTotalMargin;\n      positionNode(node);\n    } else {\n      if (graph.children(v).length > 0) {\n        node.height += subGraphTitleTotalMargin;\n        insertCluster(clusters, node);\n        clusterDb[node.id].node = node;\n      } else {\n        node.y += subGraphTitleTotalMargin / 2;\n        positionNode(node);\n      }\n    }\n  });\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(edge), edge);\n    edge.points.forEach((point) => point.y += subGraphTitleTotalMargin / 2);\n    const paths = insertEdge(edgePaths, e, edge, clusterDb, diagramType, graph, id);\n    positionEdgeLabel(edge, paths);\n  });\n  graph.nodes().forEach(function(v) {\n    const n = graph.node(v);\n    log.info(v, n.type, n.diff);\n    if (n.type === \"group\") {\n      diff = n.diff;\n    }\n  });\n  return { elem, diff };\n};\nconst render = async (elem, graph, markers, diagramType, id) => {\n  insertMarkers(elem, markers, diagramType, id);\n  clear$2();\n  clear$3();\n  clear();\n  clear$1();\n  log.warn(\"Graph at first:\", JSON.stringify(graphlibJson.write(graph)));\n  adjustClustersAndEdges(graph);\n  log.warn(\"Graph after:\", JSON.stringify(graphlibJson.write(graph)));\n  const siteConfig = getConfig();\n  await recursiveRender(elem, graph, diagramType, id, void 0, siteConfig);\n};\nexport {\n  render as r\n};\n"],"names":["clusterDb","descendants","parents","isDescendant","id","ancestorId","log","trace","includes","copy","clusterId","graph","newGraph","rootId","warn","node","nodes","children","push","forEach","length","data","info","setNode","parent","setParent","debug","edges","edge","data2","v","w","name","edgeInCluster","setEdge","e","error","removeNode","extractDescendants","res","child","findNonClusterChild","_id","getAnchorId","externalConnections","extractor","depth","graphlibJson.write","hasChildren","dir","rankdir","clusterData","clusterGraph","graphlib.Graph","multigraph","compound","setGraph","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","clusterNode","labelText","sorter","result","Object","assign","sorted","shapes","rect","siteConfig","getConfig","shapeSvg","insert","attr","class","rect2","useHtmlLabels","evaluate","flowchart","htmlLabels","label","text","labelType","createText","style","labelStyle","appendChild","createLabel","bbox","getBBox","div","dv","select","getBoundingClientRect","width","height","padding","halfPadding","diff","JSON","stringify","rx","ry","x","y","subGraphTitleTopMargin","getSubGraphTitleMargins","rectBox","intersect","point","intersectRect","roundedWithTitle","classes","innerRect","append","noteGroup","divider","clusterElems","recursiveRender","async","_elem","diagramType","parentCluster","elem","clusters","edgePaths","edgeLabels","Promise","all","map","parse","o","newEl","updateNodeBounds","setNodeElem","insertNode","insertEdgeLabel","layout","subGraphTitleTotalMargin","sortNodesByHierarchy","positionNode","shape","insertCluster","points","paths","insertEdge","positionEdgeLabel","n","type","render","markers","insertMarkers","clear$2","clear$3","keys","nonClusterChild","removeEdge","specialId","domId","edge1","structuredClone","edge2","arrowTypeEnd","fromCluster","toCluster","adjustClustersAndEdges"],"mappings":"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"}