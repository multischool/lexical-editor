{"version":3,"file":"flowchart-elk-definition-4a651766.js","sources":["../../../../node_modules/mermaid/dist/flowchart-elk-definition-4a651766.js"],"sourcesContent":["import { d as db, p as parser } from \"./flowDb-956e92f1.js\";\nimport { select, curveLinear, line } from \"d3\";\nimport { a as insertMarkers, e as insertNode, l as labelHelper, f as insertEdgeLabel, k as getLineFunctionsWithOffset, m as addEdgeMarkers } from \"./edges-e0da2a9e.js\";\nimport { l as log, F as getConfig, o as setupGraphViewbox, k as getStylesFromArray, n as interpolateToCurve, e as common } from \"./mermaid-b5860b54.js\";\nimport ELK from \"elkjs/lib/elk.bundled.js\";\nimport \"./createText-2e5e7dd3.js\";\nimport \"mdast-util-from-markdown\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nconst findCommonAncestor = (id1, id2, treeData) => {\n  const { parentById } = treeData;\n  const visited = /* @__PURE__ */ new Set();\n  let currentId = id1;\n  while (currentId) {\n    visited.add(currentId);\n    if (currentId === id2) {\n      return currentId;\n    }\n    currentId = parentById[currentId];\n  }\n  currentId = id2;\n  while (currentId) {\n    if (visited.has(currentId)) {\n      return currentId;\n    }\n    currentId = parentById[currentId];\n  }\n  return \"root\";\n};\nconst elk = new ELK();\nlet portPos = {};\nconst conf = {};\nlet nodeDb = {};\nconst addVertices = async function(vert, svgId, root, doc, diagObj, parentLookupDb, graph) {\n  const svg = root.select(`[id=\"${svgId}\"]`);\n  const nodes = svg.insert(\"g\").attr(\"class\", \"nodes\");\n  const keys = Object.keys(vert);\n  await Promise.all(\n    keys.map(async function(id) {\n      const vertex = vert[id];\n      let classStr = \"default\";\n      if (vertex.classes.length > 0) {\n        classStr = vertex.classes.join(\" \");\n      }\n      classStr = classStr + \" flowchart-label\";\n      const styles2 = getStylesFromArray(vertex.styles);\n      let vertexText = vertex.text !== void 0 ? vertex.text : vertex.id;\n      const labelData = { width: 0, height: 0 };\n      const ports = [\n        {\n          id: vertex.id + \"-west\",\n          layoutOptions: {\n            \"port.side\": \"WEST\"\n          }\n        },\n        {\n          id: vertex.id + \"-east\",\n          layoutOptions: {\n            \"port.side\": \"EAST\"\n          }\n        },\n        {\n          id: vertex.id + \"-south\",\n          layoutOptions: {\n            \"port.side\": \"SOUTH\"\n          }\n        },\n        {\n          id: vertex.id + \"-north\",\n          layoutOptions: {\n            \"port.side\": \"NORTH\"\n          }\n        }\n      ];\n      let radius = 0;\n      let _shape = \"\";\n      let layoutOptions = {};\n      switch (vertex.type) {\n        case \"round\":\n          radius = 5;\n          _shape = \"rect\";\n          break;\n        case \"square\":\n          _shape = \"rect\";\n          break;\n        case \"diamond\":\n          _shape = \"question\";\n          layoutOptions = {\n            portConstraints: \"FIXED_SIDE\"\n          };\n          break;\n        case \"hexagon\":\n          _shape = \"hexagon\";\n          break;\n        case \"odd\":\n          _shape = \"rect_left_inv_arrow\";\n          break;\n        case \"lean_right\":\n          _shape = \"lean_right\";\n          break;\n        case \"lean_left\":\n          _shape = \"lean_left\";\n          break;\n        case \"trapezoid\":\n          _shape = \"trapezoid\";\n          break;\n        case \"inv_trapezoid\":\n          _shape = \"inv_trapezoid\";\n          break;\n        case \"odd_right\":\n          _shape = \"rect_left_inv_arrow\";\n          break;\n        case \"circle\":\n          _shape = \"circle\";\n          break;\n        case \"ellipse\":\n          _shape = \"ellipse\";\n          break;\n        case \"stadium\":\n          _shape = \"stadium\";\n          break;\n        case \"subroutine\":\n          _shape = \"subroutine\";\n          break;\n        case \"cylinder\":\n          _shape = \"cylinder\";\n          break;\n        case \"group\":\n          _shape = \"rect\";\n          break;\n        case \"doublecircle\":\n          _shape = \"doublecircle\";\n          break;\n        default:\n          _shape = \"rect\";\n      }\n      const node = {\n        labelStyle: styles2.labelStyle,\n        shape: _shape,\n        labelText: vertexText,\n        labelType: vertex.labelType,\n        rx: radius,\n        ry: radius,\n        class: classStr,\n        style: styles2.style,\n        id: vertex.id,\n        link: vertex.link,\n        linkTarget: vertex.linkTarget,\n        tooltip: diagObj.db.getTooltip(vertex.id) || \"\",\n        domId: diagObj.db.lookUpDomId(vertex.id),\n        haveCallback: vertex.haveCallback,\n        width: vertex.type === \"group\" ? 500 : void 0,\n        dir: vertex.dir,\n        type: vertex.type,\n        props: vertex.props,\n        padding: getConfig().flowchart.padding\n      };\n      let boundingBox;\n      let nodeEl;\n      if (node.type !== \"group\") {\n        nodeEl = await insertNode(nodes, node, vertex.dir);\n        boundingBox = nodeEl.node().getBBox();\n      } else {\n        doc.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n        const { shapeSvg, bbox } = await labelHelper(nodes, node, void 0, true);\n        labelData.width = bbox.width;\n        labelData.wrappingWidth = getConfig().flowchart.wrappingWidth;\n        labelData.height = bbox.height;\n        labelData.labelNode = shapeSvg.node();\n        node.labelData = labelData;\n      }\n      const data = {\n        id: vertex.id,\n        ports: vertex.type === \"diamond\" ? ports : [],\n        // labelStyle: styles.labelStyle,\n        // shape: _shape,\n        layoutOptions,\n        labelText: vertexText,\n        labelData,\n        // labels: [{ text: vertexText }],\n        // rx: radius,\n        // ry: radius,\n        // class: classStr,\n        // style: styles.style,\n        // link: vertex.link,\n        // linkTarget: vertex.linkTarget,\n        // tooltip: diagObj.db.getTooltip(vertex.id) || '',\n        domId: diagObj.db.lookUpDomId(vertex.id),\n        // haveCallback: vertex.haveCallback,\n        width: boundingBox == null ? void 0 : boundingBox.width,\n        height: boundingBox == null ? void 0 : boundingBox.height,\n        // dir: vertex.dir,\n        type: vertex.type,\n        // props: vertex.props,\n        // padding: getConfig().flowchart.padding,\n        // boundingBox,\n        el: nodeEl,\n        parent: parentLookupDb.parentById[vertex.id]\n      };\n      nodeDb[node.id] = data;\n    })\n  );\n  return graph;\n};\nconst getNextPosition = (position, edgeDirection, graphDirection) => {\n  const portPos2 = {\n    TB: {\n      in: {\n        north: \"north\"\n      },\n      out: {\n        south: \"west\",\n        west: \"east\",\n        east: \"south\"\n      }\n    },\n    LR: {\n      in: {\n        west: \"west\"\n      },\n      out: {\n        east: \"south\",\n        south: \"north\",\n        north: \"east\"\n      }\n    },\n    RL: {\n      in: {\n        east: \"east\"\n      },\n      out: {\n        west: \"north\",\n        north: \"south\",\n        south: \"west\"\n      }\n    },\n    BT: {\n      in: {\n        south: \"south\"\n      },\n      out: {\n        north: \"east\",\n        east: \"west\",\n        west: \"north\"\n      }\n    }\n  };\n  portPos2.TD = portPos2.TB;\n  return portPos2[graphDirection][edgeDirection][position];\n};\nconst getNextPort = (node, edgeDirection, graphDirection) => {\n  log.info(\"getNextPort\", { node, edgeDirection, graphDirection });\n  if (!portPos[node]) {\n    switch (graphDirection) {\n      case \"TB\":\n      case \"TD\":\n        portPos[node] = {\n          inPosition: \"north\",\n          outPosition: \"south\"\n        };\n        break;\n      case \"BT\":\n        portPos[node] = {\n          inPosition: \"south\",\n          outPosition: \"north\"\n        };\n        break;\n      case \"RL\":\n        portPos[node] = {\n          inPosition: \"east\",\n          outPosition: \"west\"\n        };\n        break;\n      case \"LR\":\n        portPos[node] = {\n          inPosition: \"west\",\n          outPosition: \"east\"\n        };\n        break;\n    }\n  }\n  const result = edgeDirection === \"in\" ? portPos[node].inPosition : portPos[node].outPosition;\n  if (edgeDirection === \"in\") {\n    portPos[node].inPosition = getNextPosition(\n      portPos[node].inPosition,\n      edgeDirection,\n      graphDirection\n    );\n  } else {\n    portPos[node].outPosition = getNextPosition(\n      portPos[node].outPosition,\n      edgeDirection,\n      graphDirection\n    );\n  }\n  return result;\n};\nconst getEdgeStartEndPoint = (edge, dir) => {\n  let source = edge.start;\n  let target = edge.end;\n  const sourceId = source;\n  const targetId = target;\n  const startNode = nodeDb[source];\n  const endNode = nodeDb[target];\n  if (!startNode || !endNode) {\n    return { source, target };\n  }\n  if (startNode.type === \"diamond\") {\n    source = `${source}-${getNextPort(source, \"out\", dir)}`;\n  }\n  if (endNode.type === \"diamond\") {\n    target = `${target}-${getNextPort(target, \"in\", dir)}`;\n  }\n  return { source, target, sourceId, targetId };\n};\nconst addEdges = function(edges, diagObj, graph, svg) {\n  log.info(\"abc78 edges = \", edges);\n  const labelsEl = svg.insert(\"g\").attr(\"class\", \"edgeLabels\");\n  let linkIdCnt = {};\n  let dir = diagObj.db.getDirection();\n  let defaultStyle;\n  let defaultLabelStyle;\n  if (edges.defaultStyle !== void 0) {\n    const defaultStyles = getStylesFromArray(edges.defaultStyle);\n    defaultStyle = defaultStyles.style;\n    defaultLabelStyle = defaultStyles.labelStyle;\n  }\n  edges.forEach(function(edge) {\n    const linkIdBase = \"L-\" + edge.start + \"-\" + edge.end;\n    if (linkIdCnt[linkIdBase] === void 0) {\n      linkIdCnt[linkIdBase] = 0;\n      log.info(\"abc78 new entry\", linkIdBase, linkIdCnt[linkIdBase]);\n    } else {\n      linkIdCnt[linkIdBase]++;\n      log.info(\"abc78 new entry\", linkIdBase, linkIdCnt[linkIdBase]);\n    }\n    let linkId = linkIdBase + \"-\" + linkIdCnt[linkIdBase];\n    log.info(\"abc78 new link id to be used is\", linkIdBase, linkId, linkIdCnt[linkIdBase]);\n    const linkNameStart = \"LS-\" + edge.start;\n    const linkNameEnd = \"LE-\" + edge.end;\n    const edgeData = { style: \"\", labelStyle: \"\" };\n    edgeData.minlen = edge.length || 1;\n    if (edge.type === \"arrow_open\") {\n      edgeData.arrowhead = \"none\";\n    } else {\n      edgeData.arrowhead = \"normal\";\n    }\n    edgeData.arrowTypeStart = \"arrow_open\";\n    edgeData.arrowTypeEnd = \"arrow_open\";\n    switch (edge.type) {\n      case \"double_arrow_cross\":\n        edgeData.arrowTypeStart = \"arrow_cross\";\n      case \"arrow_cross\":\n        edgeData.arrowTypeEnd = \"arrow_cross\";\n        break;\n      case \"double_arrow_point\":\n        edgeData.arrowTypeStart = \"arrow_point\";\n      case \"arrow_point\":\n        edgeData.arrowTypeEnd = \"arrow_point\";\n        break;\n      case \"double_arrow_circle\":\n        edgeData.arrowTypeStart = \"arrow_circle\";\n      case \"arrow_circle\":\n        edgeData.arrowTypeEnd = \"arrow_circle\";\n        break;\n    }\n    let style = \"\";\n    let labelStyle = \"\";\n    switch (edge.stroke) {\n      case \"normal\":\n        style = \"fill:none;\";\n        if (defaultStyle !== void 0) {\n          style = defaultStyle;\n        }\n        if (defaultLabelStyle !== void 0) {\n          labelStyle = defaultLabelStyle;\n        }\n        edgeData.thickness = \"normal\";\n        edgeData.pattern = \"solid\";\n        break;\n      case \"dotted\":\n        edgeData.thickness = \"normal\";\n        edgeData.pattern = \"dotted\";\n        edgeData.style = \"fill:none;stroke-width:2px;stroke-dasharray:3;\";\n        break;\n      case \"thick\":\n        edgeData.thickness = \"thick\";\n        edgeData.pattern = \"solid\";\n        edgeData.style = \"stroke-width: 3.5px;fill:none;\";\n        break;\n    }\n    if (edge.style !== void 0) {\n      const styles2 = getStylesFromArray(edge.style);\n      style = styles2.style;\n      labelStyle = styles2.labelStyle;\n    }\n    edgeData.style = edgeData.style += style;\n    edgeData.labelStyle = edgeData.labelStyle += labelStyle;\n    if (edge.interpolate !== void 0) {\n      edgeData.curve = interpolateToCurve(edge.interpolate, curveLinear);\n    } else if (edges.defaultInterpolate !== void 0) {\n      edgeData.curve = interpolateToCurve(edges.defaultInterpolate, curveLinear);\n    } else {\n      edgeData.curve = interpolateToCurve(conf.curve, curveLinear);\n    }\n    if (edge.text === void 0) {\n      if (edge.style !== void 0) {\n        edgeData.arrowheadStyle = \"fill: #333\";\n      }\n    } else {\n      edgeData.arrowheadStyle = \"fill: #333\";\n      edgeData.labelpos = \"c\";\n    }\n    edgeData.labelType = edge.labelType;\n    edgeData.label = edge.text.replace(common.lineBreakRegex, \"\\n\");\n    if (edge.style === void 0) {\n      edgeData.style = edgeData.style || \"stroke: #333; stroke-width: 1.5px;fill:none;\";\n    }\n    edgeData.labelStyle = edgeData.labelStyle.replace(\"color:\", \"fill:\");\n    edgeData.id = linkId;\n    edgeData.classes = \"flowchart-link \" + linkNameStart + \" \" + linkNameEnd;\n    const labelEl = insertEdgeLabel(labelsEl, edgeData);\n    const { source, target, sourceId, targetId } = getEdgeStartEndPoint(edge, dir);\n    log.debug(\"abc78 source and target\", source, target);\n    graph.edges.push({\n      id: \"e\" + edge.start + edge.end,\n      sources: [source],\n      targets: [target],\n      sourceId,\n      targetId,\n      labelEl,\n      labels: [\n        {\n          width: edgeData.width,\n          height: edgeData.height,\n          orgWidth: edgeData.width,\n          orgHeight: edgeData.height,\n          text: edgeData.label,\n          layoutOptions: {\n            \"edgeLabels.inline\": \"true\",\n            \"edgeLabels.placement\": \"CENTER\"\n          }\n        }\n      ],\n      edgeData\n    });\n  });\n  return graph;\n};\nconst addMarkersToEdge = function(svgPath, edgeData, diagramType, arrowMarkerAbsolute, id) {\n  let url = \"\";\n  if (arrowMarkerAbsolute) {\n    url = window.location.protocol + \"//\" + window.location.host + window.location.pathname + window.location.search;\n    url = url.replace(/\\(/g, \"\\\\(\");\n    url = url.replace(/\\)/g, \"\\\\)\");\n  }\n  addEdgeMarkers(svgPath, edgeData, url, id, diagramType);\n};\nconst getClasses = function(text, diagObj) {\n  log.info(\"Extracting classes\");\n  return diagObj.db.getClasses();\n};\nconst addSubGraphs = function(db2) {\n  const parentLookupDb = { parentById: {}, childrenById: {} };\n  const subgraphs = db2.getSubGraphs();\n  log.info(\"Subgraphs - \", subgraphs);\n  subgraphs.forEach(function(subgraph) {\n    subgraph.nodes.forEach(function(node) {\n      parentLookupDb.parentById[node] = subgraph.id;\n      if (parentLookupDb.childrenById[subgraph.id] === void 0) {\n        parentLookupDb.childrenById[subgraph.id] = [];\n      }\n      parentLookupDb.childrenById[subgraph.id].push(node);\n    });\n  });\n  subgraphs.forEach(function(subgraph) {\n    ({ id: subgraph.id });\n    if (parentLookupDb.parentById[subgraph.id] !== void 0) {\n      parentLookupDb.parentById[subgraph.id];\n    }\n  });\n  return parentLookupDb;\n};\nconst calcOffset = function(src, dest, parentLookupDb) {\n  const ancestor = findCommonAncestor(src, dest, parentLookupDb);\n  if (ancestor === void 0 || ancestor === \"root\") {\n    return { x: 0, y: 0 };\n  }\n  const ancestorOffset = nodeDb[ancestor].offset;\n  return { x: ancestorOffset.posX, y: ancestorOffset.posY };\n};\nconst insertEdge = function(edgesEl, edge, edgeData, diagObj, parentLookupDb, id) {\n  const offset = calcOffset(edge.sourceId, edge.targetId, parentLookupDb);\n  const src = edge.sections[0].startPoint;\n  const dest = edge.sections[0].endPoint;\n  const segments = edge.sections[0].bendPoints ? edge.sections[0].bendPoints : [];\n  const segPoints = segments.map((segment) => [segment.x + offset.x, segment.y + offset.y]);\n  const points = [\n    [src.x + offset.x, src.y + offset.y],\n    ...segPoints,\n    [dest.x + offset.x, dest.y + offset.y]\n  ];\n  const { x, y } = getLineFunctionsWithOffset(edge.edgeData);\n  const curve = line().x(x).y(y).curve(curveLinear);\n  const edgePath = edgesEl.insert(\"path\").attr(\"d\", curve(points)).attr(\"class\", \"path \" + edgeData.classes).attr(\"fill\", \"none\");\n  const edgeG = edgesEl.insert(\"g\").attr(\"class\", \"edgeLabel\");\n  const edgeWithLabel = select(edgeG.node().appendChild(edge.labelEl));\n  const box = edgeWithLabel.node().firstChild.getBoundingClientRect();\n  edgeWithLabel.attr(\"width\", box.width);\n  edgeWithLabel.attr(\"height\", box.height);\n  edgeG.attr(\n    \"transform\",\n    `translate(${edge.labels[0].x + offset.x}, ${edge.labels[0].y + offset.y})`\n  );\n  addMarkersToEdge(edgePath, edgeData, diagObj.type, diagObj.arrowMarkerAbsolute, id);\n};\nconst insertChildren = (nodeArray, parentLookupDb) => {\n  nodeArray.forEach((node) => {\n    if (!node.children) {\n      node.children = [];\n    }\n    const childIds = parentLookupDb.childrenById[node.id];\n    if (childIds) {\n      childIds.forEach((childId) => {\n        node.children.push(nodeDb[childId]);\n      });\n    }\n    insertChildren(node.children, parentLookupDb);\n  });\n};\nconst draw = async function(text, id, _version, diagObj) {\n  var _a;\n  diagObj.db.clear();\n  nodeDb = {};\n  portPos = {};\n  diagObj.db.setGen(\"gen-2\");\n  diagObj.parser.parse(text);\n  const renderEl = select(\"body\").append(\"div\").attr(\"style\", \"height:400px\").attr(\"id\", \"cy\");\n  let graph = {\n    id: \"root\",\n    layoutOptions: {\n      \"elk.hierarchyHandling\": \"INCLUDE_CHILDREN\",\n      \"org.eclipse.elk.padding\": \"[top=100, left=100, bottom=110, right=110]\",\n      \"elk.layered.spacing.edgeNodeBetweenLayers\": \"30\",\n      // 'elk.layered.mergeEdges': 'true',\n      \"elk.direction\": \"DOWN\"\n      // 'elk.ports.sameLayerEdges': true,\n      // 'nodePlacement.strategy': 'SIMPLE',\n    },\n    children: [],\n    edges: []\n  };\n  log.info(\"Drawing flowchart using v3 renderer\", elk);\n  let dir = diagObj.db.getDirection();\n  switch (dir) {\n    case \"BT\":\n      graph.layoutOptions[\"elk.direction\"] = \"UP\";\n      break;\n    case \"TB\":\n      graph.layoutOptions[\"elk.direction\"] = \"DOWN\";\n      break;\n    case \"LR\":\n      graph.layoutOptions[\"elk.direction\"] = \"RIGHT\";\n      break;\n    case \"RL\":\n      graph.layoutOptions[\"elk.direction\"] = \"LEFT\";\n      break;\n  }\n  const { securityLevel, flowchart: conf2 } = getConfig();\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const doc = securityLevel === \"sandbox\" ? sandboxElement.nodes()[0].contentDocument : document;\n  const svg = root.select(`[id=\"${id}\"]`);\n  const markers = [\"point\", \"circle\", \"cross\"];\n  insertMarkers(svg, markers, diagObj.type, id);\n  const vert = diagObj.db.getVertices();\n  let subG;\n  const subGraphs = diagObj.db.getSubGraphs();\n  log.info(\"Subgraphs - \", subGraphs);\n  for (let i = subGraphs.length - 1; i >= 0; i--) {\n    subG = subGraphs[i];\n    diagObj.db.addVertex(\n      subG.id,\n      { text: subG.title, type: subG.labelType },\n      \"group\",\n      void 0,\n      subG.classes,\n      subG.dir\n    );\n  }\n  const subGraphsEl = svg.insert(\"g\").attr(\"class\", \"subgraphs\");\n  const parentLookupDb = addSubGraphs(diagObj.db);\n  graph = await addVertices(vert, id, root, doc, diagObj, parentLookupDb, graph);\n  const edgesEl = svg.insert(\"g\").attr(\"class\", \"edges edgePath\");\n  const edges = diagObj.db.getEdges();\n  graph = addEdges(edges, diagObj, graph, svg);\n  const nodes = Object.keys(nodeDb);\n  nodes.forEach((nodeId) => {\n    const node = nodeDb[nodeId];\n    if (!node.parent) {\n      graph.children.push(node);\n    }\n    if (parentLookupDb.childrenById[nodeId] !== void 0) {\n      node.labels = [\n        {\n          text: node.labelText,\n          layoutOptions: {\n            \"nodeLabels.placement\": \"[H_CENTER, V_TOP, INSIDE]\"\n          },\n          width: node.labelData.width,\n          height: node.labelData.height\n          // width: 100,\n          // height: 100,\n        }\n      ];\n      delete node.x;\n      delete node.y;\n      delete node.width;\n      delete node.height;\n    }\n  });\n  insertChildren(graph.children, parentLookupDb);\n  log.info(\"after layout\", JSON.stringify(graph, null, 2));\n  const g = await elk.layout(graph);\n  drawNodes(0, 0, g.children, svg, subGraphsEl, diagObj, 0);\n  log.info(\"after layout\", g);\n  (_a = g.edges) == null ? void 0 : _a.map((edge) => {\n    insertEdge(edgesEl, edge, edge.edgeData, diagObj, parentLookupDb, id);\n  });\n  setupGraphViewbox({}, svg, conf2.diagramPadding, conf2.useMaxWidth);\n  renderEl.remove();\n};\nconst drawNodes = (relX, relY, nodeArray, svg, subgraphsEl, diagObj, depth) => {\n  nodeArray.forEach(function(node) {\n    if (node) {\n      nodeDb[node.id].offset = {\n        posX: node.x + relX,\n        posY: node.y + relY,\n        x: relX,\n        y: relY,\n        depth,\n        width: node.width,\n        height: node.height\n      };\n      if (node.type === \"group\") {\n        const subgraphEl = subgraphsEl.insert(\"g\").attr(\"class\", \"subgraph\");\n        subgraphEl.insert(\"rect\").attr(\"class\", \"subgraph subgraph-lvl-\" + depth % 5 + \" node\").attr(\"x\", node.x + relX).attr(\"y\", node.y + relY).attr(\"width\", node.width).attr(\"height\", node.height);\n        const label = subgraphEl.insert(\"g\").attr(\"class\", \"label\");\n        const labelCentering = getConfig().flowchart.htmlLabels ? node.labelData.width / 2 : 0;\n        label.attr(\n          \"transform\",\n          `translate(${node.labels[0].x + relX + node.x + labelCentering}, ${node.labels[0].y + relY + node.y + 3})`\n        );\n        label.node().appendChild(node.labelData.labelNode);\n        log.info(\"Id (UGH)= \", node.type, node.labels);\n      } else {\n        log.info(\"Id (UGH)= \", node.id);\n        node.el.attr(\n          \"transform\",\n          `translate(${node.x + relX + node.width / 2}, ${node.y + relY + node.height / 2})`\n        );\n      }\n    }\n  });\n  nodeArray.forEach(function(node) {\n    if (node && node.type === \"group\") {\n      drawNodes(relX + node.x, relY + node.y, node.children, svg, subgraphsEl, diagObj, depth + 1);\n    }\n  });\n};\nconst renderer = {\n  getClasses,\n  draw\n};\nconst genSections = (options) => {\n  let sections = \"\";\n  for (let i = 0; i < 5; i++) {\n    sections += `\n      .subgraph-lvl-${i} {\n        fill: ${options[`surface${i}`]};\n        stroke: ${options[`surfacePeer${i}`]};\n      }\n    `;\n  }\n  return sections;\n};\nconst getStyles = (options) => `.label {\n    font-family: ${options.fontFamily};\n    color: ${options.nodeTextColor || options.textColor};\n  }\n  .cluster-label text {\n    fill: ${options.titleColor};\n  }\n  .cluster-label span {\n    color: ${options.titleColor};\n  }\n\n  .label text,span {\n    fill: ${options.nodeTextColor || options.textColor};\n    color: ${options.nodeTextColor || options.textColor};\n  }\n\n  .node rect,\n  .node circle,\n  .node ellipse,\n  .node polygon,\n  .node path {\n    fill: ${options.mainBkg};\n    stroke: ${options.nodeBorder};\n    stroke-width: 1px;\n  }\n\n  .node .label {\n    text-align: center;\n  }\n  .node.clickable {\n    cursor: pointer;\n  }\n\n  .arrowheadPath {\n    fill: ${options.arrowheadColor};\n  }\n\n  .edgePath .path {\n    stroke: ${options.lineColor};\n    stroke-width: 2.0px;\n  }\n\n  .flowchart-link {\n    stroke: ${options.lineColor};\n    fill: none;\n  }\n\n  .edgeLabel {\n    background-color: ${options.edgeLabelBackground};\n    rect {\n      opacity: 0.85;\n      background-color: ${options.edgeLabelBackground};\n      fill: ${options.edgeLabelBackground};\n    }\n    text-align: center;\n  }\n\n  .cluster rect {\n    fill: ${options.clusterBkg};\n    stroke: ${options.clusterBorder};\n    stroke-width: 1px;\n  }\n\n  .cluster text {\n    fill: ${options.titleColor};\n  }\n\n  .cluster span {\n    color: ${options.titleColor};\n  }\n  /* .cluster div {\n    color: ${options.titleColor};\n  } */\n\n  div.mermaidTooltip {\n    position: absolute;\n    text-align: center;\n    max-width: 200px;\n    padding: 2px;\n    font-family: ${options.fontFamily};\n    font-size: 12px;\n    background: ${options.tertiaryColor};\n    border: 1px solid ${options.border2};\n    border-radius: 2px;\n    pointer-events: none;\n    z-index: 100;\n  }\n\n  .flowchartTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${options.textColor};\n  }\n  .subgraph {\n    stroke-width:2;\n    rx:3;\n  }\n  // .subgraph-lvl-1 {\n  //   fill:#ccc;\n  //   // stroke:black;\n  // }\n\n  .flowchart-label text {\n    text-anchor: middle;\n  }\n\n  ${genSections(options)}\n`;\nconst styles = getStyles;\nconst diagram = {\n  db,\n  renderer,\n  parser,\n  styles\n};\nexport {\n  diagram\n};\n"],"names":["elk","ELK","portPos","conf","nodeDb","getNextPosition","position","edgeDirection","graphDirection","portPos2","TB","in","north","out","south","west","east","LR","RL","BT","TD","getNextPort","node","log","info","inPosition","outPosition","result","addEdges","edges","diagObj","graph","svg","labelsEl","insert","attr","defaultStyle","defaultLabelStyle","linkIdCnt","dir","db","getDirection","defaultStyles","getStylesFromArray","style","labelStyle","forEach","edge","linkIdBase","start","end","linkId","linkNameStart","linkNameEnd","edgeData","minlen","length","type","arrowhead","arrowTypeStart","arrowTypeEnd","stroke","thickness","pattern","styles2","interpolate","curve","interpolateToCurve","curveLinear","defaultInterpolate","text","arrowheadStyle","labelpos","labelType","label","replace","common","lineBreakRegex","id","classes","labelEl","insertEdgeLabel","source","target","sourceId","targetId","startNode","endNode","getEdgeStartEndPoint","debug","push","sources","targets","labels","width","height","orgWidth","orgHeight","layoutOptions","calcOffset","src","dest","parentLookupDb","ancestor","id1","id2","treeData","parentById","visited","Set","currentId","add","has","findCommonAncestor","x","y","ancestorOffset","offset","posX","posY","insertEdge","edgesEl","sections","startPoint","endPoint","segPoints","bendPoints","map","segment","points","getLineFunctionsWithOffset","line","edgePath","edgeG","edgeWithLabel","select","appendChild","box","firstChild","getBoundingClientRect","svgPath","diagramType","arrowMarkerAbsolute","url","window","location","protocol","host","pathname","search","addEdgeMarkers","addMarkersToEdge","insertChildren","nodeArray","children","childIds","childrenById","childId","drawNodes","relX","relY","subgraphsEl","depth","subgraphEl","labelCentering","getConfig","flowchart","htmlLabels","labelData","labelNode","el","diagram","renderer","getClasses","draw","async","_version","_a","clear","setGen","parser","parse","renderEl","append","securityLevel","conf2","sandboxElement","root","nodes","contentDocument","body","doc","document","insertMarkers","vert","getVertices","subG","subGraphs","getSubGraphs","i","addVertex","title","subGraphsEl","db2","subgraphs","subgraph","addSubGraphs","svgId","keys","Object","Promise","all","vertex","classStr","join","styles","vertexText","ports","radius","_shape","portConstraints","shape","labelText","rx","ry","class","link","linkTarget","tooltip","getTooltip","domId","lookUpDomId","haveCallback","props","padding","boundingBox","nodeEl","insertNode","getBBox","createElementNS","shapeSvg","bbox","labelHelper","wrappingWidth","data","parent","addVertices","getEdges","nodeId","JSON","stringify","g","layout","setupGraphViewbox","diagramPadding","useMaxWidth","remove","options","fontFamily","nodeTextColor","textColor","titleColor","mainBkg","nodeBorder","arrowheadColor","lineColor","edgeLabelBackground","clusterBkg","clusterBorder","tertiaryColor","border2","genSections"],"mappings":"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"}