{"version":3,"file":"intersect-line.js","sources":["../../../../../../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-line.js"],"sourcesContent":["export { intersectLine };\n\n/*\n * Returns the point at which two lines, p and q, intersect or returns\n * undefined if they do not intersect.\n */\nfunction intersectLine(p1, p2, q1, q2) {\n  // Algorithm from J. Avro, (ed.) Graphics Gems, No 2, Morgan Kaufmann, 1994,\n  // p7 and p473.\n\n  var a1, a2, b1, b2, c1, c2;\n  var r1, r2, r3, r4;\n  var denom, offset, num;\n  var x, y;\n\n  // Compute a1, b1, c1, where line joining points 1 and 2 is F(x,y) = a1 x +\n  // b1 y + c1 = 0.\n  a1 = p2.y - p1.y;\n  b1 = p1.x - p2.x;\n  c1 = p2.x * p1.y - p1.x * p2.y;\n\n  // Compute r3 and r4.\n  r3 = a1 * q1.x + b1 * q1.y + c1;\n  r4 = a1 * q2.x + b1 * q2.y + c1;\n\n  // Check signs of r3 and r4. If both point 3 and point 4 lie on\n  // same side of line 1, the line segments do not intersect.\n  if (r3 !== 0 && r4 !== 0 && sameSign(r3, r4)) {\n    return /*DONT_INTERSECT*/;\n  }\n\n  // Compute a2, b2, c2 where line joining points 3 and 4 is G(x,y) = a2 x + b2 y + c2 = 0\n  a2 = q2.y - q1.y;\n  b2 = q1.x - q2.x;\n  c2 = q2.x * q1.y - q1.x * q2.y;\n\n  // Compute r1 and r2\n  r1 = a2 * p1.x + b2 * p1.y + c2;\n  r2 = a2 * p2.x + b2 * p2.y + c2;\n\n  // Check signs of r1 and r2. If both point 1 and point 2 lie\n  // on same side of second line segment, the line segments do\n  // not intersect.\n  if (r1 !== 0 && r2 !== 0 && sameSign(r1, r2)) {\n    return /*DONT_INTERSECT*/;\n  }\n\n  // Line segments intersect: compute intersection point.\n  denom = a1 * b2 - a2 * b1;\n  if (denom === 0) {\n    return /*COLLINEAR*/;\n  }\n\n  offset = Math.abs(denom / 2);\n\n  // The denom/2 is to get rounding instead of truncating. It\n  // is added or subtracted to the numerator, depending upon the\n  // sign of the numerator.\n  num = b1 * c2 - b2 * c1;\n  x = num < 0 ? (num - offset) / denom : (num + offset) / denom;\n\n  num = a2 * c1 - a1 * c2;\n  y = num < 0 ? (num - offset) / denom : (num + offset) / denom;\n\n  return { x: x, y: y };\n}\n\nfunction sameSign(r1, r2) {\n  return r1 * r2 > 0;\n}\n"],"names":["intersectLine","p1","p2","q1","q2","a1","a2","b1","b2","c1","c2","r1","r2","r3","r4","denom","offset","num","y","x","sameSign","Math","abs"],"mappings":"AAMA,SAASA,EAAcC,EAAIC,EAAIC,EAAIC,GAIjC,IAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EACpBC,EAAIC,EAAIC,EAAIC,EACZC,EAAOC,EAAQC,EAenB,GAVAZ,EAAKH,EAAGgB,EAAIjB,EAAGiB,EACfX,EAAKN,EAAGkB,EAAIjB,EAAGiB,EACfV,EAAKP,EAAGiB,EAAIlB,EAAGiB,EAAIjB,EAAGkB,EAAIjB,EAAGgB,EAG7BL,EAAKR,EAAKF,EAAGgB,EAAIZ,EAAKJ,EAAGe,EAAIT,EAC7BK,EAAKT,EAAKD,EAAGe,EAAIZ,EAAKH,EAAGc,EAAIT,IAIlB,IAAPI,GAAmB,IAAPC,GAAYM,EAASP,EAAIC,KAKzCR,EAAKF,EAAGc,EAAIf,EAAGe,EACfV,EAAKL,EAAGgB,EAAIf,EAAGe,EACfT,EAAKN,EAAGe,EAAIhB,EAAGe,EAAIf,EAAGgB,EAAIf,EAAGc,EAG7BP,EAAKL,EAAKL,EAAGkB,EAAIX,EAAKP,EAAGiB,EAAIR,EAC7BE,EAAKN,EAAKJ,EAAGiB,EAAIX,EAAKN,EAAGgB,EAAIR,EAKlB,IAAPC,GAAmB,IAAPC,GAAYQ,EAAST,EAAIC,IAM3B,IADdG,EAAQV,EAAKG,EAAKF,EAAKC,KAgBvB,OAXAS,EAASK,KAAKC,IAAIP,EAAQ,GAWnB,CAAEI,GANTF,EAAMV,EAAKG,EAAKF,EAAKC,GACX,GAAKQ,EAAMD,GAAUD,GAASE,EAAMD,GAAUD,EAKzCG,GAHfD,EAAMX,EAAKG,EAAKJ,EAAKK,GACX,GAAKO,EAAMD,GAAUD,GAASE,EAAMD,GAAUD,EAG1D,CAEA,SAASK,EAAST,EAAIC,GACpB,OAAOD,EAAKC,EAAK,CACnB"}