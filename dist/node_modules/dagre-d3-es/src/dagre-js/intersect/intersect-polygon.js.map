{"version":3,"file":"intersect-polygon.js","sources":["../../../../../../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-polygon.js"],"sourcesContent":["import { intersectLine } from './intersect-line.js';\n\nexport { intersectPolygon };\n\n/*\n * Returns the point ({x, y}) at which the point argument intersects with the\n * node argument assuming that it has the shape specified by polygon.\n */\nfunction intersectPolygon(node, polyPoints, point) {\n  var x1 = node.x;\n  var y1 = node.y;\n\n  var intersections = [];\n\n  var minX = Number.POSITIVE_INFINITY;\n  var minY = Number.POSITIVE_INFINITY;\n  polyPoints.forEach(function (entry) {\n    minX = Math.min(minX, entry.x);\n    minY = Math.min(minY, entry.y);\n  });\n\n  var left = x1 - node.width / 2 - minX;\n  var top = y1 - node.height / 2 - minY;\n\n  for (var i = 0; i < polyPoints.length; i++) {\n    var p1 = polyPoints[i];\n    var p2 = polyPoints[i < polyPoints.length - 1 ? i + 1 : 0];\n    var intersect = intersectLine(\n      node,\n      point,\n      { x: left + p1.x, y: top + p1.y },\n      { x: left + p2.x, y: top + p2.y }\n    );\n    if (intersect) {\n      intersections.push(intersect);\n    }\n  }\n\n  if (!intersections.length) {\n    console.log('NO INTERSECTION FOUND, RETURN NODE CENTER', node);\n    return node;\n  }\n\n  if (intersections.length > 1) {\n    // More intersections, find the one nearest to edge end point\n    intersections.sort(function (p, q) {\n      var pdx = p.x - point.x;\n      var pdy = p.y - point.y;\n      var distp = Math.sqrt(pdx * pdx + pdy * pdy);\n\n      var qdx = q.x - point.x;\n      var qdy = q.y - point.y;\n      var distq = Math.sqrt(qdx * qdx + qdy * qdy);\n\n      return distp < distq ? -1 : distp === distq ? 0 : 1;\n    });\n  }\n  return intersections[0];\n}\n"],"names":["intersectPolygon","node","polyPoints","point","x1","x","y1","y","intersections","minX","Number","POSITIVE_INFINITY","minY","forEach","entry","Math","min","left","width","top","height","i","length","p1","p2","intersect","intersectLine","push","sort","p","q","pdx","pdy","distp","sqrt","qdx","qdy","distq","console","log"],"mappings":"oDAQA,SAASA,EAAiBC,EAAMC,EAAYC,GAC1C,IAAIC,EAAKH,EAAKI,EACVC,EAAKL,EAAKM,EAEVC,EAAgB,GAEhBC,EAAOC,OAAOC,kBACdC,EAAOF,OAAOC,kBAClBT,EAAWW,SAAQ,SAAUC,GAC3BL,EAAOM,KAAKC,IAAIP,EAAMK,EAAMT,GAC5BO,EAAOG,KAAKC,IAAIJ,EAAME,EAAMP,EAChC,IAKE,IAHA,IAAIU,EAAOb,EAAKH,EAAKiB,MAAQ,EAAIT,EAC7BU,EAAMb,EAAKL,EAAKmB,OAAS,EAAIR,EAExBS,EAAI,EAAGA,EAAInB,EAAWoB,OAAQD,IAAK,CAC1C,IAAIE,EAAKrB,EAAWmB,GAChBG,EAAKtB,EAAWmB,EAAInB,EAAWoB,OAAS,EAAID,EAAI,EAAI,GACpDI,EAAYC,EACdzB,EACAE,EACA,CAAEE,EAAGY,EAAOM,EAAGlB,EAAGE,EAAGY,EAAMI,EAAGhB,GAC9B,CAAEF,EAAGY,EAAOO,EAAGnB,EAAGE,EAAGY,EAAMK,EAAGjB,IAE5BkB,GACFjB,EAAcmB,KAAKF,EAEtB,CAED,OAAKjB,EAAcc,QAKfd,EAAcc,OAAS,GAEzBd,EAAcoB,MAAK,SAAUC,EAAGC,GAC9B,IAAIC,EAAMF,EAAExB,EAAIF,EAAME,EAClB2B,EAAMH,EAAEtB,EAAIJ,EAAMI,EAClB0B,EAAQlB,KAAKmB,KAAKH,EAAMA,EAAMC,EAAMA,GAEpCG,EAAML,EAAEzB,EAAIF,EAAME,EAClB+B,EAAMN,EAAEvB,EAAIJ,EAAMI,EAClB8B,EAAQtB,KAAKmB,KAAKC,EAAMA,EAAMC,EAAMA,GAExC,OAAOH,EAAQI,GAAS,EAAIJ,IAAUI,EAAQ,EAAI,CACxD,IAES7B,EAAc,KAlBnB8B,QAAQC,IAAI,4CAA6CtC,GAClDA,EAkBX"}