{"version":3,"file":"shapes.js","sources":["../../../../../node_modules/dagre-d3-es/src/dagre-js/shapes.js"],"sourcesContent":["import { intersectCircle } from './intersect/intersect-circle.js';\nimport { intersectEllipse } from './intersect/intersect-ellipse.js';\nimport { intersectPolygon } from './intersect/intersect-polygon.js';\nimport { intersectRect } from './intersect/intersect-rect.js';\n\nexport { shapes, setShapes };\n\nvar shapes = {\n  rect,\n  ellipse,\n  circle,\n  diamond,\n};\n\nfunction setShapes(value) {\n  shapes = value;\n}\n\nfunction rect(parent, bbox, node) {\n  var shapeSvg = parent\n    .insert('rect', ':first-child')\n    .attr('rx', node.rx)\n    .attr('ry', node.ry)\n    .attr('x', -bbox.width / 2)\n    .attr('y', -bbox.height / 2)\n    .attr('width', bbox.width)\n    .attr('height', bbox.height);\n\n  node.intersect = function (point) {\n    return intersectRect(node, point);\n  };\n\n  return shapeSvg;\n}\n\nfunction ellipse(parent, bbox, node) {\n  var rx = bbox.width / 2;\n  var ry = bbox.height / 2;\n  var shapeSvg = parent\n    .insert('ellipse', ':first-child')\n    .attr('x', -bbox.width / 2)\n    .attr('y', -bbox.height / 2)\n    .attr('rx', rx)\n    .attr('ry', ry);\n\n  node.intersect = function (point) {\n    return intersectEllipse(node, rx, ry, point);\n  };\n\n  return shapeSvg;\n}\n\nfunction circle(parent, bbox, node) {\n  var r = Math.max(bbox.width, bbox.height) / 2;\n  var shapeSvg = parent\n    .insert('circle', ':first-child')\n    .attr('x', -bbox.width / 2)\n    .attr('y', -bbox.height / 2)\n    .attr('r', r);\n\n  node.intersect = function (point) {\n    return intersectCircle(node, r, point);\n  };\n\n  return shapeSvg;\n}\n\n// Circumscribe an ellipse for the bounding box with a diamond shape. I derived\n// the function to calculate the diamond shape from:\n// http://mathforum.org/kb/message.jspa?messageID=3750236\nfunction diamond(parent, bbox, node) {\n  var w = (bbox.width * Math.SQRT2) / 2;\n  var h = (bbox.height * Math.SQRT2) / 2;\n  var points = [\n    { x: 0, y: -h },\n    { x: -w, y: 0 },\n    { x: 0, y: h },\n    { x: w, y: 0 },\n  ];\n  var shapeSvg = parent.insert('polygon', ':first-child').attr(\n    'points',\n    points\n      .map(function (p) {\n        return p.x + ',' + p.y;\n      })\n      .join(' ')\n  );\n\n  node.intersect = function (p) {\n    return intersectPolygon(node, points, p);\n  };\n\n  return shapeSvg;\n}\n"],"names":["shapes","rect","parent","bbox","node","shapeSvg","insert","attr","rx","ry","width","height","intersect","point","intersectRect","ellipse","intersectEllipse","circle","r","Math","max","intersectCircle","diamond","w","SQRT2","h","points","x","y","map","p","join","intersectPolygon","setShapes","value"],"mappings":"wQAOG,IAACA,EAAS,CACXC,KAUF,SAAcC,EAAQC,EAAMC,GAC1B,IAAIC,EAAWH,EACZI,OAAO,OAAQ,gBACfC,KAAK,KAAMH,EAAKI,IAChBD,KAAK,KAAMH,EAAKK,IAChBF,KAAK,KAAMJ,EAAKO,MAAQ,GACxBH,KAAK,KAAMJ,EAAKQ,OAAS,GACzBJ,KAAK,QAASJ,EAAKO,OACnBH,KAAK,SAAUJ,EAAKQ,QAMvB,OAJAP,EAAKQ,UAAY,SAAUC,GACzB,OAAOC,EAAcV,EAAMS,EAC/B,EAESR,CACT,EAxBEU,QA0BF,SAAiBb,EAAQC,EAAMC,GAC7B,IAAII,EAAKL,EAAKO,MAAQ,EAClBD,EAAKN,EAAKQ,OAAS,EACnBN,EAAWH,EACZI,OAAO,UAAW,gBAClBC,KAAK,KAAMJ,EAAKO,MAAQ,GACxBH,KAAK,KAAMJ,EAAKQ,OAAS,GACzBJ,KAAK,KAAMC,GACXD,KAAK,KAAME,GAMd,OAJAL,EAAKQ,UAAY,SAAUC,GACzB,OAAOG,EAAiBZ,EAAMI,EAAIC,EAAII,EAC1C,EAESR,CACT,EAxCEY,OA0CF,SAAgBf,EAAQC,EAAMC,GAC5B,IAAIc,EAAIC,KAAKC,IAAIjB,EAAKO,MAAOP,EAAKQ,QAAU,EACxCN,EAAWH,EACZI,OAAO,SAAU,gBACjBC,KAAK,KAAMJ,EAAKO,MAAQ,GACxBH,KAAK,KAAMJ,EAAKQ,OAAS,GACzBJ,KAAK,IAAKW,GAMb,OAJAd,EAAKQ,UAAY,SAAUC,GACzB,OAAOQ,EAAgBjB,EAAMc,EAAGL,EACpC,EAESR,CACT,EAtDEiB,QA2DF,SAAiBpB,EAAQC,EAAMC,GAC7B,IAAImB,EAAKpB,EAAKO,MAAQS,KAAKK,MAAS,EAChCC,EAAKtB,EAAKQ,OAASQ,KAAKK,MAAS,EACjCE,EAAS,CACX,CAAEC,EAAG,EAAGC,GAAIH,GACZ,CAAEE,GAAIJ,EAAGK,EAAG,GACZ,CAAED,EAAG,EAAGC,EAAGH,GACX,CAAEE,EAAGJ,EAAGK,EAAG,IAETvB,EAAWH,EAAOI,OAAO,UAAW,gBAAgBC,KACtD,SACAmB,EACGG,KAAI,SAAUC,GACb,OAAOA,EAAEH,EAAI,IAAMG,EAAEF,CAC7B,IACOG,KAAK,MAOV,OAJA3B,EAAKQ,UAAY,SAAUkB,GACzB,OAAOE,EAAiB5B,EAAMsB,EAAQI,EAC1C,EAESzB,CACT,GA/EA,SAAS4B,EAAUC,GACjBlC,EAASkC,CACX"}