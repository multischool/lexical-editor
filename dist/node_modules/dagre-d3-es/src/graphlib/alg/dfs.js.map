{"version":3,"file":"dfs.js","sources":["../../../../../../node_modules/dagre-d3-es/src/graphlib/alg/dfs.js"],"sourcesContent":["import * as _ from 'lodash-es';\n\nexport { dfs };\n\n/*\n * A helper that preforms a pre- or post-order traversal on the input graph\n * and returns the nodes in the order they were visited. If the graph is\n * undirected then this algorithm will navigate using neighbors. If the graph\n * is directed then this algorithm will navigate using successors.\n *\n * Order must be one of \"pre\" or \"post\".\n */\nfunction dfs(g, vs, order) {\n  if (!_.isArray(vs)) {\n    vs = [vs];\n  }\n\n  var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);\n\n  var acc = [];\n  var visited = {};\n  _.each(vs, function (v) {\n    if (!g.hasNode(v)) {\n      throw new Error('Graph does not have node: ' + v);\n    }\n\n    doDfs(g, v, order === 'post', visited, navigation, acc);\n  });\n  return acc;\n}\n\nfunction doDfs(g, v, postorder, visited, navigation, acc) {\n  if (!_.has(visited, v)) {\n    visited[v] = true;\n\n    if (!postorder) {\n      acc.push(v);\n    }\n    _.each(navigation(v), function (w) {\n      doDfs(g, w, postorder, visited, navigation, acc);\n    });\n    if (postorder) {\n      acc.push(v);\n    }\n  }\n}\n"],"names":["dfs","g","vs","order","_.isArray","navigation","isDirected","successors","neighbors","bind","acc","visited","_.each","v","hasNode","Error","doDfs","postorder","_.has","push","w"],"mappings":"4IAYA,SAASA,EAAIC,EAAGC,EAAIC,GACbC,EAAUF,KACbA,EAAK,CAACA,IAGR,IAAIG,GAAcJ,EAAEK,aAAeL,EAAEM,WAAaN,EAAEO,WAAWC,KAAKR,GAEhES,EAAM,GACNC,EAAU,CAAA,EAQd,OAPAC,EAAOV,GAAI,SAAUW,GACnB,IAAKZ,EAAEa,QAAQD,GACb,MAAM,IAAIE,MAAM,6BAA+BF,GAGjDG,EAAMf,EAAGY,EAAa,SAAVV,EAAkBQ,EAASN,EAAYK,EACvD,IACSA,CACT,CAEA,SAASM,EAAMf,EAAGY,EAAGI,EAAWN,EAASN,EAAYK,GAC9CQ,EAAMP,EAASE,KAClBF,EAAQE,IAAK,EAERI,GACHP,EAAIS,KAAKN,GAEXD,EAAOP,EAAWQ,IAAI,SAAUO,GAC9BJ,EAAMf,EAAGmB,EAAGH,EAAWN,EAASN,EAAYK,EAClD,IACQO,GACFP,EAAIS,KAAKN,GAGf"}