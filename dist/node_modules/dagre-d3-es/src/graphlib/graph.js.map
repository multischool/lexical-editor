{"version":3,"file":"graph.js","sources":["../../../../../node_modules/dagre-d3-es/src/graphlib/graph.js"],"sourcesContent":["import * as _ from 'lodash-es';\n\nvar DEFAULT_EDGE_NAME = '\\x00';\nvar GRAPH_NODE = '\\x00';\nvar EDGE_KEY_DELIM = '\\x01';\n\n// Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\n\n// Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\nexport class Graph {\n  constructor(opts = {}) {\n    this._isDirected = _.has(opts, 'directed') ? opts.directed : true;\n    this._isMultigraph = _.has(opts, 'multigraph') ? opts.multigraph : false;\n    this._isCompound = _.has(opts, 'compound') ? opts.compound : false;\n\n    // Label for the graph itself\n    this._label = undefined;\n\n    // Defaults to be set when creating a new node\n    this._defaultNodeLabelFn = _.constant(undefined);\n\n    // Defaults to be set when creating a new edge\n    this._defaultEdgeLabelFn = _.constant(undefined);\n\n    // v -> label\n    this._nodes = {};\n\n    if (this._isCompound) {\n      // v -> parent\n      this._parent = {};\n\n      // v -> children\n      this._children = {};\n      this._children[GRAPH_NODE] = {};\n    }\n\n    // v -> edgeObj\n    this._in = {};\n\n    // u -> v -> Number\n    this._preds = {};\n\n    // v -> edgeObj\n    this._out = {};\n\n    // v -> w -> Number\n    this._sucs = {};\n\n    // e -> edgeObj\n    this._edgeObjs = {};\n\n    // e -> label\n    this._edgeLabels = {};\n  }\n  /* === Graph functions ========= */\n  isDirected() {\n    return this._isDirected;\n  }\n  isMultigraph() {\n    return this._isMultigraph;\n  }\n  isCompound() {\n    return this._isCompound;\n  }\n  setGraph(label) {\n    this._label = label;\n    return this;\n  }\n  graph() {\n    return this._label;\n  }\n  /* === Node functions ========== */\n  setDefaultNodeLabel(newDefault) {\n    if (!_.isFunction(newDefault)) {\n      newDefault = _.constant(newDefault);\n    }\n    this._defaultNodeLabelFn = newDefault;\n    return this;\n  }\n  nodeCount() {\n    return this._nodeCount;\n  }\n  nodes() {\n    return _.keys(this._nodes);\n  }\n  sources() {\n    var self = this;\n    return _.filter(this.nodes(), function (v) {\n      return _.isEmpty(self._in[v]);\n    });\n  }\n  sinks() {\n    var self = this;\n    return _.filter(this.nodes(), function (v) {\n      return _.isEmpty(self._out[v]);\n    });\n  }\n  setNodes(vs, value) {\n    var args = arguments;\n    var self = this;\n    _.each(vs, function (v) {\n      if (args.length > 1) {\n        self.setNode(v, value);\n      } else {\n        self.setNode(v);\n      }\n    });\n    return this;\n  }\n  setNode(v, value) {\n    if (_.has(this._nodes, v)) {\n      if (arguments.length > 1) {\n        this._nodes[v] = value;\n      }\n      return this;\n    }\n\n    // @ts-expect-error\n    this._nodes[v] = arguments.length > 1 ? value : this._defaultNodeLabelFn(v);\n    if (this._isCompound) {\n      this._parent[v] = GRAPH_NODE;\n      this._children[v] = {};\n      this._children[GRAPH_NODE][v] = true;\n    }\n    this._in[v] = {};\n    this._preds[v] = {};\n    this._out[v] = {};\n    this._sucs[v] = {};\n    ++this._nodeCount;\n    return this;\n  }\n  node(v) {\n    return this._nodes[v];\n  }\n  hasNode(v) {\n    return _.has(this._nodes, v);\n  }\n  removeNode(v) {\n    var self = this;\n    if (_.has(this._nodes, v)) {\n      var removeEdge = function (e) {\n        self.removeEdge(self._edgeObjs[e]);\n      };\n      delete this._nodes[v];\n      if (this._isCompound) {\n        this._removeFromParentsChildList(v);\n        delete this._parent[v];\n        _.each(this.children(v), function (child) {\n          self.setParent(child);\n        });\n        delete this._children[v];\n      }\n      _.each(_.keys(this._in[v]), removeEdge);\n      delete this._in[v];\n      delete this._preds[v];\n      _.each(_.keys(this._out[v]), removeEdge);\n      delete this._out[v];\n      delete this._sucs[v];\n      --this._nodeCount;\n    }\n    return this;\n  }\n  setParent(v, parent) {\n    if (!this._isCompound) {\n      throw new Error('Cannot set parent in a non-compound graph');\n    }\n\n    if (_.isUndefined(parent)) {\n      parent = GRAPH_NODE;\n    } else {\n      // Coerce parent to string\n      parent += '';\n      for (var ancestor = parent; !_.isUndefined(ancestor); ancestor = this.parent(ancestor)) {\n        if (ancestor === v) {\n          throw new Error('Setting ' + parent + ' as parent of ' + v + ' would create a cycle');\n        }\n      }\n\n      this.setNode(parent);\n    }\n\n    this.setNode(v);\n    this._removeFromParentsChildList(v);\n    this._parent[v] = parent;\n    this._children[parent][v] = true;\n    return this;\n  }\n  _removeFromParentsChildList(v) {\n    delete this._children[this._parent[v]][v];\n  }\n  parent(v) {\n    if (this._isCompound) {\n      var parent = this._parent[v];\n      if (parent !== GRAPH_NODE) {\n        return parent;\n      }\n    }\n  }\n  children(v) {\n    if (_.isUndefined(v)) {\n      v = GRAPH_NODE;\n    }\n\n    if (this._isCompound) {\n      var children = this._children[v];\n      if (children) {\n        return _.keys(children);\n      }\n    } else if (v === GRAPH_NODE) {\n      return this.nodes();\n    } else if (this.hasNode(v)) {\n      return [];\n    }\n  }\n  predecessors(v) {\n    var predsV = this._preds[v];\n    if (predsV) {\n      return _.keys(predsV);\n    }\n  }\n  successors(v) {\n    var sucsV = this._sucs[v];\n    if (sucsV) {\n      return _.keys(sucsV);\n    }\n  }\n  neighbors(v) {\n    var preds = this.predecessors(v);\n    if (preds) {\n      return _.union(preds, this.successors(v));\n    }\n  }\n  isLeaf(v) {\n    var neighbors;\n    if (this.isDirected()) {\n      neighbors = this.successors(v);\n    } else {\n      neighbors = this.neighbors(v);\n    }\n    return neighbors.length === 0;\n  }\n  filterNodes(filter) {\n    // @ts-expect-error\n    var copy = new this.constructor({\n      directed: this._isDirected,\n      multigraph: this._isMultigraph,\n      compound: this._isCompound,\n    });\n\n    copy.setGraph(this.graph());\n\n    var self = this;\n    _.each(this._nodes, function (value, v) {\n      if (filter(v)) {\n        copy.setNode(v, value);\n      }\n    });\n\n    _.each(this._edgeObjs, function (e) {\n      // @ts-expect-error\n      if (copy.hasNode(e.v) && copy.hasNode(e.w)) {\n        copy.setEdge(e, self.edge(e));\n      }\n    });\n\n    var parents = {};\n    function findParent(v) {\n      var parent = self.parent(v);\n      if (parent === undefined || copy.hasNode(parent)) {\n        parents[v] = parent;\n        return parent;\n      } else if (parent in parents) {\n        return parents[parent];\n      } else {\n        return findParent(parent);\n      }\n    }\n\n    if (this._isCompound) {\n      _.each(copy.nodes(), function (v) {\n        copy.setParent(v, findParent(v));\n      });\n    }\n\n    return copy;\n  }\n  /* === Edge functions ========== */\n  setDefaultEdgeLabel(newDefault) {\n    if (!_.isFunction(newDefault)) {\n      newDefault = _.constant(newDefault);\n    }\n    this._defaultEdgeLabelFn = newDefault;\n    return this;\n  }\n  edgeCount() {\n    return this._edgeCount;\n  }\n  edges() {\n    return _.values(this._edgeObjs);\n  }\n  setPath(vs, value) {\n    var self = this;\n    var args = arguments;\n    _.reduce(vs, function (v, w) {\n      if (args.length > 1) {\n        self.setEdge(v, w, value);\n      } else {\n        self.setEdge(v, w);\n      }\n      return w;\n    });\n    return this;\n  }\n  /*\n   * setEdge(v, w, [value, [name]])\n   * setEdge({ v, w, [name] }, [value])\n   */\n  setEdge() {\n    var v, w, name, value;\n    var valueSpecified = false;\n    var arg0 = arguments[0];\n\n    if (typeof arg0 === 'object' && arg0 !== null && 'v' in arg0) {\n      v = arg0.v;\n      w = arg0.w;\n      name = arg0.name;\n      if (arguments.length === 2) {\n        value = arguments[1];\n        valueSpecified = true;\n      }\n    } else {\n      v = arg0;\n      w = arguments[1];\n      name = arguments[3];\n      if (arguments.length > 2) {\n        value = arguments[2];\n        valueSpecified = true;\n      }\n    }\n\n    v = '' + v;\n    w = '' + w;\n    if (!_.isUndefined(name)) {\n      name = '' + name;\n    }\n\n    var e = edgeArgsToId(this._isDirected, v, w, name);\n    if (_.has(this._edgeLabels, e)) {\n      if (valueSpecified) {\n        this._edgeLabels[e] = value;\n      }\n      return this;\n    }\n\n    if (!_.isUndefined(name) && !this._isMultigraph) {\n      throw new Error('Cannot set a named edge when isMultigraph = false');\n    }\n\n    // It didn't exist, so we need to create it.\n    // First ensure the nodes exist.\n    this.setNode(v);\n    this.setNode(w);\n\n    // @ts-expect-error\n    this._edgeLabels[e] = valueSpecified ? value : this._defaultEdgeLabelFn(v, w, name);\n\n    var edgeObj = edgeArgsToObj(this._isDirected, v, w, name);\n    // Ensure we add undirected edges in a consistent way.\n    v = edgeObj.v;\n    w = edgeObj.w;\n\n    Object.freeze(edgeObj);\n    this._edgeObjs[e] = edgeObj;\n    incrementOrInitEntry(this._preds[w], v);\n    incrementOrInitEntry(this._sucs[v], w);\n    this._in[w][e] = edgeObj;\n    this._out[v][e] = edgeObj;\n    this._edgeCount++;\n    return this;\n  }\n  edge(v, w, name) {\n    var e =\n      arguments.length === 1\n        ? edgeObjToId(this._isDirected, arguments[0])\n        : edgeArgsToId(this._isDirected, v, w, name);\n    return this._edgeLabels[e];\n  }\n  hasEdge(v, w, name) {\n    var e =\n      arguments.length === 1\n        ? edgeObjToId(this._isDirected, arguments[0])\n        : edgeArgsToId(this._isDirected, v, w, name);\n    return _.has(this._edgeLabels, e);\n  }\n  removeEdge(v, w, name) {\n    var e =\n      arguments.length === 1\n        ? edgeObjToId(this._isDirected, arguments[0])\n        : edgeArgsToId(this._isDirected, v, w, name);\n    var edge = this._edgeObjs[e];\n    if (edge) {\n      v = edge.v;\n      w = edge.w;\n      delete this._edgeLabels[e];\n      delete this._edgeObjs[e];\n      decrementOrRemoveEntry(this._preds[w], v);\n      decrementOrRemoveEntry(this._sucs[v], w);\n      delete this._in[w][e];\n      delete this._out[v][e];\n      this._edgeCount--;\n    }\n    return this;\n  }\n  inEdges(v, u) {\n    var inV = this._in[v];\n    if (inV) {\n      var edges = _.values(inV);\n      if (!u) {\n        return edges;\n      }\n      return _.filter(edges, function (edge) {\n        return edge.v === u;\n      });\n    }\n  }\n  outEdges(v, w) {\n    var outV = this._out[v];\n    if (outV) {\n      var edges = _.values(outV);\n      if (!w) {\n        return edges;\n      }\n      return _.filter(edges, function (edge) {\n        return edge.w === w;\n      });\n    }\n  }\n  nodeEdges(v, w) {\n    var inEdges = this.inEdges(v, w);\n    if (inEdges) {\n      return inEdges.concat(this.outEdges(v, w));\n    }\n  }\n}\n\n/* Number of nodes in the graph. Should only be changed by the implementation. */\nGraph.prototype._nodeCount = 0;\n\n/* Number of edges in the graph. Should only be changed by the implementation. */\nGraph.prototype._edgeCount = 0;\n\nfunction incrementOrInitEntry(map, k) {\n  if (map[k]) {\n    map[k]++;\n  } else {\n    map[k] = 1;\n  }\n}\n\nfunction decrementOrRemoveEntry(map, k) {\n  if (!--map[k]) {\n    delete map[k];\n  }\n}\n\nfunction edgeArgsToId(isDirected, v_, w_, name) {\n  var v = '' + v_;\n  var w = '' + w_;\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return v + EDGE_KEY_DELIM + w + EDGE_KEY_DELIM + (_.isUndefined(name) ? DEFAULT_EDGE_NAME : name);\n}\n\nfunction edgeArgsToObj(isDirected, v_, w_, name) {\n  var v = '' + v_;\n  var w = '' + w_;\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  var edgeObj = { v: v, w: w };\n  if (name) {\n    edgeObj.name = name;\n  }\n  return edgeObj;\n}\n\nfunction edgeObjToId(isDirected, edgeObj) {\n  return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);\n}\n"],"names":["GRAPH_NODE","Graph","constructor","opts","this","_isDirected","_.has","directed","_isMultigraph","multigraph","_isCompound","compound","_label","undefined","_defaultNodeLabelFn","_.constant","_defaultEdgeLabelFn","_nodes","_parent","_children","_in","_preds","_out","_sucs","_edgeObjs","_edgeLabels","isDirected","isMultigraph","isCompound","setGraph","label","graph","setDefaultNodeLabel","newDefault","_.isFunction","nodeCount","_nodeCount","nodes","_.keys","sources","self","_.filter","v","_.isEmpty","sinks","setNodes","vs","value","args","arguments","_.each","length","setNode","node","hasNode","removeNode","removeEdge","e","_removeFromParentsChildList","children","child","setParent","parent","Error","_.isUndefined","ancestor","predecessors","predsV","successors","sucsV","neighbors","preds","_.union","isLeaf","filterNodes","filter","copy","w","setEdge","edge","parents","findParent","setDefaultEdgeLabel","edgeCount","_edgeCount","edges","_.values","setPath","_.reduce","name","valueSpecified","arg0","edgeArgsToId","edgeObj","v_","w_","tmp","edgeArgsToObj","Object","freeze","incrementOrInitEntry","edgeObjToId","hasEdge","decrementOrRemoveEntry","inEdges","u","inV","outEdges","outV","nodeEdges","concat","map","k","prototype"],"mappings":"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"}