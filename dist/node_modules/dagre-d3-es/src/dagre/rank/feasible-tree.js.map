{"version":3,"file":"feasible-tree.js","sources":["../../../../../../node_modules/dagre-d3-es/src/dagre/rank/feasible-tree.js"],"sourcesContent":["import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport { slack } from './util.js';\n\nexport { feasibleTree };\n\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\nfunction feasibleTree(g) {\n  var t = new Graph({ directed: false });\n\n  // Choose arbitrary node from which to start our tree\n  var start = g.nodes()[0];\n  var size = g.nodeCount();\n  t.setNode(start, {});\n\n  var edge, delta;\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n\n  return t;\n}\n\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\nfunction tightTree(t, g) {\n  function dfs(v) {\n    _.forEach(g.nodeEdges(v), function (e) {\n      var edgeV = e.v,\n        w = v === edgeV ? e.w : edgeV;\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs(w);\n      }\n    });\n  }\n\n  _.forEach(t.nodes(), dfs);\n  return t.nodeCount();\n}\n\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\nfunction findMinSlackEdge(t, g) {\n  return _.minBy(g.edges(), function (e) {\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\n      return slack(g, e);\n    }\n  });\n}\n\nfunction shiftRanks(t, g, delta) {\n  _.forEach(t.nodes(), function (v) {\n    g.node(v).rank += delta;\n  });\n}\n"],"names":["feasibleTree","g","edge","delta","t","Graph","directed","start","nodes","size","nodeCount","setNode","tightTree","findMinSlackEdge","hasNode","v","slack","shiftRanks","_.forEach","dfs","nodeEdges","e","edgeV","w","setEdge","_.minBy","edges","node","rank"],"mappings":"gLA+BA,SAASA,EAAaC,GACpB,IAOIC,EAAMC,EAPNC,EAAI,IAAIC,EAAM,CAAEC,UAAU,IAG1BC,EAAQN,EAAEO,QAAQ,GAClBC,EAAOR,EAAES,YAIb,IAHAN,EAAEO,QAAQJ,EAAO,CAAA,GAGVK,EAAUR,EAAGH,GAAKQ,GACvBP,EAAOW,EAAiBT,EAAGH,GAC3BE,EAAQC,EAAEU,QAAQZ,EAAKa,GAAKC,EAAMf,EAAGC,IAASc,EAAMf,EAAGC,GACvDe,EAAWb,EAAGH,EAAGE,GAGnB,OAAOC,CACT,CAMA,SAASQ,EAAUR,EAAGH,GAcpB,OADAiB,EAAUd,EAAEI,SAZZ,SAASW,EAAIJ,GACXG,EAAUjB,EAAEmB,UAAUL,IAAI,SAAUM,GAClC,IAAIC,EAAQD,EAAEN,EACZQ,EAAIR,IAAMO,EAAQD,EAAEE,EAAID,EACrBlB,EAAEU,QAAQS,IAAOP,EAAMf,EAAGoB,KAC7BjB,EAAEO,QAAQY,EAAG,CAAA,GACbnB,EAAEoB,QAAQT,EAAGQ,EAAG,CAAE,GAClBJ,EAAII,GAEZ,GACG,IAGMnB,EAAEM,WACX,CAMA,SAASG,EAAiBT,EAAGH,GAC3B,OAAOwB,EAAQxB,EAAEyB,SAAS,SAAUL,GAClC,GAAIjB,EAAEU,QAAQO,EAAEN,KAAOX,EAAEU,QAAQO,EAAEE,GACjC,OAAOP,EAAMf,EAAGoB,EAEtB,GACA,CAEA,SAASJ,EAAWb,EAAGH,EAAGE,GACxBe,EAAUd,EAAEI,SAAS,SAAUO,GAC7Bd,EAAE0B,KAAKZ,GAAGa,MAAQzB,CACtB,GACA"}