{"version":3,"file":"util.js","sources":["../../../../../../node_modules/dagre-d3-es/src/dagre/rank/util.js"],"sourcesContent":["import * as _ from 'lodash-es';\n\nexport { longestPath, slack };\n\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\nfunction longestPath(g) {\n  var visited = {};\n\n  function dfs(v) {\n    var label = g.node(v);\n    if (_.has(visited, v)) {\n      return label.rank;\n    }\n    visited[v] = true;\n\n    var rank = _.min(\n      _.map(g.outEdges(v), function (e) {\n        return dfs(e.w) - g.edge(e).minlen;\n      })\n    );\n\n    if (\n      rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\n      rank === undefined || // return value of _.map([]) for Lodash 4\n      rank === null\n    ) {\n      // return value of _.map([null])\n      rank = 0;\n    }\n\n    return (label.rank = rank);\n  }\n\n  _.forEach(g.sources(), dfs);\n}\n\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\nfunction slack(g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}\n"],"names":["longestPath","g","visited","_.forEach","sources","dfs","v","label","node","_.has","rank","_.min","_.map","outEdges","e","w","edge","minlen","Number","POSITIVE_INFINITY","slack"],"mappings":"oLAyBA,SAASA,EAAYC,GACnB,IAAIC,EAAU,CAAA,EA2BdC,EAAUF,EAAEG,WAzBZ,SAASC,EAAIC,GACX,IAAIC,EAAQN,EAAEO,KAAKF,GACnB,GAAIG,EAAMP,EAASI,GACjB,OAAOC,EAAMG,KAEfR,EAAQI,IAAK,EAEb,IAAII,EAAOC,EACTC,EAAMX,EAAEY,SAASP,IAAI,SAAUQ,GAC7B,OAAOT,EAAIS,EAAEC,GAAKd,EAAEe,KAAKF,GAAGG,MACpC,KAYI,OAREP,IAASQ,OAAOC,mBAAhBT,MACAA,IAIAA,EAAO,GAGDH,EAAMG,KAAOA,CACtB,GAGH,CAMA,SAASU,EAAMnB,EAAGa,GAChB,OAAOb,EAAEO,KAAKM,EAAEC,GAAGL,KAAOT,EAAEO,KAAKM,EAAER,GAAGI,KAAOT,EAAEe,KAAKF,GAAGG,MACzD"}