{"version":3,"file":"index.js","sources":["../../../../../../node_modules/dagre-d3-es/src/dagre/rank/index.js"],"sourcesContent":["import { feasibleTree } from './feasible-tree.js';\nimport { networkSimplex } from './network-simplex.js';\nimport { longestPath } from './util.js';\n\nexport { rank };\n\n/*\n * Assigns a rank to each node in the input graph that respects the \"minlen\"\n * constraint specified on edges between nodes.\n *\n * This basic structure is derived from Gansner, et al., \"A Technique for\n * Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a connected DAG\n *    2. Graph nodes must be objects\n *    3. Graph edges must have \"weight\" and \"minlen\" attributes\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have a \"rank\" attribute based on the results of the\n *       algorithm. Ranks can start at any index (including negative), we'll\n *       fix them up later.\n */\nfunction rank(g) {\n  switch (g.graph().ranker) {\n    case 'network-simplex':\n      networkSimplexRanker(g);\n      break;\n    case 'tight-tree':\n      tightTreeRanker(g);\n      break;\n    case 'longest-path':\n      longestPathRanker(g);\n      break;\n    default:\n      networkSimplexRanker(g);\n  }\n}\n\n// A fast and simple ranker, but results are far from optimal.\nvar longestPathRanker = longestPath;\n\nfunction tightTreeRanker(g) {\n  longestPath(g);\n  feasibleTree(g);\n}\n\nfunction networkSimplexRanker(g) {\n  networkSimplex(g);\n}\n"],"names":["rank","g","graph","ranker","networkSimplexRanker","longestPath","feasibleTree","tightTreeRanker","longestPathRanker","networkSimplex"],"mappings":"gJAyBA,SAASA,EAAKC,GACZ,OAAQA,EAAEC,QAAQC,QAChB,IAAK,kBASL,QACEC,EAAqBH,SAPvB,IAAK,cAcT,SAAyBA,GACvBI,EAAYJ,GACZK,EAAaL,EACf,CAhBMM,CAAgBN,GAChB,MACF,IAAK,eACHO,EAAkBP,GAKxB,CAGA,IAAIO,EAAoBH,EAOxB,SAASD,EAAqBH,GAC5BQ,EAAeR,EACjB"}