{"version":3,"file":"normalize.js","sources":["../../../../../node_modules/dagre-d3-es/src/dagre/normalize.js"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, undo };\n\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */\nfunction run(g) {\n  g.graph().dummyChains = [];\n  _.forEach(g.edges(), function (edge) {\n    normalizeEdge(g, edge);\n  });\n}\n\nfunction normalizeEdge(g, e) {\n  var v = e.v;\n  var vRank = g.node(v).rank;\n  var w = e.w;\n  var wRank = g.node(w).rank;\n  var name = e.name;\n  var edgeLabel = g.edge(e);\n  var labelRank = edgeLabel.labelRank;\n\n  if (wRank === vRank + 1) return;\n\n  g.removeEdge(e);\n\n  var dummy, attrs, i;\n  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\n    edgeLabel.points = [];\n    attrs = {\n      width: 0,\n      height: 0,\n      edgeLabel: edgeLabel,\n      edgeObj: e,\n      rank: vRank,\n    };\n    dummy = util.addDummyNode(g, 'edge', attrs, '_d');\n    if (vRank === labelRank) {\n      attrs.width = edgeLabel.width;\n      attrs.height = edgeLabel.height;\n      // @ts-expect-error\n      attrs.dummy = 'edge-label';\n      // @ts-expect-error\n      attrs.labelpos = edgeLabel.labelpos;\n    }\n    g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);\n    if (i === 0) {\n      g.graph().dummyChains.push(dummy);\n    }\n    v = dummy;\n  }\n\n  g.setEdge(v, w, { weight: edgeLabel.weight }, name);\n}\n\nfunction undo(g) {\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var origLabel = node.edgeLabel;\n    var w;\n    g.setEdge(node.edgeObj, origLabel);\n    while (node.dummy) {\n      w = g.successors(v)[0];\n      g.removeNode(v);\n      origLabel.points.push({ x: node.x, y: node.y });\n      if (node.dummy === 'edge-label') {\n        origLabel.x = node.x;\n        origLabel.y = node.y;\n        origLabel.width = node.width;\n        origLabel.height = node.height;\n      }\n      v = w;\n      node = g.node(v);\n    }\n  });\n}\n"],"names":["run","g","graph","dummyChains","_.forEach","edges","edge","e","dummy","attrs","i","v","vRank","node","rank","w","wRank","name","edgeLabel","labelRank","removeEdge","points","util.addDummyNode","width","height","edgeObj","labelpos","setEdge","weight","push","normalizeEdge","undo","origLabel","successors","removeNode","x","y"],"mappings":"sFAqBA,SAASA,EAAIC,GACXA,EAAEC,QAAQC,YAAc,GACxBC,EAAUH,EAAEI,SAAS,SAAUC,IAKjC,SAAuBL,EAAGM,GACxB,IAYIC,EAAOC,EAAOC,EAZdC,EAAIJ,EAAEI,EACNC,EAAQX,EAAEY,KAAKF,GAAGG,KAClBC,EAAIR,EAAEQ,EACNC,EAAQf,EAAEY,KAAKE,GAAGD,KAClBG,EAAOV,EAAEU,KACTC,EAAYjB,EAAEK,KAAKC,GACnBY,EAAYD,EAAUC,UAE1B,GAAIH,IAAUJ,EAAQ,EAAG,OAKzB,IAHAX,EAAEmB,WAAWb,GAGRG,EAAI,IAAKE,EAAOA,EAAQI,IAASN,IAAKE,EACzCM,EAAUG,OAAS,GAQnBb,EAAQc,EAAkBrB,EAAG,OAP7BQ,EAAQ,CACNc,MAAO,EACPC,OAAQ,EACRN,UAAWA,EACXO,QAASlB,EACTO,KAAMF,GAEoC,MACxCA,IAAUO,IACZV,EAAMc,MAAQL,EAAUK,MACxBd,EAAMe,OAASN,EAAUM,OAEzBf,EAAMD,MAAQ,aAEdC,EAAMiB,SAAWR,EAAUQ,UAE7BzB,EAAE0B,QAAQhB,EAAGH,EAAO,CAAEoB,OAAQV,EAAUU,QAAUX,GACxC,IAANP,GACFT,EAAEC,QAAQC,YAAY0B,KAAKrB,GAE7BG,EAAIH,EAGNP,EAAE0B,QAAQhB,EAAGI,EAAG,CAAEa,OAAQV,EAAUU,QAAUX,EAChD,CA5CIa,CAAc7B,EAAGK,EACrB,GACA,CA4CA,SAASyB,EAAK9B,GACZG,EAAUH,EAAEC,QAAQC,aAAa,SAAUQ,GACzC,IAEII,EAFAF,EAAOZ,EAAEY,KAAKF,GACdqB,EAAYnB,EAAKK,UAGrB,IADAjB,EAAE0B,QAAQd,EAAKY,QAASO,GACjBnB,EAAKL,OACVO,EAAId,EAAEgC,WAAWtB,GAAG,GACpBV,EAAEiC,WAAWvB,GACbqB,EAAUX,OAAOQ,KAAK,CAAEM,EAAGtB,EAAKsB,EAAGC,EAAGvB,EAAKuB,IACxB,eAAfvB,EAAKL,QACPwB,EAAUG,EAAItB,EAAKsB,EACnBH,EAAUI,EAAIvB,EAAKuB,EACnBJ,EAAUT,MAAQV,EAAKU,MACvBS,EAAUR,OAASX,EAAKW,QAE1Bb,EAAII,EACJF,EAAOZ,EAAEY,KAAKF,EAEpB,GACA"}