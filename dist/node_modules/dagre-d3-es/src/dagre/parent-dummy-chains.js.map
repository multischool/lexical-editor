{"version":3,"file":"parent-dummy-chains.js","sources":["../../../../../node_modules/dagre-d3-es/src/dagre/parent-dummy-chains.js"],"sourcesContent":["import * as _ from 'lodash-es';\n\nexport { parentDummyChains };\n\nfunction parentDummyChains(g) {\n  var postorderNums = postorder(g);\n\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var edgeObj = node.edgeObj;\n    var pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);\n    var path = pathData.path;\n    var lca = pathData.lca;\n    var pathIdx = 0;\n    var pathV = path[pathIdx];\n    var ascending = true;\n\n    while (v !== edgeObj.w) {\n      node = g.node(v);\n\n      if (ascending) {\n        while ((pathV = path[pathIdx]) !== lca && g.node(pathV).maxRank < node.rank) {\n          pathIdx++;\n        }\n\n        if (pathV === lca) {\n          ascending = false;\n        }\n      }\n\n      if (!ascending) {\n        while (\n          pathIdx < path.length - 1 &&\n          g.node((pathV = path[pathIdx + 1])).minRank <= node.rank\n        ) {\n          pathIdx++;\n        }\n        pathV = path[pathIdx];\n      }\n\n      g.setParent(v, pathV);\n      v = g.successors(v)[0];\n    }\n  });\n}\n\n// Find a path from v to w through the lowest common ancestor (LCA). Return the\n// full path and the LCA.\nfunction findPath(g, postorderNums, v, w) {\n  var vPath = [];\n  var wPath = [];\n  var low = Math.min(postorderNums[v].low, postorderNums[w].low);\n  var lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);\n  var parent;\n  var lca;\n\n  // Traverse up from v to find the LCA\n  parent = v;\n  do {\n    parent = g.parent(parent);\n    vPath.push(parent);\n  } while (parent && (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\n  lca = parent;\n\n  // Traverse from w to LCA\n  parent = w;\n  while ((parent = g.parent(parent)) !== lca) {\n    wPath.push(parent);\n  }\n\n  return { path: vPath.concat(wPath.reverse()), lca: lca };\n}\n\nfunction postorder(g) {\n  var result = {};\n  var lim = 0;\n\n  function dfs(v) {\n    var low = lim;\n    _.forEach(g.children(v), dfs);\n    result[v] = { low: low, lim: lim++ };\n  }\n  _.forEach(g.children(), dfs);\n\n  return result;\n}\n"],"names":["parentDummyChains","g","postorderNums","result","lim","dfs","v","low","_.forEach","children","postorder","graph","dummyChains","node","edgeObj","pathData","w","parent","lca","vPath","wPath","Math","min","max","push","path","concat","reverse","findPath","pathIdx","pathV","ascending","maxRank","rank","length","minRank","setParent","successors"],"mappings":"6CAIA,SAASA,EAAkBC,GACzB,IAAIC,EAoEN,SAAmBD,GACjB,IAAIE,EAAS,CAAA,EACTC,EAAM,EAEV,SAASC,EAAIC,GACX,IAAIC,EAAMH,EACVI,EAAUP,EAAEQ,SAASH,GAAID,GACzBF,EAAOG,GAAK,CAAEC,IAAKA,EAAKH,IAAKA,IAC9B,CAGD,OAFAI,EAAUP,EAAEQ,WAAYJ,GAEjBF,CACT,CAhFsBO,CAAUT,GAE9BO,EAAUP,EAAEU,QAAQC,aAAa,SAAUN,GAUzC,IATA,IAAIO,EAAOZ,EAAEY,KAAKP,GACdQ,EAAUD,EAAKC,QACfC,EAsCR,SAAkBd,EAAGC,EAAeI,EAAGU,GACrC,IAIIC,EACAC,EALAC,EAAQ,GACRC,EAAQ,GACRb,EAAMc,KAAKC,IAAIpB,EAAcI,GAAGC,IAAKL,EAAcc,GAAGT,KACtDH,EAAMiB,KAAKE,IAAIrB,EAAcI,GAAGF,IAAKF,EAAcc,GAAGZ,KAK1Da,EAASX,EACT,GACEW,EAAShB,EAAEgB,OAAOA,GAClBE,EAAMK,KAAKP,SACJA,IAAWf,EAAce,GAAQV,IAAMA,GAAOH,EAAMF,EAAce,GAAQb,MACnFc,EAAMD,EAGNA,EAASD,EACT,MAAQC,EAAShB,EAAEgB,OAAOA,MAAaC,GACrCE,EAAMI,KAAKP,GAGb,MAAO,CAAEQ,KAAMN,EAAMO,OAAON,EAAMO,WAAYT,IAAKA,EACrD,CA7DmBU,CAAS3B,EAAGC,EAAeY,EAAQR,EAAGQ,EAAQE,GACzDS,EAAOV,EAASU,KAChBP,EAAMH,EAASG,IACfW,EAAU,EACVC,EAAQL,EAAKI,GACbE,GAAY,EAETzB,IAAMQ,EAAQE,GAAG,CAGtB,GAFAH,EAAOZ,EAAEY,KAAKP,GAEVyB,EAAW,CACb,MAAQD,EAAQL,EAAKI,MAAcX,GAAOjB,EAAEY,KAAKiB,GAAOE,QAAUnB,EAAKoB,MACrEJ,IAGEC,IAAUZ,IACZa,GAAY,EAEf,CAED,IAAKA,EAAW,CACd,KACEF,EAAUJ,EAAKS,OAAS,GACxBjC,EAAEY,KAAMiB,EAAQL,EAAKI,EAAU,IAAKM,SAAWtB,EAAKoB,MAEpDJ,IAEFC,EAAQL,EAAKI,EACd,CAED5B,EAAEmC,UAAU9B,EAAGwB,GACfxB,EAAIL,EAAEoC,WAAW/B,GAAG,EACrB,CACL,GACA"}