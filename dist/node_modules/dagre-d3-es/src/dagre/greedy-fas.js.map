{"version":3,"file":"greedy-fas.js","sources":["../../../../../node_modules/dagre-d3-es/src/dagre/greedy-fas.js"],"sourcesContent":["import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { List } from './data/list.js';\n\n/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n */\nexport { greedyFAS };\n\nvar DEFAULT_WEIGHT_FN = _.constant(1);\n\nfunction greedyFAS(g, weightFn) {\n  if (g.nodeCount() <= 1) {\n    return [];\n  }\n  var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);\n  var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\n\n  // Expand multi-edges\n  return _.flatten(\n    _.map(results, function (e) {\n      return g.outEdges(e.v, e.w);\n    })\n  );\n}\n\nfunction doGreedyFAS(g, buckets, zeroIdx) {\n  var results = [];\n  var sources = buckets[buckets.length - 1];\n  var sinks = buckets[0];\n\n  var entry;\n  while (g.nodeCount()) {\n    while ((entry = sinks.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    while ((entry = sources.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    if (g.nodeCount()) {\n      for (var i = buckets.length - 2; i > 0; --i) {\n        entry = buckets[i].dequeue();\n        if (entry) {\n          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));\n          break;\n        }\n      }\n    }\n  }\n\n  return results;\n}\n\nfunction removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {\n  var results = collectPredecessors ? [] : undefined;\n\n  _.forEach(g.inEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var uEntry = g.node(edge.v);\n\n    if (collectPredecessors) {\n      results.push({ v: edge.v, w: edge.w });\n    }\n\n    uEntry.out -= weight;\n    assignBucket(buckets, zeroIdx, uEntry);\n  });\n\n  _.forEach(g.outEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var w = edge.w;\n    var wEntry = g.node(w);\n    wEntry['in'] -= weight;\n    assignBucket(buckets, zeroIdx, wEntry);\n  });\n\n  g.removeNode(entry.v);\n\n  return results;\n}\n\nfunction buildState(g, weightFn) {\n  var fasGraph = new Graph();\n  var maxIn = 0;\n  var maxOut = 0;\n\n  _.forEach(g.nodes(), function (v) {\n    fasGraph.setNode(v, { v: v, in: 0, out: 0 });\n  });\n\n  // Aggregate weights on nodes, but also sum the weights across multi-edges\n  // into a single edge for the fasGraph.\n  _.forEach(g.edges(), function (e) {\n    var prevWeight = fasGraph.edge(e.v, e.w) || 0;\n    var weight = weightFn(e);\n    var edgeWeight = prevWeight + weight;\n    fasGraph.setEdge(e.v, e.w, edgeWeight);\n    maxOut = Math.max(maxOut, (fasGraph.node(e.v).out += weight));\n    maxIn = Math.max(maxIn, (fasGraph.node(e.w)['in'] += weight));\n  });\n\n  var buckets = _.range(maxOut + maxIn + 3).map(function () {\n    return new List();\n  });\n  var zeroIdx = maxIn + 1;\n\n  _.forEach(fasGraph.nodes(), function (v) {\n    assignBucket(buckets, zeroIdx, fasGraph.node(v));\n  });\n\n  return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };\n}\n\nfunction assignBucket(buckets, zeroIdx, entry) {\n  if (!entry.out) {\n    buckets[0].enqueue(entry);\n  } else if (!entry['in']) {\n    buckets[buckets.length - 1].enqueue(entry);\n  } else {\n    buckets[entry.out - entry['in'] + zeroIdx].enqueue(entry);\n  }\n}\n"],"names":["DEFAULT_WEIGHT_FN","_.constant","greedyFAS","g","weightFn","nodeCount","state","fasGraph","Graph","maxIn","maxOut","_.forEach","nodes","v","setNode","in","out","edges","e","prevWeight","edge","w","weight","edgeWeight","setEdge","Math","max","node","buckets","_.range","map","List","zeroIdx","assignBucket","graph","buildState","results","entry","sources","length","sinks","dequeue","removeNode","i","concat","doGreedyFAS","_.flatten","_.map","outEdges","collectPredecessors","undefined","inEdges","uEntry","push","wEntry","enqueue"],"mappings":"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"}