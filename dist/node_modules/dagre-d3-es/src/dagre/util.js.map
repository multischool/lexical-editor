{"version":3,"file":"util.js","sources":["../../../../../node_modules/dagre-d3-es/src/dagre/util.js"],"sourcesContent":["import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\n\nexport {\n  addDummyNode,\n  simplify,\n  asNonCompoundGraph,\n  successorWeights,\n  predecessorWeights,\n  intersectRect,\n  buildLayerMatrix,\n  normalizeRanks,\n  removeEmptyRanks,\n  addBorderNode,\n  maxRank,\n  partition,\n  time,\n  notime,\n};\n\n/*\n * Adds a dummy node to the graph and return v.\n */\nfunction addDummyNode(g, type, attrs, name) {\n  var v;\n  do {\n    v = _.uniqueId(name);\n  } while (g.hasNode(v));\n\n  attrs.dummy = type;\n  g.setNode(v, attrs);\n  return v;\n}\n\n/*\n * Returns a new graph with only simple edges. Handles aggregation of data\n * associated with multi-edges.\n */\nfunction simplify(g) {\n  var simplified = new Graph().setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    simplified.setNode(v, g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 };\n    var label = g.edge(e);\n    simplified.setEdge(e.v, e.w, {\n      weight: simpleLabel.weight + label.weight,\n      minlen: Math.max(simpleLabel.minlen, label.minlen),\n    });\n  });\n  return simplified;\n}\n\nfunction asNonCompoundGraph(g) {\n  var simplified = new Graph({ multigraph: g.isMultigraph() }).setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    if (!g.children(v).length) {\n      simplified.setNode(v, g.node(v));\n    }\n  });\n  _.forEach(g.edges(), function (e) {\n    simplified.setEdge(e, g.edge(e));\n  });\n  return simplified;\n}\n\nfunction successorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var sucs = {};\n    _.forEach(g.outEdges(v), function (e) {\n      sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;\n    });\n    return sucs;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\nfunction predecessorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var preds = {};\n    _.forEach(g.inEdges(v), function (e) {\n      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;\n    });\n    return preds;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\n/*\n * Finds where a line starting at point ({x, y}) would intersect a rectangle\n * ({x, y, width, height}) if it were pointing at the rectangle's center.\n */\nfunction intersectRect(rect, point) {\n  var x = rect.x;\n  var y = rect.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = rect.width / 2;\n  var h = rect.height / 2;\n\n  if (!dx && !dy) {\n    throw new Error('Not possible to find intersection inside of the rectangle');\n  }\n\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = (h * dx) / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = (w * dy) / dx;\n  }\n\n  return { x: x + sx, y: y + sy };\n}\n\n/*\n * Given a DAG with each node assigned \"rank\" and \"order\" properties, this\n * function will produce a matrix with the ids of each node.\n */\nfunction buildLayerMatrix(g) {\n  var layering = _.map(_.range(maxRank(g) + 1), function () {\n    return [];\n  });\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    var rank = node.rank;\n    if (!_.isUndefined(rank)) {\n      layering[rank][node.order] = v;\n    }\n  });\n  return layering;\n}\n\n/*\n * Adjusts the ranks for all nodes in the graph such that all nodes v have\n * rank(v) >= 0 and at least one node w has rank(w) = 0.\n */\nfunction normalizeRanks(g) {\n  var min = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    })\n  );\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (_.has(node, 'rank')) {\n      node.rank -= min;\n    }\n  });\n}\n\nfunction removeEmptyRanks(g) {\n  // Ranks may not start at 0, so we need to offset them\n  var offset = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    })\n  );\n\n  var layers = [];\n  _.forEach(g.nodes(), function (v) {\n    var rank = g.node(v).rank - offset;\n    if (!layers[rank]) {\n      layers[rank] = [];\n    }\n    layers[rank].push(v);\n  });\n\n  var delta = 0;\n  var nodeRankFactor = g.graph().nodeRankFactor;\n  _.forEach(layers, function (vs, i) {\n    if (_.isUndefined(vs) && i % nodeRankFactor !== 0) {\n      --delta;\n    } else if (delta) {\n      _.forEach(vs, function (v) {\n        g.node(v).rank += delta;\n      });\n    }\n  });\n}\n\nfunction addBorderNode(g, prefix, rank, order) {\n  var node = {\n    width: 0,\n    height: 0,\n  };\n  if (arguments.length >= 4) {\n    node.rank = rank;\n    node.order = order;\n  }\n  return addDummyNode(g, 'border', node, prefix);\n}\n\nfunction maxRank(g) {\n  return _.max(\n    _.map(g.nodes(), function (v) {\n      var rank = g.node(v).rank;\n      if (!_.isUndefined(rank)) {\n        return rank;\n      }\n    })\n  );\n}\n\n/*\n * Partition a collection into two groups: `lhs` and `rhs`. If the supplied\n * function returns true for an entry it goes into `lhs`. Otherwise it goes\n * into `rhs.\n */\nfunction partition(collection, fn) {\n  var result = { lhs: [], rhs: [] };\n  _.forEach(collection, function (value) {\n    if (fn(value)) {\n      result.lhs.push(value);\n    } else {\n      result.rhs.push(value);\n    }\n  });\n  return result;\n}\n\n/*\n * Returns a new function that wraps `fn` with a timer. The wrapper logs the\n * time it takes to execute the function.\n */\nfunction time(name, fn) {\n  var start = _.now();\n  try {\n    return fn();\n  } finally {\n    console.log(name + ' time: ' + (_.now() - start) + 'ms');\n  }\n}\n\nfunction notime(name, fn) {\n  return fn();\n}\n"],"names":["addDummyNode","g","type","attrs","name","v","_.uniqueId","hasNode","dummy","setNode","simplify","simplified","Graph","setGraph","graph","_.forEach","nodes","node","edges","e","simpleLabel","edge","w","weight","minlen","label","setEdge","Math","max","asNonCompoundGraph","multigraph","isMultigraph","children","length","intersectRect","rect","point","sx","sy","x","y","dx","dy","width","h","height","Error","abs","buildLayerMatrix","layering","_.map","_.range","maxRank","rank","_.isUndefined","order","normalizeRanks","min","_.min","_.has","removeEmptyRanks","offset","layers","push","delta","nodeRankFactor","vs","i","addBorderNode","prefix","arguments","_.max","partition","collection","fn","result","lhs","rhs","value","time","start","_.now","console","log","notime"],"mappings":"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"}