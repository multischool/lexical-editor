{"version":3,"file":"nesting-graph.js","sources":["../../../../../node_modules/dagre-d3-es/src/dagre/nesting-graph.js"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, cleanup };\n\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */\nfunction run(g) {\n  var root = util.addDummyNode(g, 'root', {}, '_root');\n  var depths = treeDepths(g);\n  var height = _.max(_.values(depths)) - 1; // Note: depths is an Object not an array\n  var nodeSep = 2 * height + 1;\n\n  g.graph().nestingRoot = root;\n\n  // Multiply minlen by nodeSep to align nodes on non-border ranks.\n  _.forEach(g.edges(), function (e) {\n    g.edge(e).minlen *= nodeSep;\n  });\n\n  // Calculate a weight that is sufficient to keep subgraphs vertically compact\n  var weight = sumWeights(g) + 1;\n\n  // Create border nodes and link them up\n  _.forEach(g.children(), function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n  });\n\n  // Save the multiplier for node layers for later removal of empty border\n  // layers.\n  g.graph().nodeRankFactor = nodeSep;\n}\n\nfunction dfs(g, root, nodeSep, weight, height, depths, v) {\n  var children = g.children(v);\n  if (!children.length) {\n    if (v !== root) {\n      g.setEdge(root, v, { weight: 0, minlen: nodeSep });\n    }\n    return;\n  }\n\n  var top = util.addBorderNode(g, '_bt');\n  var bottom = util.addBorderNode(g, '_bb');\n  var label = g.node(v);\n\n  g.setParent(top, v);\n  label.borderTop = top;\n  g.setParent(bottom, v);\n  label.borderBottom = bottom;\n\n  _.forEach(children, function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n\n    var childNode = g.node(child);\n    var childTop = childNode.borderTop ? childNode.borderTop : child;\n    var childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n    var thisWeight = childNode.borderTop ? weight : 2 * weight;\n    var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n\n    g.setEdge(top, childTop, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n\n    g.setEdge(childBottom, bottom, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n  });\n\n  if (!g.parent(v)) {\n    g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });\n  }\n}\n\nfunction treeDepths(g) {\n  var depths = {};\n  function dfs(v, depth) {\n    var children = g.children(v);\n    if (children && children.length) {\n      _.forEach(children, function (child) {\n        dfs(child, depth + 1);\n      });\n    }\n    depths[v] = depth;\n  }\n  _.forEach(g.children(), function (v) {\n    dfs(v, 1);\n  });\n  return depths;\n}\n\nfunction sumWeights(g) {\n  return _.reduce(\n    g.edges(),\n    function (acc, e) {\n      return acc + g.edge(e).weight;\n    },\n    0\n  );\n}\n\nfunction cleanup(g) {\n  var graphLabel = g.graph();\n  g.removeNode(graphLabel.nestingRoot);\n  delete graphLabel.nestingRoot;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.nestingEdge) {\n      g.removeEdge(e);\n    }\n  });\n}\n"],"names":["run","g","root","util.addDummyNode","depths","dfs","v","depth","children","length","_.forEach","child","treeDepths","height","_.max","_.values","nodeSep","graph","nestingRoot","edges","e","edge","minlen","weight","_.reduce","acc","sumWeights","nodeRankFactor","top","util.addBorderNode","bottom","label","node","setParent","borderTop","borderBottom","childNode","childTop","childBottom","thisWeight","setEdge","nestingEdge","parent","cleanup","graphLabel","removeNode","removeEdge"],"mappings":"0OA4BA,SAASA,EAAIC,GACX,IAAIC,EAAOC,EAAkBF,EAAG,OAAQ,CAAA,EAAI,SACxCG,EAqEN,SAAoBH,GAClB,IAAIG,EAAS,CAAA,EACb,SAASC,EAAIC,EAAGC,GACd,IAAIC,EAAWP,EAAEO,SAASF,GACtBE,GAAYA,EAASC,QACvBC,EAAUF,GAAU,SAAUG,GAC5BN,EAAIM,EAAOJ,EAAQ,EAC3B,IAEIH,EAAOE,GAAKC,CACb,CAID,OAHAG,EAAUT,EAAEO,YAAY,SAAUF,GAChCD,EAAIC,EAAG,EACX,IACSF,CACT,CApFeQ,CAAWX,GACpBY,EAASC,EAAMC,EAASX,IAAW,EACnCY,EAAU,EAAIH,EAAS,EAE3BZ,EAAEgB,QAAQC,YAAchB,EAGxBQ,EAAUT,EAAEkB,SAAS,SAAUC,GAC7BnB,EAAEoB,KAAKD,GAAGE,QAAUN,CACxB,IAGE,IAAIO,EA0EN,SAAoBtB,GAClB,OAAOuB,EACLvB,EAAEkB,SACF,SAAUM,EAAKL,GACb,OAAOK,EAAMxB,EAAEoB,KAAKD,GAAGG,MACxB,GACD,EAEJ,CAlFeG,CAAWzB,GAAK,EAG7BS,EAAUT,EAAEO,YAAY,SAAUG,GAChCN,EAAIJ,EAAGC,EAAMc,EAASO,EAAQV,EAAQT,EAAQO,EAClD,IAIEV,EAAEgB,QAAQU,eAAiBX,CAC7B,CAEA,SAASX,EAAIJ,EAAGC,EAAMc,EAASO,EAAQV,EAAQT,EAAQE,GACrD,IAAIE,EAAWP,EAAEO,SAASF,GAC1B,GAAKE,EAASC,OAAd,CAOA,IAAImB,EAAMC,EAAmB5B,EAAG,OAC5B6B,EAASD,EAAmB5B,EAAG,OAC/B8B,EAAQ9B,EAAE+B,KAAK1B,GAEnBL,EAAEgC,UAAUL,EAAKtB,GACjByB,EAAMG,UAAYN,EAClB3B,EAAEgC,UAAUH,EAAQxB,GACpByB,EAAMI,aAAeL,EAErBpB,EAAUF,GAAU,SAAUG,GAC5BN,EAAIJ,EAAGC,EAAMc,EAASO,EAAQV,EAAQT,EAAQO,GAE9C,IAAIyB,EAAYnC,EAAE+B,KAAKrB,GACnB0B,EAAWD,EAAUF,UAAYE,EAAUF,UAAYvB,EACvD2B,EAAcF,EAAUD,aAAeC,EAAUD,aAAexB,EAChE4B,EAAaH,EAAUF,UAAYX,EAAS,EAAIA,EAChDD,EAASe,IAAaC,EAAc,EAAIzB,EAAST,EAAOE,GAAK,EAEjEL,EAAEuC,QAAQZ,EAAKS,EAAU,CACvBd,OAAQgB,EACRjB,OAAQA,EACRmB,aAAa,IAGfxC,EAAEuC,QAAQF,EAAaR,EAAQ,CAC7BP,OAAQgB,EACRjB,OAAQA,EACRmB,aAAa,GAEnB,IAEOxC,EAAEyC,OAAOpC,IACZL,EAAEuC,QAAQtC,EAAM0B,EAAK,CAAEL,OAAQ,EAAGD,OAAQT,EAAST,EAAOE,IAlC3D,MAJKA,IAAMJ,GACRD,EAAEuC,QAAQtC,EAAMI,EAAG,CAAEiB,OAAQ,EAAGD,OAAQN,GAuC9C,CA6BA,SAAS2B,EAAQ1C,GACf,IAAI2C,EAAa3C,EAAEgB,QACnBhB,EAAE4C,WAAWD,EAAW1B,oBACjB0B,EAAW1B,YAClBR,EAAUT,EAAEkB,SAAS,SAAUC,GAClBnB,EAAEoB,KAAKD,GACTqB,aACPxC,EAAE6C,WAAW1B,EAEnB,GACA"}