{"version":3,"file":"init-order.js","sources":["../../../../../../node_modules/dagre-d3-es/src/dagre/order/init-order.js"],"sourcesContent":["import * as _ from 'lodash-es';\n\nexport { initOrder };\n\n/*\n * Assigns an initial order value for each node by performing a DFS search\n * starting from nodes in the first rank. Nodes are assigned an order in their\n * rank as they are first visited.\n *\n * This approach comes from Gansner, et al., \"A Technique for Drawing Directed\n * Graphs.\"\n *\n * Returns a layering matrix with an array per layer and each layer sorted by\n * the order of its nodes.\n */\nfunction initOrder(g) {\n  var visited = {};\n  var simpleNodes = _.filter(g.nodes(), function (v) {\n    return !g.children(v).length;\n  });\n  var maxRank = _.max(\n    _.map(simpleNodes, function (v) {\n      return g.node(v).rank;\n    })\n  );\n  var layers = _.map(_.range(maxRank + 1), function () {\n    return [];\n  });\n\n  function dfs(v) {\n    if (_.has(visited, v)) return;\n    visited[v] = true;\n    var node = g.node(v);\n    layers[node.rank].push(v);\n    _.forEach(g.successors(v), dfs);\n  }\n\n  var orderedVs = _.sortBy(simpleNodes, function (v) {\n    return g.node(v).rank;\n  });\n  _.forEach(orderedVs, dfs);\n\n  return layers;\n}\n"],"names":["initOrder","g","visited","simpleNodes","_.filter","nodes","v","children","length","maxRank","_.max","_.map","node","rank","layers","_.range","orderedVs","_.sortBy","_.forEach","dfs","_.has","push","successors"],"mappings":"gUAeA,SAASA,EAAUC,GACjB,IAAIC,EAAU,CAAA,EACVC,EAAcC,EAASH,EAAEI,SAAS,SAAUC,GAC9C,OAAQL,EAAEM,SAASD,GAAGE,MAC1B,IACMC,EAAUC,EACZC,EAAMR,GAAa,SAAUG,GAC3B,OAAOL,EAAEW,KAAKN,GAAGO,IACvB,KAEMC,EAASH,EAAMI,EAAQN,EAAU,IAAI,WACvC,MAAO,EACX,IAUE,IAAIO,EAAYC,EAASd,GAAa,SAAUG,GAC9C,OAAOL,EAAEW,KAAKN,GAAGO,IACrB,IAGE,OAFAK,EAAUF,GAXV,SAASG,EAAIb,GACX,IAAIc,EAAMlB,EAASI,GAAnB,CACAJ,EAAQI,IAAK,EACb,IAAIM,EAAOX,EAAEW,KAAKN,GAClBQ,EAAOF,EAAKC,MAAMQ,KAAKf,GACvBY,EAAUjB,EAAEqB,WAAWhB,GAAIa,EAJG,CAK/B,IAOML,CACT"}