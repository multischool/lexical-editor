{"version":3,"file":"resolve-conflicts.js","sources":["../../../../../../node_modules/dagre-d3-es/src/dagre/order/resolve-conflicts.js"],"sourcesContent":["import * as _ from 'lodash-es';\n\nexport { resolveConflicts };\n\n/*\n * Given a list of entries of the form {v, barycenter, weight} and a\n * constraint graph this function will resolve any conflicts between the\n * constraint graph and the barycenters for the entries. If the barycenters for\n * an entry would violate a constraint in the constraint graph then we coalesce\n * the nodes in the conflict into a new node that respects the contraint and\n * aggregates barycenter and weight information.\n *\n * This implementation is based on the description in Forster, \"A Fast and\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\n * differs in some specific details.\n *\n * Pre-conditions:\n *\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\n *       no barycenter, then {v}.\n *\n * Returns:\n *\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\n *    `vs` may either be a singleton or it may be an aggregation of nodes\n *    ordered such that they do not violate constraints from the constraint\n *    graph. The property `i` is the lowest original index of any of the\n *    elements in `vs`.\n */\nfunction resolveConflicts(entries, cg) {\n  var mappedEntries = {};\n  _.forEach(entries, function (entry, i) {\n    var tmp = (mappedEntries[entry.v] = {\n      indegree: 0,\n      in: [],\n      out: [],\n      vs: [entry.v],\n      i: i,\n    });\n    if (!_.isUndefined(entry.barycenter)) {\n      // @ts-expect-error\n      tmp.barycenter = entry.barycenter;\n      // @ts-expect-error\n      tmp.weight = entry.weight;\n    }\n  });\n\n  _.forEach(cg.edges(), function (e) {\n    var entryV = mappedEntries[e.v];\n    var entryW = mappedEntries[e.w];\n    if (!_.isUndefined(entryV) && !_.isUndefined(entryW)) {\n      entryW.indegree++;\n      entryV.out.push(mappedEntries[e.w]);\n    }\n  });\n\n  var sourceSet = _.filter(mappedEntries, function (entry) {\n    // @ts-expect-error\n    return !entry.indegree;\n  });\n\n  return doResolveConflicts(sourceSet);\n}\n\nfunction doResolveConflicts(sourceSet) {\n  var entries = [];\n\n  function handleIn(vEntry) {\n    return function (uEntry) {\n      if (uEntry.merged) {\n        return;\n      }\n      if (\n        _.isUndefined(uEntry.barycenter) ||\n        _.isUndefined(vEntry.barycenter) ||\n        uEntry.barycenter >= vEntry.barycenter\n      ) {\n        mergeEntries(vEntry, uEntry);\n      }\n    };\n  }\n\n  function handleOut(vEntry) {\n    return function (wEntry) {\n      wEntry['in'].push(vEntry);\n      if (--wEntry.indegree === 0) {\n        sourceSet.push(wEntry);\n      }\n    };\n  }\n\n  while (sourceSet.length) {\n    var entry = sourceSet.pop();\n    entries.push(entry);\n    _.forEach(entry['in'].reverse(), handleIn(entry));\n    _.forEach(entry.out, handleOut(entry));\n  }\n\n  return _.map(\n    _.filter(entries, function (entry) {\n      return !entry.merged;\n    }),\n    function (entry) {\n      return _.pick(entry, ['vs', 'i', 'barycenter', 'weight']);\n    }\n  );\n}\n\nfunction mergeEntries(target, source) {\n  var sum = 0;\n  var weight = 0;\n\n  if (target.weight) {\n    sum += target.barycenter * target.weight;\n    weight += target.weight;\n  }\n\n  if (source.weight) {\n    sum += source.barycenter * source.weight;\n    weight += source.weight;\n  }\n\n  target.vs = source.vs.concat(target.vs);\n  target.barycenter = sum / weight;\n  target.weight = weight;\n  target.i = Math.min(source.i, target.i);\n  source.merged = true;\n}\n"],"names":["resolveConflicts","entries","cg","mappedEntries","_.forEach","entry","i","tmp","v","indegree","in","out","vs","_.isUndefined","barycenter","weight","edges","e","entryV","entryW","w","push","sourceSet","handleIn","vEntry","uEntry","merged","target","source","sum","concat","Math","min","mergeEntries","handleOut","wEntry","length","pop","reverse","_.map","_.filter","_.pick","doResolveConflicts"],"mappings":"4OA6BA,SAASA,EAAiBC,EAASC,GACjC,IAAIC,EAAgB,CAAA,EA+BpB,OA9BAC,EAAUH,GAAS,SAAUI,EAAOC,GAClC,IAAIC,EAAOJ,EAAcE,EAAMG,GAAK,CAClCC,SAAU,EACVC,GAAI,GACJC,IAAK,GACLC,GAAI,CAACP,EAAMG,GACXF,EAAGA,GAEAO,EAAcR,EAAMS,cAEvBP,EAAIO,WAAaT,EAAMS,WAEvBP,EAAIQ,OAASV,EAAMU,OAEzB,IAEEX,EAAUF,EAAGc,SAAS,SAAUC,GAC9B,IAAIC,EAASf,EAAcc,EAAET,GACzBW,EAAShB,EAAcc,EAAEG,GACxBP,EAAcK,IAAYL,EAAcM,KAC3CA,EAAOV,WACPS,EAAOP,IAAIU,KAAKlB,EAAcc,EAAEG,IAEtC,IAUA,SAA4BE,GAC1B,IAAIrB,EAAU,GAEd,SAASsB,EAASC,GAChB,OAAO,SAAUC,GACXA,EAAOC,SAITb,EAAcY,EAAOX,aACrBD,EAAcW,EAAOV,aACrBW,EAAOX,YAAcU,EAAOV,aAiCpC,SAAsBa,EAAQC,GAC5B,IAAIC,EAAM,EACNd,EAAS,EAETY,EAAOZ,SACTc,GAAOF,EAAOb,WAAaa,EAAOZ,OAClCA,GAAUY,EAAOZ,QAGfa,EAAOb,SACTc,GAAOD,EAAOd,WAAac,EAAOb,OAClCA,GAAUa,EAAOb,QAGnBY,EAAOf,GAAKgB,EAAOhB,GAAGkB,OAAOH,EAAOf,IACpCe,EAAOb,WAAae,EAAMd,EAC1BY,EAAOZ,OAASA,EAChBY,EAAOrB,EAAIyB,KAAKC,IAAIJ,EAAOtB,EAAGqB,EAAOrB,GACrCsB,EAAOF,QAAS,CAClB,CAlDQO,CAAaT,EAAQC,EAE7B,CACG,CAED,SAASS,EAAUV,GACjB,OAAO,SAAUW,GACfA,EAAW,GAAEd,KAAKG,GACQ,KAApBW,EAAO1B,UACXa,EAAUD,KAAKc,EAEvB,CACG,CAED,KAAOb,EAAUc,QAAQ,CACvB,IAAI/B,EAAQiB,EAAUe,MACtBpC,EAAQoB,KAAKhB,GACbD,EAAUC,EAAU,GAAEiC,UAAWf,EAASlB,IAC1CD,EAAUC,EAAMM,IAAKuB,EAAU7B,GAChC,CAED,OAAOkC,EACLC,EAASvC,GAAS,SAAUI,GAC1B,OAAQA,EAAMqB,MACpB,KACI,SAAUrB,GACR,OAAOoC,EAAOpC,EAAO,CAAC,KAAM,IAAK,aAAc,UAChD,GAEL,CA7CSqC,CALSF,EAASrC,GAAe,SAAUE,GAEhD,OAAQA,EAAMI,QAClB,IAGA"}