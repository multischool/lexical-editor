{"version":3,"file":"sort-subgraph.js","sources":["../../../../../../node_modules/dagre-d3-es/src/dagre/order/sort-subgraph.js"],"sourcesContent":["import * as _ from 'lodash-es';\nimport { barycenter } from './barycenter.js';\nimport { resolveConflicts } from './resolve-conflicts.js';\nimport { sort } from './sort.js';\n\nexport { sortSubgraph };\n\nfunction sortSubgraph(g, v, cg, biasRight) {\n  var movable = g.children(v);\n  var node = g.node(v);\n  var bl = node ? node.borderLeft : undefined;\n  var br = node ? node.borderRight : undefined;\n  var subgraphs = {};\n\n  if (bl) {\n    movable = _.filter(movable, function (w) {\n      return w !== bl && w !== br;\n    });\n  }\n\n  var barycenters = barycenter(g, movable);\n  _.forEach(barycenters, function (entry) {\n    if (g.children(entry.v).length) {\n      var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);\n      subgraphs[entry.v] = subgraphResult;\n      if (_.has(subgraphResult, 'barycenter')) {\n        mergeBarycenters(entry, subgraphResult);\n      }\n    }\n  });\n\n  var entries = resolveConflicts(barycenters, cg);\n  expandSubgraphs(entries, subgraphs);\n\n  var result = sort(entries, biasRight);\n\n  if (bl) {\n    result.vs = _.flatten([bl, result.vs, br]);\n    if (g.predecessors(bl).length) {\n      var blPred = g.node(g.predecessors(bl)[0]),\n        brPred = g.node(g.predecessors(br)[0]);\n      if (!_.has(result, 'barycenter')) {\n        result.barycenter = 0;\n        result.weight = 0;\n      }\n      result.barycenter =\n        (result.barycenter * result.weight + blPred.order + brPred.order) / (result.weight + 2);\n      result.weight += 2;\n    }\n  }\n\n  return result;\n}\n\nfunction expandSubgraphs(entries, subgraphs) {\n  _.forEach(entries, function (entry) {\n    entry.vs = _.flatten(\n      entry.vs.map(function (v) {\n        if (subgraphs[v]) {\n          return subgraphs[v].vs;\n        }\n        return v;\n      })\n    );\n  });\n}\n\nfunction mergeBarycenters(target, other) {\n  if (!_.isUndefined(target.barycenter)) {\n    target.barycenter =\n      (target.barycenter * target.weight + other.barycenter * other.weight) /\n      (target.weight + other.weight);\n    target.weight += other.weight;\n  } else {\n    target.barycenter = other.barycenter;\n    target.weight = other.weight;\n  }\n}\n"],"names":["sortSubgraph","g","v","cg","biasRight","movable","children","node","bl","borderLeft","undefined","br","borderRight","subgraphs","_.filter","w","barycenters","barycenter","_.forEach","entry","length","subgraphResult","_.has","other","_.isUndefined","target","weight","entries","resolveConflicts","vs","_.flatten","map","expandSubgraphs","result","sort","predecessors","blPred","brPred","order"],"mappings":"uXAOA,SAASA,EAAaC,EAAGC,EAAGC,EAAIC,GAC9B,IAAIC,EAAUJ,EAAEK,SAASJ,GACrBK,EAAON,EAAEM,KAAKL,GACdM,EAAKD,EAAOA,EAAKE,gBAAaC,EAC9BC,EAAKJ,EAAOA,EAAKK,iBAAcF,EAC/BG,EAAY,CAAA,EAEZL,IACFH,EAAUS,EAAST,GAAS,SAAUU,GACpC,OAAOA,IAAMP,GAAMO,IAAMJ,CAC/B,KAGE,IAAIK,EAAcC,EAAWhB,EAAGI,GAChCa,EAAUF,GAAa,SAAUG,GAC/B,GAAIlB,EAAEK,SAASa,EAAMjB,GAAGkB,OAAQ,CAC9B,IAAIC,EAAiBrB,EAAaC,EAAGkB,EAAMjB,EAAGC,EAAIC,GAClDS,EAAUM,EAAMjB,GAAKmB,EACjBC,EAAMD,EAAgB,gBA0CEE,EAzCFF,EA0CzBG,GADmBC,EAzCDN,GA0CGF,aAMxBQ,EAAOR,WAAaM,EAAMN,WAC1BQ,EAAOC,OAASH,EAAMG,SANtBD,EAAOR,YACJQ,EAAOR,WAAaQ,EAAOC,OAASH,EAAMN,WAAaM,EAAMG,SAC7DD,EAAOC,OAASH,EAAMG,QACzBD,EAAOC,QAAUH,EAAMG,QA5CtB,CAuCL,IAA0BD,EAAQF,CAtClC,IAEE,IAAII,EAAUC,EAAiBZ,EAAab,IAuB9C,SAAyBwB,EAASd,GAChCK,EAAUS,GAAS,SAAUR,GAC3BA,EAAMU,GAAKC,EACTX,EAAMU,GAAGE,KAAI,SAAU7B,GACrB,OAAIW,EAAUX,GACLW,EAAUX,GAAG2B,GAEf3B,CACf,IAEA,GACA,CAjCE8B,CAAgBL,EAASd,GAEzB,IAAIoB,EAASC,EAAKP,EAASvB,GAE3B,GAAII,IACFyB,EAAOJ,GAAKC,EAAU,CAACtB,EAAIyB,EAAOJ,GAAIlB,IAClCV,EAAEkC,aAAa3B,GAAIY,QAAQ,CAC7B,IAAIgB,EAASnC,EAAEM,KAAKN,EAAEkC,aAAa3B,GAAI,IACrC6B,EAASpC,EAAEM,KAAKN,EAAEkC,aAAaxB,GAAI,IAChCW,EAAMW,EAAQ,gBACjBA,EAAOhB,WAAa,EACpBgB,EAAOP,OAAS,GAElBO,EAAOhB,YACJgB,EAAOhB,WAAagB,EAAOP,OAASU,EAAOE,MAAQD,EAAOC,QAAUL,EAAOP,OAAS,GACvFO,EAAOP,QAAU,CAClB,CAGH,OAAOO,CACT"}