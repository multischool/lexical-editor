{"version":3,"file":"add-subgraph-constraints.js","sources":["../../../../../../node_modules/dagre-d3-es/src/dagre/order/add-subgraph-constraints.js"],"sourcesContent":["import * as _ from 'lodash-es';\n\nexport { addSubgraphConstraints };\n\nfunction addSubgraphConstraints(g, cg, vs) {\n  var prev = {},\n    rootPrev;\n\n  _.forEach(vs, function (v) {\n    var child = g.parent(v),\n      parent,\n      prevChild;\n    while (child) {\n      parent = g.parent(child);\n      if (parent) {\n        prevChild = prev[parent];\n        prev[parent] = child;\n      } else {\n        prevChild = rootPrev;\n        rootPrev = child;\n      }\n      if (prevChild && prevChild !== child) {\n        cg.setEdge(prevChild, child);\n        return;\n      }\n      child = parent;\n    }\n  });\n\n  /*\n  function dfs(v) {\n    var children = v ? g.children(v) : g.children();\n    if (children.length) {\n      var min = Number.POSITIVE_INFINITY,\n          subgraphs = [];\n      _.each(children, function(child) {\n        var childMin = dfs(child);\n        if (g.children(child).length) {\n          subgraphs.push({ v: child, order: childMin });\n        }\n        min = Math.min(min, childMin);\n      });\n      _.reduce(_.sortBy(subgraphs, \"order\"), function(prev, curr) {\n        cg.setEdge(prev.v, curr.v);\n        return curr;\n      });\n      return min;\n    }\n    return g.node(v).order;\n  }\n  dfs(undefined);\n  */\n}\n"],"names":["addSubgraphConstraints","g","cg","vs","rootPrev","prev","_.forEach","v","parent","prevChild","child","setEdge"],"mappings":"gDAIA,SAASA,EAAuBC,EAAGC,EAAIC,GACrC,IACEC,EADEC,EAAO,CAAE,EAGbC,EAAUH,GAAI,SAAUI,GAItB,IAHA,IACEC,EACAC,EAFEC,EAAQT,EAAEO,OAAOD,GAGdG,GAAO,CASZ,IARAF,EAASP,EAAEO,OAAOE,KAEhBD,EAAYJ,EAAKG,GACjBH,EAAKG,GAAUE,IAEfD,EAAYL,EACZA,EAAWM,GAETD,GAAaA,IAAcC,EAE7B,YADAR,EAAGS,QAAQF,EAAWC,GAGxBA,EAAQF,CACT,CACL,GAyBA"}