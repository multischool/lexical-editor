{"version":3,"file":"build-layer-graph.js","sources":["../../../../../../node_modules/dagre-d3-es/src/dagre/order/build-layer-graph.js"],"sourcesContent":["import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\n\nexport { buildLayerGraph };\n\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */\nfunction buildLayerGraph(g, rank, relationship) {\n  var root = createRootNode(g),\n    result = new Graph({ compound: true })\n      .setGraph({ root: root })\n      .setDefaultNodeLabel(function (v) {\n        return g.node(v);\n      });\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v),\n      parent = g.parent(v);\n\n    if (node.rank === rank || (node.minRank <= rank && rank <= node.maxRank)) {\n      result.setNode(v);\n      result.setParent(v, parent || root);\n\n      // This assumes we have only short edges!\n      _.forEach(g[relationship](v), function (e) {\n        var u = e.v === v ? e.w : e.v,\n          edge = result.edge(u, v),\n          weight = !_.isUndefined(edge) ? edge.weight : 0;\n        result.setEdge(u, v, { weight: g.edge(e).weight + weight });\n      });\n\n      if (_.has(node, 'minRank')) {\n        result.setNode(v, {\n          borderLeft: node.borderLeft[rank],\n          borderRight: node.borderRight[rank],\n        });\n      }\n    }\n  });\n\n  return result;\n}\n\nfunction createRootNode(g) {\n  var v;\n  while (g.hasNode((v = _.uniqueId('_root'))));\n  return v;\n}\n"],"names":["buildLayerGraph","g","rank","relationship","root","v","hasNode","_.uniqueId","createRootNode","result","Graph","compound","setGraph","setDefaultNodeLabel","node","_.forEach","nodes","parent","minRank","maxRank","setNode","setParent","e","u","w","edge","weight","_.isUndefined","setEdge","_.has","borderLeft","borderRight"],"mappings":"iPAmCA,SAASA,EAAgBC,EAAGC,EAAMC,GAChC,IAAIC,EAmCN,SAAwBH,GACtB,IAAII,EACJ,KAAOJ,EAAEK,QAASD,EAAIE,EAAW,YACjC,OAAOF,CACT,CAvCaG,CAAeP,GACxBQ,EAAS,IAAIC,EAAM,CAAEC,UAAU,IAC5BC,SAAS,CAAER,KAAMA,IACjBS,qBAAoB,SAAUR,GAC7B,OAAOJ,EAAEa,KAAKT,EACtB,IA2BE,OAzBAU,EAAUd,EAAEe,SAAS,SAAUX,GAC7B,IAAIS,EAAOb,EAAEa,KAAKT,GAChBY,EAAShB,EAAEgB,OAAOZ,IAEhBS,EAAKZ,OAASA,GAASY,EAAKI,SAAWhB,GAAQA,GAAQY,EAAKK,WAC9DV,EAAOW,QAAQf,GACfI,EAAOY,UAAUhB,EAAGY,GAAUb,GAG9BW,EAAUd,EAAEE,GAAcE,IAAI,SAAUiB,GACtC,IAAIC,EAAID,EAAEjB,IAAMA,EAAIiB,EAAEE,EAAIF,EAAEjB,EAC1BoB,EAAOhB,EAAOgB,KAAKF,EAAGlB,GACtBqB,EAAUC,EAAcF,GAAsB,EAAdA,EAAKC,OACvCjB,EAAOmB,QAAQL,EAAGlB,EAAG,CAAEqB,OAAQzB,EAAEwB,KAAKH,GAAGI,OAASA,GAC1D,IAEUG,EAAMf,EAAM,YACdL,EAAOW,QAAQf,EAAG,CAChByB,WAAYhB,EAAKgB,WAAW5B,GAC5B6B,YAAajB,EAAKiB,YAAY7B,KAIxC,IAESO,CACT"}