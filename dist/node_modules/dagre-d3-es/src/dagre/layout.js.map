{"version":3,"file":"layout.js","sources":["../../../../../node_modules/dagre-d3-es/src/dagre/layout.js"],"sourcesContent":["import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { addBorderSegments } from './add-border-segments.js';\nimport * as coordinateSystem from './coordinate-system.js';\nimport * as acyclic from './acyclic.js';\nimport * as normalize from './normalize.js';\nimport { rank } from './rank/index.js';\nimport * as nestingGraph from './nesting-graph.js';\nimport { order } from './order/index.js';\nimport { parentDummyChains } from './parent-dummy-chains.js';\nimport { position } from './position/index.js';\nimport * as util from './util.js';\n\nexport { layout };\n\nfunction layout(g, opts) {\n  var time = opts && opts.debugTiming ? util.time : util.notime;\n  time('layout', function () {\n    var layoutGraph = time('  buildLayoutGraph', function () {\n      return buildLayoutGraph(g);\n    });\n    time('  runLayout', function () {\n      runLayout(layoutGraph, time);\n    });\n    time('  updateInputGraph', function () {\n      updateInputGraph(g, layoutGraph);\n    });\n  });\n}\n\nfunction runLayout(g, time) {\n  time('    makeSpaceForEdgeLabels', function () {\n    makeSpaceForEdgeLabels(g);\n  });\n  time('    removeSelfEdges', function () {\n    removeSelfEdges(g);\n  });\n  time('    acyclic', function () {\n    acyclic.run(g);\n  });\n  time('    nestingGraph.run', function () {\n    nestingGraph.run(g);\n  });\n  time('    rank', function () {\n    rank(util.asNonCompoundGraph(g));\n  });\n  time('    injectEdgeLabelProxies', function () {\n    injectEdgeLabelProxies(g);\n  });\n  time('    removeEmptyRanks', function () {\n    util.removeEmptyRanks(g);\n  });\n  time('    nestingGraph.cleanup', function () {\n    nestingGraph.cleanup(g);\n  });\n  time('    normalizeRanks', function () {\n    util.normalizeRanks(g);\n  });\n  time('    assignRankMinMax', function () {\n    assignRankMinMax(g);\n  });\n  time('    removeEdgeLabelProxies', function () {\n    removeEdgeLabelProxies(g);\n  });\n  time('    normalize.run', function () {\n    normalize.run(g);\n  });\n  time('    parentDummyChains', function () {\n    parentDummyChains(g);\n  });\n  time('    addBorderSegments', function () {\n    addBorderSegments(g);\n  });\n  time('    order', function () {\n    order(g);\n  });\n  time('    insertSelfEdges', function () {\n    insertSelfEdges(g);\n  });\n  time('    adjustCoordinateSystem', function () {\n    coordinateSystem.adjust(g);\n  });\n  time('    position', function () {\n    position(g);\n  });\n  time('    positionSelfEdges', function () {\n    positionSelfEdges(g);\n  });\n  time('    removeBorderNodes', function () {\n    removeBorderNodes(g);\n  });\n  time('    normalize.undo', function () {\n    normalize.undo(g);\n  });\n  time('    fixupEdgeLabelCoords', function () {\n    fixupEdgeLabelCoords(g);\n  });\n  time('    undoCoordinateSystem', function () {\n    coordinateSystem.undo(g);\n  });\n  time('    translateGraph', function () {\n    translateGraph(g);\n  });\n  time('    assignNodeIntersects', function () {\n    assignNodeIntersects(g);\n  });\n  time('    reversePoints', function () {\n    reversePointsForReversedEdges(g);\n  });\n  time('    acyclic.undo', function () {\n    acyclic.undo(g);\n  });\n}\n\n/*\n * Copies final layout information from the layout graph back to the input\n * graph. This process only copies whitelisted attributes from the layout graph\n * to the input graph, so it serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction updateInputGraph(inputGraph, layoutGraph) {\n  _.forEach(inputGraph.nodes(), function (v) {\n    var inputLabel = inputGraph.node(v);\n    var layoutLabel = layoutGraph.node(v);\n\n    if (inputLabel) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n\n      if (layoutGraph.children(v).length) {\n        inputLabel.width = layoutLabel.width;\n        inputLabel.height = layoutLabel.height;\n      }\n    }\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var inputLabel = inputGraph.edge(e);\n    var layoutLabel = layoutGraph.edge(e);\n\n    inputLabel.points = layoutLabel.points;\n    if (_.has(layoutLabel, 'x')) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n    }\n  });\n\n  inputGraph.graph().width = layoutGraph.graph().width;\n  inputGraph.graph().height = layoutGraph.graph().height;\n}\n\nvar graphNumAttrs = ['nodesep', 'edgesep', 'ranksep', 'marginx', 'marginy'];\nvar graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: 'tb' };\nvar graphAttrs = ['acyclicer', 'ranker', 'rankdir', 'align'];\nvar nodeNumAttrs = ['width', 'height'];\nvar nodeDefaults = { width: 0, height: 0 };\nvar edgeNumAttrs = ['minlen', 'weight', 'width', 'height', 'labeloffset'];\nvar edgeDefaults = {\n  minlen: 1,\n  weight: 1,\n  width: 0,\n  height: 0,\n  labeloffset: 10,\n  labelpos: 'r',\n};\nvar edgeAttrs = ['labelpos'];\n\n/*\n * Constructs a new graph from the input graph, which can be used for layout.\n * This process copies only whitelisted attributes from the input graph to the\n * layout graph. Thus this function serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction buildLayoutGraph(inputGraph) {\n  var g = new Graph({ multigraph: true, compound: true });\n  var graph = canonicalize(inputGraph.graph());\n\n  g.setGraph(\n    _.merge({}, graphDefaults, selectNumberAttrs(graph, graphNumAttrs), _.pick(graph, graphAttrs))\n  );\n\n  _.forEach(inputGraph.nodes(), function (v) {\n    var node = canonicalize(inputGraph.node(v));\n    g.setNode(v, _.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));\n    g.setParent(v, inputGraph.parent(v));\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var edge = canonicalize(inputGraph.edge(e));\n    g.setEdge(\n      e,\n      _.merge({}, edgeDefaults, selectNumberAttrs(edge, edgeNumAttrs), _.pick(edge, edgeAttrs))\n    );\n  });\n\n  return g;\n}\n\n/*\n * This idea comes from the Gansner paper: to account for edge labels in our\n * layout we split each rank in half by doubling minlen and halving ranksep.\n * Then we can place labels at these mid-points between nodes.\n *\n * We also add some minimal padding to the width to push the label for the edge\n * away from the edge itself a bit.\n */\nfunction makeSpaceForEdgeLabels(g) {\n  var graph = g.graph();\n  graph.ranksep /= 2;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    edge.minlen *= 2;\n    if (edge.labelpos.toLowerCase() !== 'c') {\n      if (graph.rankdir === 'TB' || graph.rankdir === 'BT') {\n        edge.width += edge.labeloffset;\n      } else {\n        edge.height += edge.labeloffset;\n      }\n    }\n  });\n}\n\n/*\n * Creates temporary dummy nodes that capture the rank in which each edge's\n * label is going to, if it has one of non-zero width and height. We do this\n * so that we can safely remove empty ranks while preserving balance for the\n * label's position.\n */\nfunction injectEdgeLabelProxies(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.width && edge.height) {\n      var v = g.node(e.v);\n      var w = g.node(e.w);\n      var label = { rank: (w.rank - v.rank) / 2 + v.rank, e: e };\n      util.addDummyNode(g, 'edge-proxy', label, '_ep');\n    }\n  });\n}\n\nfunction assignRankMinMax(g) {\n  var maxRank = 0;\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.borderTop) {\n      node.minRank = g.node(node.borderTop).rank;\n      node.maxRank = g.node(node.borderBottom).rank;\n      // @ts-expect-error\n      maxRank = _.max(maxRank, node.maxRank);\n    }\n  });\n  g.graph().maxRank = maxRank;\n}\n\nfunction removeEdgeLabelProxies(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'edge-proxy') {\n      g.edge(node.e).labelRank = node.rank;\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction translateGraph(g) {\n  var minX = Number.POSITIVE_INFINITY;\n  var maxX = 0;\n  var minY = Number.POSITIVE_INFINITY;\n  var maxY = 0;\n  var graphLabel = g.graph();\n  var marginX = graphLabel.marginx || 0;\n  var marginY = graphLabel.marginy || 0;\n\n  function getExtremes(attrs) {\n    var x = attrs.x;\n    var y = attrs.y;\n    var w = attrs.width;\n    var h = attrs.height;\n    minX = Math.min(minX, x - w / 2);\n    maxX = Math.max(maxX, x + w / 2);\n    minY = Math.min(minY, y - h / 2);\n    maxY = Math.max(maxY, y + h / 2);\n  }\n\n  _.forEach(g.nodes(), function (v) {\n    getExtremes(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (_.has(edge, 'x')) {\n      getExtremes(edge);\n    }\n  });\n\n  minX -= marginX;\n  minY -= marginY;\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    node.x -= minX;\n    node.y -= minY;\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, function (p) {\n      p.x -= minX;\n      p.y -= minY;\n    });\n    if (_.has(edge, 'x')) {\n      edge.x -= minX;\n    }\n    if (_.has(edge, 'y')) {\n      edge.y -= minY;\n    }\n  });\n\n  graphLabel.width = maxX - minX + marginX;\n  graphLabel.height = maxY - minY + marginY;\n}\n\nfunction assignNodeIntersects(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    var nodeV = g.node(e.v);\n    var nodeW = g.node(e.w);\n    var p1, p2;\n    if (!edge.points) {\n      edge.points = [];\n      p1 = nodeW;\n      p2 = nodeV;\n    } else {\n      p1 = edge.points[0];\n      p2 = edge.points[edge.points.length - 1];\n    }\n    edge.points.unshift(util.intersectRect(nodeV, p1));\n    edge.points.push(util.intersectRect(nodeW, p2));\n  });\n}\n\nfunction fixupEdgeLabelCoords(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (_.has(edge, 'x')) {\n      if (edge.labelpos === 'l' || edge.labelpos === 'r') {\n        edge.width -= edge.labeloffset;\n      }\n      switch (edge.labelpos) {\n        case 'l':\n          edge.x -= edge.width / 2 + edge.labeloffset;\n          break;\n        case 'r':\n          edge.x += edge.width / 2 + edge.labeloffset;\n          break;\n      }\n    }\n  });\n}\n\nfunction reversePointsForReversedEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.reversed) {\n      edge.points.reverse();\n    }\n  });\n}\n\nfunction removeBorderNodes(g) {\n  _.forEach(g.nodes(), function (v) {\n    if (g.children(v).length) {\n      var node = g.node(v);\n      var t = g.node(node.borderTop);\n      var b = g.node(node.borderBottom);\n      var l = g.node(_.last(node.borderLeft));\n      var r = g.node(_.last(node.borderRight));\n\n      node.width = Math.abs(r.x - l.x);\n      node.height = Math.abs(b.y - t.y);\n      node.x = l.x + node.width / 2;\n      node.y = t.y + node.height / 2;\n    }\n  });\n\n  _.forEach(g.nodes(), function (v) {\n    if (g.node(v).dummy === 'border') {\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction removeSelfEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    if (e.v === e.w) {\n      var node = g.node(e.v);\n      if (!node.selfEdges) {\n        node.selfEdges = [];\n      }\n      node.selfEdges.push({ e: e, label: g.edge(e) });\n      g.removeEdge(e);\n    }\n  });\n}\n\nfunction insertSelfEdges(g) {\n  var layers = util.buildLayerMatrix(g);\n  _.forEach(layers, function (layer) {\n    var orderShift = 0;\n    _.forEach(layer, function (v, i) {\n      var node = g.node(v);\n      node.order = i + orderShift;\n      _.forEach(node.selfEdges, function (selfEdge) {\n        util.addDummyNode(\n          g,\n          'selfedge',\n          {\n            width: selfEdge.label.width,\n            height: selfEdge.label.height,\n            rank: node.rank,\n            order: i + ++orderShift,\n            e: selfEdge.e,\n            label: selfEdge.label,\n          },\n          '_se'\n        );\n      });\n      delete node.selfEdges;\n    });\n  });\n}\n\nfunction positionSelfEdges(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'selfedge') {\n      var selfNode = g.node(node.e.v);\n      var x = selfNode.x + selfNode.width / 2;\n      var y = selfNode.y;\n      var dx = node.x - x;\n      var dy = selfNode.height / 2;\n      g.setEdge(node.e, node.label);\n      g.removeNode(v);\n      node.label.points = [\n        { x: x + (2 * dx) / 3, y: y - dy },\n        { x: x + (5 * dx) / 6, y: y - dy },\n        { x: x + dx, y: y },\n        { x: x + (5 * dx) / 6, y: y + dy },\n        { x: x + (2 * dx) / 3, y: y + dy },\n      ];\n      node.label.x = node.x;\n      node.label.y = node.y;\n    }\n  });\n}\n\nfunction selectNumberAttrs(obj, attrs) {\n  return _.mapValues(_.pick(obj, attrs), Number);\n}\n\nfunction canonicalize(attrs) {\n  var newAttrs = {};\n  _.forEach(attrs, function (v, k) {\n    newAttrs[k.toLowerCase()] = v;\n  });\n  return newAttrs;\n}\n"],"names":["layout","g","opts","time","debugTiming","util.time","util.notime","layoutGraph","inputGraph","Graph","multigraph","compound","graph","canonicalize","setGraph","_.merge","graphDefaults","selectNumberAttrs","graphNumAttrs","_.pick","graphAttrs","_.forEach","nodes","v","node","setNode","_.defaults","nodeNumAttrs","nodeDefaults","setParent","parent","edges","e","edge","setEdge","edgeDefaults","edgeNumAttrs","edgeAttrs","buildLayoutGraph","ranksep","minlen","labelpos","toLowerCase","rankdir","width","labeloffset","height","makeSpaceForEdgeLabels","w","selfEdges","push","label","removeEdge","removeSelfEdges","acyclic.run","nestingGraph.run","rank","util.asNonCompoundGraph","util.addDummyNode","injectEdgeLabelProxies","util.removeEmptyRanks","nestingGraph.cleanup","util.normalizeRanks","maxRank","borderTop","minRank","borderBottom","_.max","assignRankMinMax","dummy","labelRank","removeNode","removeEdgeLabelProxies","normalize.run","parentDummyChains","addBorderSegments","order","layers","util.buildLayerMatrix","layer","orderShift","i","selfEdge","insertSelfEdges","coordinateSystem.adjust","position","selfNode","x","y","dx","dy","points","positionSelfEdges","children","length","t","b","l","_.last","borderLeft","r","borderRight","Math","abs","removeBorderNodes","normalize.undo","_.has","fixupEdgeLabelCoords","coordinateSystem.undo","minX","Number","POSITIVE_INFINITY","maxX","minY","maxY","graphLabel","marginX","marginx","marginY","marginy","getExtremes","attrs","h","min","max","p","translateGraph","p1","p2","nodeV","nodeW","unshift","util.intersectRect","assignNodeIntersects","reversed","reverse","reversePointsForReversedEdges","acyclic.undo","runLayout","inputLabel","layoutLabel","updateInputGraph","edgesep","nodesep","weight","obj","_.mapValues","newAttrs","k"],"mappings":"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"}