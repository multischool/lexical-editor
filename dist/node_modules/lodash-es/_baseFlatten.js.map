{"version":3,"file":"_baseFlatten.js","sources":["../../../node_modules/lodash-es/_baseFlatten.js"],"sourcesContent":["import arrayPush from './_arrayPush.js';\nimport isFlattenable from './_isFlattenable.js';\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\nexport default baseFlatten;\n"],"names":["baseFlatten","array","depth","predicate","isStrict","result","index","length","isFlattenable","value","arrayPush"],"mappings":"kEAcA,SAASA,EAAYC,EAAOC,EAAOC,EAAWC,EAAUC,GACtD,IAAIC,GAAS,EACTC,EAASN,EAAMM,OAKnB,IAHAJ,IAAcA,EAAYK,GAC1BH,IAAWA,EAAS,MAEXC,EAAQC,GAAQ,CACvB,IAAIE,EAAQR,EAAMK,GACdJ,EAAQ,GAAKC,EAAUM,GACrBP,EAAQ,EAEVF,EAAYS,EAAOP,EAAQ,EAAGC,EAAWC,EAAUC,GAEnDK,EAAUL,EAAQI,GAEVL,IACVC,EAAOA,EAAOE,QAAUE,EAE3B,CACD,OAAOJ,CACT"}