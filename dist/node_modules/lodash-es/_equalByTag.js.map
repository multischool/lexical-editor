{"version":3,"file":"_equalByTag.js","sources":["../../../node_modules/lodash-es/_equalByTag.js"],"sourcesContent":["import Symbol from './_Symbol.js';\nimport Uint8Array from './_Uint8Array.js';\nimport eq from './eq.js';\nimport equalArrays from './_equalArrays.js';\nimport mapToArray from './_mapToArray.js';\nimport setToArray from './_setToArray.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nexport default equalByTag;\n"],"names":["symbolProto","Symbol","prototype","undefined","symbolValueOf","valueOf","equalByTag","object","other","tag","bitmask","customizer","equalFunc","stack","byteLength","byteOffset","buffer","Uint8Array","eq","name","message","convert","mapToArray","isPartial","setToArray","size","stacked","get","set","result","equalArrays","call"],"mappings":"oLAQA,IAkBIA,EAAcC,EAASA,EAAOC,eAAYC,EAC1CC,EAAgBJ,EAAcA,EAAYK,aAAUF,EAmBxD,SAASG,EAAWC,EAAQC,EAAOC,EAAKC,EAASC,EAAYC,EAAWC,GACtE,OAAQJ,GACN,IAzBc,oBA0BZ,GAAKF,EAAOO,YAAcN,EAAMM,YAC3BP,EAAOQ,YAAcP,EAAMO,WAC9B,OAAO,EAETR,EAASA,EAAOS,OAChBR,EAAQA,EAAMQ,OAEhB,IAlCiB,uBAmCf,QAAKT,EAAOO,YAAcN,EAAMM,aAC3BF,EAAU,IAAIK,EAAWV,GAAS,IAAIU,EAAWT,KAKxD,IAnDU,mBAoDV,IAnDU,gBAoDV,IAjDY,kBAoDV,OAAOU,GAAIX,GAASC,GAEtB,IAxDW,iBAyDT,OAAOD,EAAOY,MAAQX,EAAMW,MAAQZ,EAAOa,SAAWZ,EAAMY,QAE9D,IAxDY,kBAyDZ,IAvDY,kBA2DV,OAAOb,GAAWC,EAAQ,GAE5B,IAjES,eAkEP,IAAIa,EAAUC,EAEhB,IAjES,eAkEP,IAAIC,EA5EiB,EA4ELb,EAGhB,GAFAW,IAAYA,EAAUG,GAElBjB,EAAOkB,MAAQjB,EAAMiB,OAASF,EAChC,OAAO,EAGT,IAAIG,EAAUb,EAAMc,IAAIpB,GACxB,GAAImB,EACF,OAAOA,GAAWlB,EAEpBE,GAtFuB,EAyFvBG,EAAMe,IAAIrB,EAAQC,GAClB,IAAIqB,EAASC,EAAYT,EAAQd,GAASc,EAAQb,GAAQE,EAASC,EAAYC,EAAWC,GAE1F,OADAA,EAAc,OAAEN,GACTsB,EAET,IAnFY,kBAoFV,GAAIzB,EACF,OAAOA,EAAc2B,KAAKxB,IAAWH,EAAc2B,KAAKvB,GAG9D,OAAO,CACT"}