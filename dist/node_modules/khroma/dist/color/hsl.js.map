{"version":3,"file":"hsl.js","sources":["../../../../../node_modules/khroma/dist/color/hsl.js"],"sourcesContent":["/* IMPORT */\nimport _ from '../utils/index.js';\nimport ChannelsReusable from '../channels/reusable.js';\n/* MAIN */\nconst HSL = {\n    /* VARIABLES */\n    re: /^hsla?\\(\\s*?(-?(?:\\d+(?:\\.\\d+)?|(?:\\.\\d+))(?:e-?\\d+)?(?:deg|grad|rad|turn)?)\\s*?(?:,|\\s)\\s*?(-?(?:\\d+(?:\\.\\d+)?|(?:\\.\\d+))(?:e-?\\d+)?%)\\s*?(?:,|\\s)\\s*?(-?(?:\\d+(?:\\.\\d+)?|(?:\\.\\d+))(?:e-?\\d+)?%)(?:\\s*?(?:,|\\/)\\s*?\\+?(-?(?:\\d+(?:\\.\\d+)?|(?:\\.\\d+))(?:e-?\\d+)?(%)?))?\\s*?\\)$/i,\n    hueRe: /^(.+?)(deg|grad|rad|turn)$/i,\n    /* HELPERS */\n    _hue2deg: (hue) => {\n        const match = hue.match(HSL.hueRe);\n        if (match) {\n            const [, number, unit] = match;\n            switch (unit) {\n                case 'grad': return _.channel.clamp.h(parseFloat(number) * .9);\n                case 'rad': return _.channel.clamp.h(parseFloat(number) * 180 / Math.PI);\n                case 'turn': return _.channel.clamp.h(parseFloat(number) * 360);\n            }\n        }\n        return _.channel.clamp.h(parseFloat(hue));\n    },\n    /* API */\n    parse: (color) => {\n        const charCode = color.charCodeAt(0);\n        if (charCode !== 104 && charCode !== 72)\n            return; // 'h'/'H'\n        const match = color.match(HSL.re);\n        if (!match)\n            return;\n        const [, h, s, l, a, isAlphaPercentage] = match;\n        return ChannelsReusable.set({\n            h: HSL._hue2deg(h),\n            s: _.channel.clamp.s(parseFloat(s)),\n            l: _.channel.clamp.l(parseFloat(l)),\n            a: a ? _.channel.clamp.a(isAlphaPercentage ? parseFloat(a) / 100 : parseFloat(a)) : 1\n        }, color);\n    },\n    stringify: (channels) => {\n        const { h, s, l, a } = channels;\n        if (a < 1) { // HSLA\n            return `hsla(${_.lang.round(h)}, ${_.lang.round(s)}%, ${_.lang.round(l)}%, ${a})`;\n        }\n        else { // HSL\n            return `hsl(${_.lang.round(h)}, ${_.lang.round(s)}%, ${_.lang.round(l)}%)`;\n        }\n    }\n};\n/* EXPORT */\nexport default HSL;\n"],"names":["HSL","re","hueRe","_hue2deg","hue","match","number","unit","_","channel","clamp","h","parseFloat","Math","PI","parse","color","charCode","charCodeAt","s","l","a","isAlphaPercentage","ChannelsReusable","set","stringify","channels","lang","round","HSL$1"],"mappings":"wEAIA,MAAMA,EAAM,CAERC,GAAI,mRACJC,MAAO,8BAEPC,SAAWC,IACP,MAAMC,EAAQD,EAAIC,MAAML,EAAIE,OAC5B,GAAIG,EAAO,CACP,OAASC,EAAQC,GAAQF,EACzB,OAAQE,GACJ,IAAK,OAAQ,OAAOC,EAAEC,QAAQC,MAAMC,EAAuB,GAArBC,WAAWN,IACjD,IAAK,MAAO,OAAOE,EAAEC,QAAQC,MAAMC,EAAuB,IAArBC,WAAWN,GAAgBO,KAAKC,IACrE,IAAK,OAAQ,OAAON,EAAEC,QAAQC,MAAMC,EAAuB,IAArBC,WAAWN,IAExD,CACD,OAAOE,EAAEC,QAAQC,MAAMC,EAAEC,WAAWR,GAAK,EAG7CW,MAAQC,IACJ,MAAMC,EAAWD,EAAME,WAAW,GAClC,GAAiB,MAAbD,GAAiC,KAAbA,EACpB,OACJ,MAAMZ,EAAQW,EAAMX,MAAML,EAAIC,IAC9B,IAAKI,EACD,OACJ,MAAM,CAAGM,EAAGQ,EAAGC,EAAGC,EAAGC,GAAqBjB,EAC1C,OAAOkB,EAAiBC,IAAI,CACxBb,EAAGX,EAAIG,SAASQ,GAChBQ,EAAGX,EAAEC,QAAQC,MAAMS,EAAEP,WAAWO,IAChCC,EAAGZ,EAAEC,QAAQC,MAAMU,EAAER,WAAWQ,IAChCC,EAAGA,EAAIb,EAAEC,QAAQC,MAAMW,EAAEC,EAAoBV,WAAWS,GAAK,IAAMT,WAAWS,IAAM,GACrFL,EAAM,EAEbS,UAAYC,IACR,MAAMf,EAAEA,EAACQ,EAAEA,EAACC,EAAEA,EAACC,EAAEA,GAAMK,EACvB,OAAIL,EAAI,EACG,QAAQb,EAAEmB,KAAKC,MAAMjB,OAAOH,EAAEmB,KAAKC,MAAMT,QAAQX,EAAEmB,KAAKC,MAAMR,QAAQC,KAGtE,OAAOb,EAAEmB,KAAKC,MAAMjB,OAAOH,EAAEmB,KAAKC,MAAMT,QAAQX,EAAEmB,KAAKC,MAAMR,MACvE,GAIT,IAAAS,EAAe7B"}