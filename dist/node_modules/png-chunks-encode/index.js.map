{"version":3,"file":"index.js","sources":["../../../node_modules/png-chunks-encode/index.js"],"sourcesContent":["var sliced = require('sliced')\nvar crc32 = require('crc-32')\n\nmodule.exports = encodeChunks\n\n// Used for fast-ish conversion between uint8s and uint32s/int32s.\n// Also required in order to remain agnostic for both Node Buffers and\n// Uint8Arrays.\nvar uint8 = new Uint8Array(4)\nvar int32 = new Int32Array(uint8.buffer)\nvar uint32 = new Uint32Array(uint8.buffer)\n\nfunction encodeChunks (chunks) {\n  var totalSize = 8\n  var idx = totalSize\n  var i\n\n  for (i = 0; i < chunks.length; i++) {\n    totalSize += chunks[i].data.length\n    totalSize += 12\n  }\n\n  var output = new Uint8Array(totalSize)\n\n  output[0] = 0x89\n  output[1] = 0x50\n  output[2] = 0x4E\n  output[3] = 0x47\n  output[4] = 0x0D\n  output[5] = 0x0A\n  output[6] = 0x1A\n  output[7] = 0x0A\n\n  for (i = 0; i < chunks.length; i++) {\n    var chunk = chunks[i]\n    var name = chunk.name\n    var data = chunk.data\n    var size = data.length\n    var nameChars = [\n      name.charCodeAt(0),\n      name.charCodeAt(1),\n      name.charCodeAt(2),\n      name.charCodeAt(3)\n    ]\n\n    uint32[0] = size\n    output[idx++] = uint8[3]\n    output[idx++] = uint8[2]\n    output[idx++] = uint8[1]\n    output[idx++] = uint8[0]\n\n    output[idx++] = nameChars[0]\n    output[idx++] = nameChars[1]\n    output[idx++] = nameChars[2]\n    output[idx++] = nameChars[3]\n\n    for (var j = 0; j < size;) {\n      output[idx++] = data[j++]\n    }\n\n    var crcCheck = nameChars.concat(sliced(data))\n    var crc = crc32.buf(crcCheck)\n\n    int32[0] = crc\n    output[idx++] = uint8[3]\n    output[idx++] = uint8[2]\n    output[idx++] = uint8[1]\n    output[idx++] = uint8[0]\n  }\n\n  return output\n}\n"],"names":["sliced","require$$0","crc32","require$$1","pngChunksEncode","chunks","i","totalSize","idx","length","data","output","Uint8Array","chunk","name","size","nameChars","charCodeAt","uint32","uint8","j","crcCheck","concat","crc","buf","int32","Int32Array","buffer","Uint32Array"],"mappings":"iHAAA,IAAIA,EAASC,EACTC,EAAQC,EAEZC,EASA,SAAuBC,GACrB,IAEIC,EAFAC,EAAY,EACZC,EAAMD,EAGV,IAAKD,EAAI,EAAGA,EAAID,EAAOI,OAAQH,IAC7BC,GAAaF,EAAOC,GAAGI,KAAKD,OAC5BF,GAAa,GAGf,IAAII,EAAS,IAAIC,WAAWL,GAW5B,IATAI,EAAO,GAAK,IACZA,EAAO,GAAK,GACZA,EAAO,GAAK,GACZA,EAAO,GAAK,GACZA,EAAO,GAAK,GACZA,EAAO,GAAK,GACZA,EAAO,GAAK,GACZA,EAAO,GAAK,GAEPL,EAAI,EAAGA,EAAID,EAAOI,OAAQH,IAAK,CAClC,IAAIO,EAAQR,EAAOC,GACfQ,EAAOD,EAAMC,KACbJ,EAAOG,EAAMH,KACbK,EAAOL,EAAKD,OACZO,EAAY,CACdF,EAAKG,WAAW,GAChBH,EAAKG,WAAW,GAChBH,EAAKG,WAAW,GAChBH,EAAKG,WAAW,IAGlBC,EAAO,GAAKH,EACZJ,EAAOH,KAASW,EAAM,GACtBR,EAAOH,KAASW,EAAM,GACtBR,EAAOH,KAASW,EAAM,GACtBR,EAAOH,KAASW,EAAM,GAEtBR,EAAOH,KAASQ,EAAU,GAC1BL,EAAOH,KAASQ,EAAU,GAC1BL,EAAOH,KAASQ,EAAU,GAC1BL,EAAOH,KAASQ,EAAU,GAE1B,IAAK,IAAII,EAAI,EAAGA,EAAIL,GAClBJ,EAAOH,KAASE,EAAKU,KAGvB,IAAIC,EAAWL,EAAUM,OAAOtB,EAAOU,IACnCa,EAAMrB,EAAMsB,IAAIH,GAEpBI,EAAM,GAAKF,EACXZ,EAAOH,KAASW,EAAM,GACtBR,EAAOH,KAASW,EAAM,GACtBR,EAAOH,KAASW,EAAM,GACtBR,EAAOH,KAASW,EAAM,EACvB,CAED,OAAOR,CACT,EA/DIQ,EAAQ,IAAIP,WAAW,GACvBa,EAAQ,IAAIC,WAAWP,EAAMQ,QAC7BT,EAAS,IAAIU,YAAYT,EAAMQ"}