{"version":3,"file":"fuzzy.js","sources":["../../../../node_modules/fuzzy/lib/fuzzy.js"],"sourcesContent":["/*\n * Fuzzy\n * https://github.com/myork/fuzzy\n *\n * Copyright (c) 2012 Matt York\n * Licensed under the MIT license.\n */\n\n(function() {\n\nvar root = this;\n\nvar fuzzy = {};\n\n// Use in node or in browser\nif (typeof exports !== 'undefined') {\n  module.exports = fuzzy;\n} else {\n  root.fuzzy = fuzzy;\n}\n\n// Return all elements of `array` that have a fuzzy\n// match against `pattern`.\nfuzzy.simpleFilter = function(pattern, array) {\n  return array.filter(function(str) {\n    return fuzzy.test(pattern, str);\n  });\n};\n\n// Does `pattern` fuzzy match `str`?\nfuzzy.test = function(pattern, str) {\n  return fuzzy.match(pattern, str) !== null;\n};\n\n// If `pattern` matches `str`, wrap each matching character\n// in `opts.pre` and `opts.post`. If no match, return null\nfuzzy.match = function(pattern, str, opts) {\n  opts = opts || {};\n  var patternIdx = 0\n    , result = []\n    , len = str.length\n    , totalScore = 0\n    , currScore = 0\n    // prefix\n    , pre = opts.pre || ''\n    // suffix\n    , post = opts.post || ''\n    // String to compare against. This might be a lowercase version of the\n    // raw string\n    , compareString =  opts.caseSensitive && str || str.toLowerCase()\n    , ch;\n\n  pattern = opts.caseSensitive && pattern || pattern.toLowerCase();\n\n  // For each character in the string, either add it to the result\n  // or wrap in template if it's the next string in the pattern\n  for(var idx = 0; idx < len; idx++) {\n    ch = str[idx];\n    if(compareString[idx] === pattern[patternIdx]) {\n      ch = pre + ch + post;\n      patternIdx += 1;\n\n      // consecutive characters should increase the score more than linearly\n      currScore += 1 + currScore;\n    } else {\n      currScore = 0;\n    }\n    totalScore += currScore;\n    result[result.length] = ch;\n  }\n\n  // return rendered string if we have a match for every char\n  if(patternIdx === pattern.length) {\n    // if the string is an exact match with pattern, totalScore should be maxed\n    totalScore = (compareString === pattern) ? Infinity : totalScore;\n    return {rendered: result.join(''), score: totalScore};\n  }\n\n  return null;\n};\n\n// The normal entry point. Filters `arr` for matches against `pattern`.\n// It returns an array with matching values of the type:\n//\n//     [{\n//         string:   '<b>lah' // The rendered string\n//       , index:    2        // The index of the element in `arr`\n//       , original: 'blah'   // The original element in `arr`\n//     }]\n//\n// `opts` is an optional argument bag. Details:\n//\n//    opts = {\n//        // string to put before a matching character\n//        pre:     '<b>'\n//\n//        // string to put after matching character\n//      , post:    '</b>'\n//\n//        // Optional function. Input is an entry in the given arr`,\n//        // output should be the string to test `pattern` against.\n//        // In this example, if `arr = [{crying: 'koala'}]` we would return\n//        // 'koala'.\n//      , extract: function(arg) { return arg.crying; }\n//    }\nfuzzy.filter = function(pattern, arr, opts) {\n  if(!arr || arr.length === 0) {\n    return [];\n  }\n  if (typeof pattern !== 'string') {\n    return arr;\n  }\n  opts = opts || {};\n  return arr\n    .reduce(function(prev, element, idx, arr) {\n      var str = element;\n      if(opts.extract) {\n        str = opts.extract(element);\n      }\n      var rendered = fuzzy.match(pattern, str, opts);\n      if(rendered != null) {\n        prev[prev.length] = {\n            string: rendered.rendered\n          , score: rendered.score\n          , index: idx\n          , original: element\n        };\n      }\n      return prev;\n    }, [])\n\n    // Sort by score. Browsers are inconsistent wrt stable/unstable\n    // sorting, so force stable by using the index in the case of tie.\n    // See http://ofb.net/~sethml/is-sort-stable.html\n    .sort(function(a,b) {\n      var compare = b.score - a.score;\n      if(compare) return compare;\n      return a.index - b.index;\n    });\n};\n\n\n}());\n\n"],"names":["fuzzy","module","exports","simpleFilter","pattern","array","filter","str","test","match","opts","ch","patternIdx","result","len","length","totalScore","currScore","pre","post","compareString","caseSensitive","toLowerCase","idx","Infinity","rendered","join","score","arr","reduce","prev","element","extract","string","index","original","sort","a","b","compare"],"mappings":"yDAQC,WAID,IAAIA,EAAQ,CAAA,EAIVC,EAAAC,QAAiBF,EAOnBA,EAAMG,aAAe,SAASC,EAASC,GACrC,OAAOA,EAAMC,QAAO,SAASC,GAC3B,OAAOP,EAAMQ,KAAKJ,EAASG,EAC/B,GACA,EAGAP,EAAMQ,KAAO,SAASJ,EAASG,GAC7B,OAAqC,OAA9BP,EAAMS,MAAML,EAASG,EAC9B,EAIAP,EAAMS,MAAQ,SAASL,EAASG,EAAKG,GACnCA,EAAOA,GAAQ,GACf,IAYIC,EAZAC,EAAa,EACbC,EAAS,GACTC,EAAMP,EAAIQ,OACVC,EAAa,EACbC,EAAY,EAEZC,EAAMR,EAAKQ,KAAO,GAElBC,EAAOT,EAAKS,MAAQ,GAGpBC,EAAiBV,EAAKW,eAAiBd,GAAOA,EAAIe,cAGtDlB,EAAUM,EAAKW,eAAiBjB,GAAWA,EAAQkB,cAInD,IAAI,IAAIC,EAAM,EAAGA,EAAMT,EAAKS,IAC1BZ,EAAKJ,EAAIgB,GACNH,EAAcG,KAASnB,EAAQQ,IAChCD,EAAKO,EAAMP,EAAKQ,EAChBP,GAAc,EAGdK,GAAa,EAAIA,GAEjBA,EAAY,EAEdD,GAAcC,EACdJ,EAAOA,EAAOE,QAAUJ,EAI1B,OAAGC,IAAeR,EAAQW,QAExBC,EAAcI,IAAkBhB,EAAWoB,IAAWR,EAC/C,CAACS,SAAUZ,EAAOa,KAAK,IAAKC,MAAOX,IAGrC,IACT,EA0BAhB,EAAMM,OAAS,SAASF,EAASwB,EAAKlB,GACpC,OAAIkB,GAAsB,IAAfA,EAAIb,OAGQ,iBAAZX,EACFwB,GAETlB,EAAOA,GAAQ,GACRkB,EACJC,QAAO,SAASC,EAAMC,EAASR,EAAKK,GACnC,IAAIrB,EAAMwB,EACPrB,EAAKsB,UACNzB,EAAMG,EAAKsB,QAAQD,IAErB,IAAIN,EAAWzB,EAAMS,MAAML,EAASG,EAAKG,GASzC,OARe,MAAZe,IACDK,EAAKA,EAAKf,QAAU,CAChBkB,OAAQR,EAASA,SACjBE,MAAOF,EAASE,MAChBO,MAAOX,EACPY,SAAUJ,IAGTD,CACR,GAAE,IAKFM,MAAK,SAASC,EAAEC,GACf,IAAIC,EAAUD,EAAEX,MAAQU,EAAEV,MAC1B,OAAGY,GACIF,EAAEH,MAAQI,EAAEJ,KACzB,KA/BW,EAgCX,CAGA,CAtIA"}