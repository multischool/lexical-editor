{"version":3,"file":"locale.js","sources":["../../../../node_modules/d3-format/src/locale.js"],"sourcesContent":["import exponent from \"./exponent.js\";\nimport formatGroup from \"./formatGroup.js\";\nimport formatNumerals from \"./formatNumerals.js\";\nimport formatSpecifier from \"./formatSpecifier.js\";\nimport formatTrim from \"./formatTrim.js\";\nimport formatTypes from \"./formatTypes.js\";\nimport {prefixExponent} from \"./formatPrefixAuto.js\";\nimport identity from \"./identity.js\";\n\nvar map = Array.prototype.map,\n    prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"µ\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\nexport default function(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + \"\"),\n      currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n      currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n      decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n      numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),\n      percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n      minus = locale.minus === undefined ? \"−\" : locale.minus + \"\",\n      nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type;\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = \"g\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision === undefined ? 6\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n        var valueNegative = value < 0 || 1 / value < 0;\n\n        // Perform the initial formatting.\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);\n\n        // Trim insignificant zeros.\n        if (trim) value = formatTrim(value);\n\n        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n        if (valueNegative && +value === 0 && sign !== \"+\") valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : minus) : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n"],"names":["map","Array","prototype","prefixes","formatLocale","locale","group","undefined","grouping","thousands","identity","formatGroup","call","Number","currencyPrefix","currency","currencySuffix","decimal","numerals","formatNumerals","String","percent","minus","nan","newFormat","specifier","fill","formatSpecifier","align","sign","symbol","zero","width","comma","precision","trim","type","formatTypes","prefix","test","toLowerCase","suffix","formatType","maybeSuffix","format","value","i","n","c","valuePrefix","valueSuffix","valueNegative","isNaN","Math","abs","formatTrim","prefixExponent","length","charCodeAt","slice","Infinity","padding","join","max","min","toString","formatPrefix","f","e","floor","exponent","k","pow"],"mappings":"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"}