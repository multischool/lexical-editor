{"version":3,"file":"hachure.js","sources":["../../../../node_modules/hachure-fill/bin/hachure.js"],"sourcesContent":["function rotatePoints(points, center, degrees) {\n    if (points && points.length) {\n        const [cx, cy] = center;\n        const angle = (Math.PI / 180) * degrees;\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n        for (const p of points) {\n            const [x, y] = p;\n            p[0] = ((x - cx) * cos) - ((y - cy) * sin) + cx;\n            p[1] = ((x - cx) * sin) + ((y - cy) * cos) + cy;\n        }\n    }\n}\nfunction rotateLines(lines, center, degrees) {\n    const points = [];\n    lines.forEach((line) => points.push(...line));\n    rotatePoints(points, center, degrees);\n}\nfunction areSamePoints(p1, p2) {\n    return p1[0] === p2[0] && p1[1] === p2[1];\n}\nexport function hachureLines(polygons, hachureGap, hachureAngle, hachureStepOffset = 1) {\n    const angle = hachureAngle;\n    const gap = Math.max(hachureGap, 0.1);\n    const polygonList = (polygons[0] && polygons[0][0] && (typeof polygons[0][0] === 'number')) ? [polygons] : polygons;\n    const rotationCenter = [0, 0];\n    if (angle) {\n        for (const polygon of polygonList) {\n            rotatePoints(polygon, rotationCenter, angle);\n        }\n    }\n    const lines = straightHachureLines(polygonList, gap, hachureStepOffset);\n    if (angle) {\n        for (const polygon of polygonList) {\n            rotatePoints(polygon, rotationCenter, -angle);\n        }\n        rotateLines(lines, rotationCenter, -angle);\n    }\n    return lines;\n}\nfunction straightHachureLines(polygons, gap, hachureStepOffset) {\n    const vertexArray = [];\n    for (const polygon of polygons) {\n        const vertices = [...polygon];\n        if (!areSamePoints(vertices[0], vertices[vertices.length - 1])) {\n            vertices.push([vertices[0][0], vertices[0][1]]);\n        }\n        if (vertices.length > 2) {\n            vertexArray.push(vertices);\n        }\n    }\n    const lines = [];\n    gap = Math.max(gap, 0.1);\n    // Create sorted edges table\n    const edges = [];\n    for (const vertices of vertexArray) {\n        for (let i = 0; i < vertices.length - 1; i++) {\n            const p1 = vertices[i];\n            const p2 = vertices[i + 1];\n            if (p1[1] !== p2[1]) {\n                const ymin = Math.min(p1[1], p2[1]);\n                edges.push({\n                    ymin,\n                    ymax: Math.max(p1[1], p2[1]),\n                    x: ymin === p1[1] ? p1[0] : p2[0],\n                    islope: (p2[0] - p1[0]) / (p2[1] - p1[1]),\n                });\n            }\n        }\n    }\n    edges.sort((e1, e2) => {\n        if (e1.ymin < e2.ymin) {\n            return -1;\n        }\n        if (e1.ymin > e2.ymin) {\n            return 1;\n        }\n        if (e1.x < e2.x) {\n            return -1;\n        }\n        if (e1.x > e2.x) {\n            return 1;\n        }\n        if (e1.ymax === e2.ymax) {\n            return 0;\n        }\n        return (e1.ymax - e2.ymax) / Math.abs((e1.ymax - e2.ymax));\n    });\n    if (!edges.length) {\n        return lines;\n    }\n    // Start scanning\n    let activeEdges = [];\n    let y = edges[0].ymin;\n    let iteration = 0;\n    while (activeEdges.length || edges.length) {\n        if (edges.length) {\n            let ix = -1;\n            for (let i = 0; i < edges.length; i++) {\n                if (edges[i].ymin > y) {\n                    break;\n                }\n                ix = i;\n            }\n            const removed = edges.splice(0, ix + 1);\n            removed.forEach((edge) => {\n                activeEdges.push({ s: y, edge });\n            });\n        }\n        activeEdges = activeEdges.filter((ae) => {\n            if (ae.edge.ymax <= y) {\n                return false;\n            }\n            return true;\n        });\n        activeEdges.sort((ae1, ae2) => {\n            if (ae1.edge.x === ae2.edge.x) {\n                return 0;\n            }\n            return (ae1.edge.x - ae2.edge.x) / Math.abs((ae1.edge.x - ae2.edge.x));\n        });\n        // fill between the edges\n        if ((hachureStepOffset !== 1) || (iteration % gap === 0)) {\n            if (activeEdges.length > 1) {\n                for (let i = 0; i < activeEdges.length; i = i + 2) {\n                    const nexti = i + 1;\n                    if (nexti >= activeEdges.length) {\n                        break;\n                    }\n                    const ce = activeEdges[i].edge;\n                    const ne = activeEdges[nexti].edge;\n                    lines.push([\n                        [Math.round(ce.x), y],\n                        [Math.round(ne.x), y],\n                    ]);\n                }\n            }\n        }\n        y += hachureStepOffset;\n        activeEdges.forEach((ae) => {\n            ae.edge.x = ae.edge.x + (hachureStepOffset * ae.edge.islope);\n        });\n        iteration++;\n    }\n    return lines;\n}\n"],"names":["rotatePoints","points","center","degrees","length","cx","cy","angle","Math","PI","cos","sin","p","x","y","areSamePoints","p1","p2","hachureLines","polygons","hachureGap","hachureAngle","hachureStepOffset","gap","max","polygonList","rotationCenter","polygon","lines","vertexArray","vertices","push","edges","i","ymin","min","ymax","islope","sort","e1","e2","abs","activeEdges","iteration","ix","splice","forEach","edge","s","filter","ae","ae1","ae2","nexti","ce","ne","round","straightHachureLines","line","rotateLines"],"mappings":"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"}