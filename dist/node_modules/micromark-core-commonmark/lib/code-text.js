import{markdownLineEnding as e}from"../../micromark-util-character/index.js";const t={name:"codeText",tokenize:function(t,n,c){let i,o,r=0;return function(e){return t.enter("codeText"),t.enter("codeTextSequence"),d(e)};function d(e){return 96===e?(t.consume(e),r++,d):(t.exit("codeTextSequence"),u(e))}function u(n){return null===n?c(n):32===n?(t.enter("space"),t.consume(n),t.exit("space"),u):96===n?(o=t.enter("codeTextSequence"),i=0,x(n)):e(n)?(t.enter("lineEnding"),t.consume(n),t.exit("lineEnding"),u):(t.enter("codeTextData"),a(n))}function a(n){return null===n||32===n||96===n||e(n)?(t.exit("codeTextData"),u(n)):(t.consume(n),a)}function x(e){return 96===e?(t.consume(e),i++,x):i===r?(t.exit("codeTextSequence"),t.exit("codeText"),n(e)):(o.type="codeTextData",a(e))}},resolve:function(e){let t,n,c=e.length-4,i=3;if(!("lineEnding"!==e[i][1].type&&"space"!==e[i][1].type||"lineEnding"!==e[c][1].type&&"space"!==e[c][1].type))for(t=i;++t<c;)if("codeTextData"===e[t][1].type){e[i][1].type="codeTextPadding",e[c][1].type="codeTextPadding",i+=2,c-=2;break}t=i-1,c++;for(;++t<=c;)void 0===n?t!==c&&"lineEnding"!==e[t][1].type&&(n=t):t!==c&&"lineEnding"!==e[t][1].type||(e[n][1].type="codeTextData",t!==n+2&&(e[n][1].end=e[t-1][1].end,e.splice(n+2,t-n-2),c-=t-n-2,t=n+2),n=void 0);return e},previous:function(e){return 96!==e||"characterEscape"===this.events[this.events.length-1][1].type}};export{t as codeText};
//# sourceMappingURL=code-text.js.map
