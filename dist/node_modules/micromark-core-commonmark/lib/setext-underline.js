import{factorySpace as e}from"../../micromark-factory-space/index.js";import{markdownSpace as t,markdownLineEnding as n}from"../../micromark-util-character/index.js";const i={name:"setextUnderline",tokenize:function(i,r,s){const a=this;let o;return function(e){let t,n=a.events.length;for(;n--;)if("lineEnding"!==a.events[n][1].type&&"linePrefix"!==a.events[n][1].type&&"content"!==a.events[n][1].type){t="paragraph"===a.events[n][1].type;break}if(!a.parser.lazy[a.now().line]&&(a.interrupt||t))return i.enter("setextHeadingLine"),o=e,function(e){return i.enter("setextHeadingLineSequence"),c(e)}(e);return s(e)};function c(n){return n===o?(i.consume(n),c):(i.exit("setextHeadingLineSequence"),t(n)?e(i,p,"lineSuffix")(n):p(n))}function p(e){return null===e||n(e)?(i.exit("setextHeadingLine"),r(e)):s(e)}},resolveTo:function(e,t){let n,i,r,s=e.length;for(;s--;)if("enter"===e[s][0]){if("content"===e[s][1].type){n=s;break}"paragraph"===e[s][1].type&&(i=s)}else"content"===e[s][1].type&&e.splice(s,1),r||"definition"!==e[s][1].type||(r=s);const a={type:"setextHeading",start:Object.assign({},e[i][1].start),end:Object.assign({},e[e.length-1][1].end)};e[i][1].type="setextHeadingText",r?(e.splice(i,0,["enter",a,t]),e.splice(r+1,0,["exit",e[n][1],t]),e[n][1].end=Object.assign({},e[r][1].end)):e[n][1]=a;return e.push(["exit",a,t]),e}};export{i as setextUnderline};
//# sourceMappingURL=setext-underline.js.map
