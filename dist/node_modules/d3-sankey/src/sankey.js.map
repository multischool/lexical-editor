{"version":3,"file":"sankey.js","sources":["../../../../node_modules/d3-sankey/src/sankey.js"],"sourcesContent":["import {max, min, sum} from \"d3-array\";\nimport {justify} from \"./align.js\";\nimport constant from \"./constant.js\";\n\nfunction ascendingSourceBreadth(a, b) {\n  return ascendingBreadth(a.source, b.source) || a.index - b.index;\n}\n\nfunction ascendingTargetBreadth(a, b) {\n  return ascendingBreadth(a.target, b.target) || a.index - b.index;\n}\n\nfunction ascendingBreadth(a, b) {\n  return a.y0 - b.y0;\n}\n\nfunction value(d) {\n  return d.value;\n}\n\nfunction defaultId(d) {\n  return d.index;\n}\n\nfunction defaultNodes(graph) {\n  return graph.nodes;\n}\n\nfunction defaultLinks(graph) {\n  return graph.links;\n}\n\nfunction find(nodeById, id) {\n  const node = nodeById.get(id);\n  if (!node) throw new Error(\"missing: \" + id);\n  return node;\n}\n\nfunction computeLinkBreadths({nodes}) {\n  for (const node of nodes) {\n    let y0 = node.y0;\n    let y1 = y0;\n    for (const link of node.sourceLinks) {\n      link.y0 = y0 + link.width / 2;\n      y0 += link.width;\n    }\n    for (const link of node.targetLinks) {\n      link.y1 = y1 + link.width / 2;\n      y1 += link.width;\n    }\n  }\n}\n\nexport default function Sankey() {\n  let x0 = 0, y0 = 0, x1 = 1, y1 = 1; // extent\n  let dx = 24; // nodeWidth\n  let dy = 8, py; // nodePadding\n  let id = defaultId;\n  let align = justify;\n  let sort;\n  let linkSort;\n  let nodes = defaultNodes;\n  let links = defaultLinks;\n  let iterations = 6;\n\n  function sankey() {\n    const graph = {nodes: nodes.apply(null, arguments), links: links.apply(null, arguments)};\n    computeNodeLinks(graph);\n    computeNodeValues(graph);\n    computeNodeDepths(graph);\n    computeNodeHeights(graph);\n    computeNodeBreadths(graph);\n    computeLinkBreadths(graph);\n    return graph;\n  }\n\n  sankey.update = function(graph) {\n    computeLinkBreadths(graph);\n    return graph;\n  };\n\n  sankey.nodeId = function(_) {\n    return arguments.length ? (id = typeof _ === \"function\" ? _ : constant(_), sankey) : id;\n  };\n\n  sankey.nodeAlign = function(_) {\n    return arguments.length ? (align = typeof _ === \"function\" ? _ : constant(_), sankey) : align;\n  };\n\n  sankey.nodeSort = function(_) {\n    return arguments.length ? (sort = _, sankey) : sort;\n  };\n\n  sankey.nodeWidth = function(_) {\n    return arguments.length ? (dx = +_, sankey) : dx;\n  };\n\n  sankey.nodePadding = function(_) {\n    return arguments.length ? (dy = py = +_, sankey) : dy;\n  };\n\n  sankey.nodes = function(_) {\n    return arguments.length ? (nodes = typeof _ === \"function\" ? _ : constant(_), sankey) : nodes;\n  };\n\n  sankey.links = function(_) {\n    return arguments.length ? (links = typeof _ === \"function\" ? _ : constant(_), sankey) : links;\n  };\n\n  sankey.linkSort = function(_) {\n    return arguments.length ? (linkSort = _, sankey) : linkSort;\n  };\n\n  sankey.size = function(_) {\n    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], sankey) : [x1 - x0, y1 - y0];\n  };\n\n  sankey.extent = function(_) {\n    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], sankey) : [[x0, y0], [x1, y1]];\n  };\n\n  sankey.iterations = function(_) {\n    return arguments.length ? (iterations = +_, sankey) : iterations;\n  };\n\n  function computeNodeLinks({nodes, links}) {\n    for (const [i, node] of nodes.entries()) {\n      node.index = i;\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    }\n    const nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d]));\n    for (const [i, link] of links.entries()) {\n      link.index = i;\n      let {source, target} = link;\n      if (typeof source !== \"object\") source = link.source = find(nodeById, source);\n      if (typeof target !== \"object\") target = link.target = find(nodeById, target);\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    }\n    if (linkSort != null) {\n      for (const {sourceLinks, targetLinks} of nodes) {\n        sourceLinks.sort(linkSort);\n        targetLinks.sort(linkSort);\n      }\n    }\n  }\n\n  function computeNodeValues({nodes}) {\n    for (const node of nodes) {\n      node.value = node.fixedValue === undefined\n          ? Math.max(sum(node.sourceLinks, value), sum(node.targetLinks, value))\n          : node.fixedValue;\n    }\n  }\n\n  function computeNodeDepths({nodes}) {\n    const n = nodes.length;\n    let current = new Set(nodes);\n    let next = new Set;\n    let x = 0;\n    while (current.size) {\n      for (const node of current) {\n        node.depth = x;\n        for (const {target} of node.sourceLinks) {\n          next.add(target);\n        }\n      }\n      if (++x > n) throw new Error(\"circular link\");\n      current = next;\n      next = new Set;\n    }\n  }\n\n  function computeNodeHeights({nodes}) {\n    const n = nodes.length;\n    let current = new Set(nodes);\n    let next = new Set;\n    let x = 0;\n    while (current.size) {\n      for (const node of current) {\n        node.height = x;\n        for (const {source} of node.targetLinks) {\n          next.add(source);\n        }\n      }\n      if (++x > n) throw new Error(\"circular link\");\n      current = next;\n      next = new Set;\n    }\n  }\n\n  function computeNodeLayers({nodes}) {\n    const x = max(nodes, d => d.depth) + 1;\n    const kx = (x1 - x0 - dx) / (x - 1);\n    const columns = new Array(x);\n    for (const node of nodes) {\n      const i = Math.max(0, Math.min(x - 1, Math.floor(align.call(null, node, x))));\n      node.layer = i;\n      node.x0 = x0 + i * kx;\n      node.x1 = node.x0 + dx;\n      if (columns[i]) columns[i].push(node);\n      else columns[i] = [node];\n    }\n    if (sort) for (const column of columns) {\n      column.sort(sort);\n    }\n    return columns;\n  }\n\n  function initializeNodeBreadths(columns) {\n    const ky = min(columns, c => (y1 - y0 - (c.length - 1) * py) / sum(c, value));\n    for (const nodes of columns) {\n      let y = y0;\n      for (const node of nodes) {\n        node.y0 = y;\n        node.y1 = y + node.value * ky;\n        y = node.y1 + py;\n        for (const link of node.sourceLinks) {\n          link.width = link.value * ky;\n        }\n      }\n      y = (y1 - y + py) / (nodes.length + 1);\n      for (let i = 0; i < nodes.length; ++i) {\n        const node = nodes[i];\n        node.y0 += y * (i + 1);\n        node.y1 += y * (i + 1);\n      }\n      reorderLinks(nodes);\n    }\n  }\n\n  function computeNodeBreadths(graph) {\n    const columns = computeNodeLayers(graph);\n    py = Math.min(dy, (y1 - y0) / (max(columns, c => c.length) - 1));\n    initializeNodeBreadths(columns);\n    for (let i = 0; i < iterations; ++i) {\n      const alpha = Math.pow(0.99, i);\n      const beta = Math.max(1 - alpha, (i + 1) / iterations);\n      relaxRightToLeft(columns, alpha, beta);\n      relaxLeftToRight(columns, alpha, beta);\n    }\n  }\n\n  // Reposition each node based on its incoming (target) links.\n  function relaxLeftToRight(columns, alpha, beta) {\n    for (let i = 1, n = columns.length; i < n; ++i) {\n      const column = columns[i];\n      for (const target of column) {\n        let y = 0;\n        let w = 0;\n        for (const {source, value} of target.targetLinks) {\n          let v = value * (target.layer - source.layer);\n          y += targetTop(source, target) * v;\n          w += v;\n        }\n        if (!(w > 0)) continue;\n        let dy = (y / w - target.y0) * alpha;\n        target.y0 += dy;\n        target.y1 += dy;\n        reorderNodeLinks(target);\n      }\n      if (sort === undefined) column.sort(ascendingBreadth);\n      resolveCollisions(column, beta);\n    }\n  }\n\n  // Reposition each node based on its outgoing (source) links.\n  function relaxRightToLeft(columns, alpha, beta) {\n    for (let n = columns.length, i = n - 2; i >= 0; --i) {\n      const column = columns[i];\n      for (const source of column) {\n        let y = 0;\n        let w = 0;\n        for (const {target, value} of source.sourceLinks) {\n          let v = value * (target.layer - source.layer);\n          y += sourceTop(source, target) * v;\n          w += v;\n        }\n        if (!(w > 0)) continue;\n        let dy = (y / w - source.y0) * alpha;\n        source.y0 += dy;\n        source.y1 += dy;\n        reorderNodeLinks(source);\n      }\n      if (sort === undefined) column.sort(ascendingBreadth);\n      resolveCollisions(column, beta);\n    }\n  }\n\n  function resolveCollisions(nodes, alpha) {\n    const i = nodes.length >> 1;\n    const subject = nodes[i];\n    resolveCollisionsBottomToTop(nodes, subject.y0 - py, i - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, subject.y1 + py, i + 1, alpha);\n    resolveCollisionsBottomToTop(nodes, y1, nodes.length - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, y0, 0, alpha);\n  }\n\n  // Push any overlapping nodes down.\n  function resolveCollisionsTopToBottom(nodes, y, i, alpha) {\n    for (; i < nodes.length; ++i) {\n      const node = nodes[i];\n      const dy = (y - node.y0) * alpha;\n      if (dy > 1e-6) node.y0 += dy, node.y1 += dy;\n      y = node.y1 + py;\n    }\n  }\n\n  // Push any overlapping nodes up.\n  function resolveCollisionsBottomToTop(nodes, y, i, alpha) {\n    for (; i >= 0; --i) {\n      const node = nodes[i];\n      const dy = (node.y1 - y) * alpha;\n      if (dy > 1e-6) node.y0 -= dy, node.y1 -= dy;\n      y = node.y0 - py;\n    }\n  }\n\n  function reorderNodeLinks({sourceLinks, targetLinks}) {\n    if (linkSort === undefined) {\n      for (const {source: {sourceLinks}} of targetLinks) {\n        sourceLinks.sort(ascendingTargetBreadth);\n      }\n      for (const {target: {targetLinks}} of sourceLinks) {\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n\n  function reorderLinks(nodes) {\n    if (linkSort === undefined) {\n      for (const {sourceLinks, targetLinks} of nodes) {\n        sourceLinks.sort(ascendingTargetBreadth);\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n\n  // Returns the target.y0 that would produce an ideal link from source to target.\n  function targetTop(source, target) {\n    let y = source.y0 - (source.sourceLinks.length - 1) * py / 2;\n    for (const {target: node, width} of source.sourceLinks) {\n      if (node === target) break;\n      y += width + py;\n    }\n    for (const {source: node, width} of target.targetLinks) {\n      if (node === source) break;\n      y -= width;\n    }\n    return y;\n  }\n\n  // Returns the source.y0 that would produce an ideal link from source to target.\n  function sourceTop(source, target) {\n    let y = target.y0 - (target.targetLinks.length - 1) * py / 2;\n    for (const {source: node, width} of target.targetLinks) {\n      if (node === source) break;\n      y += width + py;\n    }\n    for (const {target: node, width} of source.sourceLinks) {\n      if (node === target) break;\n      y -= width;\n    }\n    return y;\n  }\n\n  return sankey;\n}\n"],"names":["ascendingSourceBreadth","a","b","ascendingBreadth","source","index","ascendingTargetBreadth","target","y0","value","d","defaultId","defaultNodes","graph","nodes","defaultLinks","links","find","nodeById","id","node","get","Error","computeLinkBreadths","y1","link","sourceLinks","width","targetLinks","Sankey","py","sort","linkSort","x0","x1","dx","dy","align","justify","iterations","sankey","apply","arguments","i","entries","Map","map","push","computeNodeLinks","undefined","fixedValue","Math","max","sum","computeNodeValues","n","length","current","Set","next","x","size","depth","add","computeNodeDepths","height","computeNodeHeights","columns","kx","Array","min","floor","call","layer","column","computeNodeLayers","c","ky","y","reorderLinks","initializeNodeBreadths","alpha","pow","beta","relaxRightToLeft","relaxLeftToRight","computeNodeBreadths","w","v","targetTop","reorderNodeLinks","resolveCollisions","sourceTop","subject","resolveCollisionsBottomToTop","resolveCollisionsTopToBottom","update","nodeId","_","constant","nodeAlign","nodeSort","nodeWidth","nodePadding","extent"],"mappings":"2NAIA,SAASA,EAAuBC,EAAGC,GACjC,OAAOC,EAAiBF,EAAEG,OAAQF,EAAEE,SAAWH,EAAEI,MAAQH,EAAEG,KAC7D,CAEA,SAASC,EAAuBL,EAAGC,GACjC,OAAOC,EAAiBF,EAAEM,OAAQL,EAAEK,SAAWN,EAAEI,MAAQH,EAAEG,KAC7D,CAEA,SAASF,EAAiBF,EAAGC,GAC3B,OAAOD,EAAEO,GAAKN,EAAEM,EAClB,CAEA,SAASC,EAAMC,GACb,OAAOA,EAAED,KACX,CAEA,SAASE,EAAUD,GACjB,OAAOA,EAAEL,KACX,CAEA,SAASO,EAAaC,GACpB,OAAOA,EAAMC,KACf,CAEA,SAASC,EAAaF,GACpB,OAAOA,EAAMG,KACf,CAEA,SAASC,EAAKC,EAAUC,GACtB,MAAMC,EAAOF,EAASG,IAAIF,GAC1B,IAAKC,EAAM,MAAM,IAAIE,MAAM,YAAcH,GACzC,OAAOC,CACT,CAEA,SAASG,GAAoBT,MAACA,IAC5B,IAAK,MAAMM,KAAQN,EAAO,CACxB,IAAIN,EAAKY,EAAKZ,GACVgB,EAAKhB,EACT,IAAK,MAAMiB,KAAQL,EAAKM,YACtBD,EAAKjB,GAAKA,EAAKiB,EAAKE,MAAQ,EAC5BnB,GAAMiB,EAAKE,MAEb,IAAK,MAAMF,KAAQL,EAAKQ,YACtBH,EAAKD,GAAKA,EAAKC,EAAKE,MAAQ,EAC5BH,GAAMC,EAAKE,KAEd,CACH,CAEe,SAASE,IACtB,IAEYC,EAGRC,EACAC,EANAC,EAAK,EAAGzB,EAAK,EAAG0B,EAAK,EAAGV,EAAK,EAC7BW,EAAK,GACLC,EAAK,EACLjB,EAAKR,EACL0B,EAAQC,EAGRxB,EAAQF,EACRI,EAAQD,EACRwB,EAAa,EAEjB,SAASC,IACP,MAAM3B,EAAQ,CAACC,MAAOA,EAAM2B,MAAM,KAAMC,WAAY1B,MAAOA,EAAMyB,MAAM,KAAMC,YAO7E,OAoDF,UAA0B5B,MAACA,EAAKE,MAAEA,IAChC,IAAK,MAAO2B,EAAGvB,KAASN,EAAM8B,UAC5BxB,EAAKf,MAAQsC,EACbvB,EAAKM,YAAc,GACnBN,EAAKQ,YAAc,GAErB,MAAMV,EAAW,IAAI2B,IAAI/B,EAAMgC,KAAI,CAACpC,EAAGiC,IAAM,CAACxB,EAAGT,EAAGiC,EAAG7B,GAAQJ,MAC/D,IAAK,MAAOiC,EAAGlB,KAAST,EAAM4B,UAAW,CACvCnB,EAAKpB,MAAQsC,EACb,IAAIvC,OAACA,EAAMG,OAAEA,GAAUkB,EACD,iBAAXrB,IAAqBA,EAASqB,EAAKrB,OAASa,EAAKC,EAAUd,IAChD,iBAAXG,IAAqBA,EAASkB,EAAKlB,OAASU,EAAKC,EAAUX,IACtEH,EAAOsB,YAAYqB,KAAKtB,GACxBlB,EAAOqB,YAAYmB,KAAKtB,EACzB,CACD,GAAgB,MAAZO,EACF,IAAK,MAAMN,YAACA,EAAWE,YAAEA,KAAgBd,EACvCY,EAAYK,KAAKC,GACjBJ,EAAYG,KAAKC,EAGtB,CA/ECgB,CAAiBnC,GAiFnB,UAA2BC,MAACA,IAC1B,IAAK,MAAMM,KAAQN,EACjBM,EAAKX,WAA4BwC,IAApB7B,EAAK8B,WACZC,KAAKC,IAAIC,EAAIjC,EAAKM,YAAajB,GAAQ4C,EAAIjC,EAAKQ,YAAanB,IAC7DW,EAAK8B,UAEd,CAtFCI,CAAkBzC,GAwFpB,UAA2BC,MAACA,IAC1B,MAAMyC,EAAIzC,EAAM0C,OAChB,IAAIC,EAAU,IAAIC,IAAI5C,GAClB6C,EAAO,IAAID,IACXE,EAAI,EACR,KAAOH,EAAQI,MAAM,CACnB,IAAK,MAAMzC,KAAQqC,EAAS,CAC1BrC,EAAK0C,MAAQF,EACb,IAAK,MAAMrD,OAACA,KAAWa,EAAKM,YAC1BiC,EAAKI,IAAIxD,EAEZ,CACD,KAAMqD,EAAIL,EAAG,MAAM,IAAIjC,MAAM,iBAC7BmC,EAAUE,EACVA,EAAO,IAAID,GACZ,CACF,CAvGCM,CAAkBnD,GAyGpB,UAA4BC,MAACA,IAC3B,MAAMyC,EAAIzC,EAAM0C,OAChB,IAAIC,EAAU,IAAIC,IAAI5C,GAClB6C,EAAO,IAAID,IACXE,EAAI,EACR,KAAOH,EAAQI,MAAM,CACnB,IAAK,MAAMzC,KAAQqC,EAAS,CAC1BrC,EAAK6C,OAASL,EACd,IAAK,MAAMxD,OAACA,KAAWgB,EAAKQ,YAC1B+B,EAAKI,IAAI3D,EAEZ,CACD,KAAMwD,EAAIL,EAAG,MAAM,IAAIjC,MAAM,iBAC7BmC,EAAUE,EACVA,EAAO,IAAID,GACZ,CACF,CAxHCQ,CAAmBrD,GAkKrB,SAA6BA,GAC3B,MAAMsD,EAzCR,UAA2BrD,MAACA,IAC1B,MAAM8C,EAAIR,EAAItC,GAAOJ,GAAKA,EAAEoD,QAAS,EAC/BM,GAAMlC,EAAKD,EAAKE,IAAOyB,EAAI,GAC3BO,EAAU,IAAIE,MAAMT,GAC1B,IAAK,MAAMxC,KAAQN,EAAO,CACxB,MAAM6B,EAAIQ,KAAKC,IAAI,EAAGD,KAAKmB,IAAIV,EAAI,EAAGT,KAAKoB,MAAMlC,EAAMmC,KAAK,KAAMpD,EAAMwC,MACxExC,EAAKqD,MAAQ9B,EACbvB,EAAKa,GAAKA,EAAKU,EAAIyB,EACnBhD,EAAKc,GAAKd,EAAKa,GAAKE,EAChBgC,EAAQxB,GAAIwB,EAAQxB,GAAGI,KAAK3B,GAC3B+C,EAAQxB,GAAK,CAACvB,EACpB,CACD,GAAIW,EAAM,IAAK,MAAM2C,KAAUP,EAC7BO,EAAO3C,KAAKA,GAEd,OAAOoC,CACR,CAyBiBQ,CAAkB9D,GAClCiB,EAAKqB,KAAKmB,IAAIlC,GAAKZ,EAAKhB,IAAO4C,EAAIe,GAASS,GAAKA,EAAEpB,SAAU,IAxB/D,SAAgCW,GAC9B,MAAMU,EAAKP,EAAIH,GAASS,IAAMpD,EAAKhB,GAAMoE,EAAEpB,OAAS,GAAK1B,GAAMuB,EAAIuB,EAAGnE,KACtE,IAAK,MAAMK,KAASqD,EAAS,CAC3B,IAAIW,EAAItE,EACR,IAAK,MAAMY,KAAQN,EAAO,CACxBM,EAAKZ,GAAKsE,EACV1D,EAAKI,GAAKsD,EAAI1D,EAAKX,MAAQoE,EAC3BC,EAAI1D,EAAKI,GAAKM,EACd,IAAK,MAAML,KAAQL,EAAKM,YACtBD,EAAKE,MAAQF,EAAKhB,MAAQoE,CAE7B,CACDC,GAAKtD,EAAKsD,EAAIhD,IAAOhB,EAAM0C,OAAS,GACpC,IAAK,IAAIb,EAAI,EAAGA,EAAI7B,EAAM0C,SAAUb,EAAG,CACrC,MAAMvB,EAAON,EAAM6B,GACnBvB,EAAKZ,IAAMsE,GAAKnC,EAAI,GACpBvB,EAAKI,IAAMsD,GAAKnC,EAAI,EACrB,CACDoC,EAAajE,EACd,CACF,CAKCkE,CAAuBb,GACvB,IAAK,IAAIxB,EAAI,EAAGA,EAAIJ,IAAcI,EAAG,CACnC,MAAMsC,EAAQ9B,KAAK+B,IAAI,IAAMvC,GACvBwC,EAAOhC,KAAKC,IAAI,EAAI6B,GAAQtC,EAAI,GAAKJ,GAC3C6C,EAAiBjB,EAASc,EAAOE,GACjCE,EAAiBlB,EAASc,EAAOE,EAClC,CACF,CA3KCG,CAAoBzE,GACpBU,EAAoBV,GACbA,CACR,CA2KD,SAASwE,EAAiBlB,EAASc,EAAOE,GACxC,IAAK,IAAIxC,EAAI,EAAGY,EAAIY,EAAQX,OAAQb,EAAIY,IAAKZ,EAAG,CAC9C,MAAM+B,EAASP,EAAQxB,GACvB,IAAK,MAAMpC,KAAUmE,EAAQ,CAC3B,IAAII,EAAI,EACJS,EAAI,EACR,IAAK,MAAMnF,OAACA,EAAMK,MAAEA,KAAUF,EAAOqB,YAAa,CAChD,IAAI4D,EAAI/E,GAASF,EAAOkE,MAAQrE,EAAOqE,OACvCK,GAAKW,EAAUrF,EAAQG,GAAUiF,EACjCD,GAAKC,CACN,CACD,KAAMD,EAAI,GAAI,SACd,IAAInD,GAAM0C,EAAIS,EAAIhF,EAAOC,IAAMyE,EAC/B1E,EAAOC,IAAM4B,EACb7B,EAAOiB,IAAMY,EACbsD,EAAiBnF,EAClB,MACY0C,IAATlB,GAAoB2C,EAAO3C,KAAK5B,GACpCwF,EAAkBjB,EAAQS,EAC3B,CACF,CAGD,SAASC,EAAiBjB,EAASc,EAAOE,GACxC,IAAK,IAAwBxC,EAAhBwB,EAAQX,OAAgB,EAAGb,GAAK,IAAKA,EAAG,CACnD,MAAM+B,EAASP,EAAQxB,GACvB,IAAK,MAAMvC,KAAUsE,EAAQ,CAC3B,IAAII,EAAI,EACJS,EAAI,EACR,IAAK,MAAMhF,OAACA,EAAME,MAAEA,KAAUL,EAAOsB,YAAa,CAChD,IAAI8D,EAAI/E,GAASF,EAAOkE,MAAQrE,EAAOqE,OACvCK,GAAKc,EAAUxF,EAAQG,GAAUiF,EACjCD,GAAKC,CACN,CACD,KAAMD,EAAI,GAAI,SACd,IAAInD,GAAM0C,EAAIS,EAAInF,EAAOI,IAAMyE,EAC/B7E,EAAOI,IAAM4B,EACbhC,EAAOoB,IAAMY,EACbsD,EAAiBtF,EAClB,MACY6C,IAATlB,GAAoB2C,EAAO3C,KAAK5B,GACpCwF,EAAkBjB,EAAQS,EAC3B,CACF,CAED,SAASQ,EAAkB7E,EAAOmE,GAChC,MAAMtC,EAAI7B,EAAM0C,QAAU,EACpBqC,EAAU/E,EAAM6B,GACtBmD,EAA6BhF,EAAO+E,EAAQrF,GAAKsB,EAAIa,EAAI,EAAGsC,GAC5Dc,EAA6BjF,EAAO+E,EAAQrE,GAAKM,EAAIa,EAAI,EAAGsC,GAC5Da,EAA6BhF,EAAOU,EAAIV,EAAM0C,OAAS,EAAGyB,GAC1Dc,EAA6BjF,EAAON,EAAI,EAAGyE,EAC5C,CAGD,SAASc,EAA6BjF,EAAOgE,EAAGnC,EAAGsC,GACjD,KAAOtC,EAAI7B,EAAM0C,SAAUb,EAAG,CAC5B,MAAMvB,EAAON,EAAM6B,GACbP,GAAM0C,EAAI1D,EAAKZ,IAAMyE,EACvB7C,EAAK,OAAMhB,EAAKZ,IAAM4B,EAAIhB,EAAKI,IAAMY,GACzC0C,EAAI1D,EAAKI,GAAKM,CACf,CACF,CAGD,SAASgE,EAA6BhF,EAAOgE,EAAGnC,EAAGsC,GACjD,KAAOtC,GAAK,IAAKA,EAAG,CAClB,MAAMvB,EAAON,EAAM6B,GACbP,GAAMhB,EAAKI,GAAKsD,GAAKG,EACvB7C,EAAK,OAAMhB,EAAKZ,IAAM4B,EAAIhB,EAAKI,IAAMY,GACzC0C,EAAI1D,EAAKZ,GAAKsB,CACf,CACF,CAED,SAAS4D,GAAiBhE,YAACA,EAAWE,YAAEA,IACtC,QAAiBqB,IAAbjB,EAAwB,CAC1B,IAAK,MAAO5B,QAAQsB,YAACA,MAAiBE,EACpCF,EAAYK,KAAKzB,GAEnB,IAAK,MAAOC,QAAQqB,YAACA,MAAiBF,EACpCE,EAAYG,KAAK/B,EAEpB,CACF,CAED,SAAS+E,EAAajE,GACpB,QAAiBmC,IAAbjB,EACF,IAAK,MAAMN,YAACA,EAAWE,YAAEA,KAAgBd,EACvCY,EAAYK,KAAKzB,GACjBsB,EAAYG,KAAK/B,EAGtB,CAGD,SAASyF,EAAUrF,EAAQG,GACzB,IAAIuE,EAAI1E,EAAOI,IAAMJ,EAAOsB,YAAY8B,OAAS,GAAK1B,EAAK,EAC3D,IAAK,MAAOvB,OAAQa,EAAIO,MAAEA,KAAUvB,EAAOsB,YAAa,CACtD,GAAIN,IAASb,EAAQ,MACrBuE,GAAKnD,EAAQG,CACd,CACD,IAAK,MAAO1B,OAAQgB,EAAIO,MAAEA,KAAUpB,EAAOqB,YAAa,CACtD,GAAIR,IAAShB,EAAQ,MACrB0E,GAAKnD,CACN,CACD,OAAOmD,CACR,CAGD,SAASc,EAAUxF,EAAQG,GACzB,IAAIuE,EAAIvE,EAAOC,IAAMD,EAAOqB,YAAY4B,OAAS,GAAK1B,EAAK,EAC3D,IAAK,MAAO1B,OAAQgB,EAAIO,MAAEA,KAAUpB,EAAOqB,YAAa,CACtD,GAAIR,IAAShB,EAAQ,MACrB0E,GAAKnD,EAAQG,CACd,CACD,IAAK,MAAOvB,OAAQa,EAAIO,MAAEA,KAAUvB,EAAOsB,YAAa,CACtD,GAAIN,IAASb,EAAQ,MACrBuE,GAAKnD,CACN,CACD,OAAOmD,CACR,CAED,OAnSAtC,EAAOwD,OAAS,SAASnF,GAEvB,OADAU,EAAoBV,GACbA,CACX,EAEE2B,EAAOyD,OAAS,SAASC,GACvB,OAAOxD,UAAUc,QAAUrC,EAAkB,mBAAN+E,EAAmBA,EAAIC,EAASD,GAAI1D,GAAUrB,CACzF,EAEEqB,EAAO4D,UAAY,SAASF,GAC1B,OAAOxD,UAAUc,QAAUnB,EAAqB,mBAAN6D,EAAmBA,EAAIC,EAASD,GAAI1D,GAAUH,CAC5F,EAEEG,EAAO6D,SAAW,SAASH,GACzB,OAAOxD,UAAUc,QAAUzB,EAAOmE,EAAG1D,GAAUT,CACnD,EAEES,EAAO8D,UAAY,SAASJ,GAC1B,OAAOxD,UAAUc,QAAUrB,GAAM+D,EAAG1D,GAAUL,CAClD,EAEEK,EAAO+D,YAAc,SAASL,GAC5B,OAAOxD,UAAUc,QAAUpB,EAAKN,GAAMoE,EAAG1D,GAAUJ,CACvD,EAEEI,EAAO1B,MAAQ,SAASoF,GACtB,OAAOxD,UAAUc,QAAU1C,EAAqB,mBAANoF,EAAmBA,EAAIC,EAASD,GAAI1D,GAAU1B,CAC5F,EAEE0B,EAAOxB,MAAQ,SAASkF,GACtB,OAAOxD,UAAUc,QAAUxC,EAAqB,mBAANkF,EAAmBA,EAAIC,EAASD,GAAI1D,GAAUxB,CAC5F,EAEEwB,EAAOR,SAAW,SAASkE,GACzB,OAAOxD,UAAUc,QAAUxB,EAAWkE,EAAG1D,GAAUR,CACvD,EAEEQ,EAAOqB,KAAO,SAASqC,GACrB,OAAOxD,UAAUc,QAAUvB,EAAKzB,EAAK,EAAG0B,GAAMgE,EAAE,GAAI1E,GAAM0E,EAAE,GAAI1D,GAAU,CAACN,EAAKD,EAAIT,EAAKhB,EAC7F,EAEEgC,EAAOgE,OAAS,SAASN,GACvB,OAAOxD,UAAUc,QAAUvB,GAAMiE,EAAE,GAAG,GAAIhE,GAAMgE,EAAE,GAAG,GAAI1F,GAAM0F,EAAE,GAAG,GAAI1E,GAAM0E,EAAE,GAAG,GAAI1D,GAAU,CAAC,CAACP,EAAIzB,GAAK,CAAC0B,EAAIV,GACrH,EAEEgB,EAAOD,WAAa,SAAS2D,GAC3B,OAAOxD,UAAUc,QAAUjB,GAAc2D,EAAG1D,GAAUD,CAC1D,EAoPSC,CACT"}