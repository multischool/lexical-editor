{"version":3,"file":"index.js","sources":["../../../../../node_modules/@excalidraw/markdown-to-text/dist/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.removeMarkdown = void 0;\n/**\n * @function removeMarkdown\n *\n * @description\n * Parse the markdown and returns a string\n *\n * @param markdown - The markdown string to parse\n * @param options - The options for the function\n *\n * @returns The parsed plain text\n */\nvar removeMarkdown = function (markdown, options) {\n    if (options === void 0) { options = {\n        listUnicodeChar: \"\",\n    }; }\n    options = options || {};\n    options.listUnicodeChar = options.hasOwnProperty(\"listUnicodeChar\")\n        ? options.listUnicodeChar\n        : false;\n    options.stripListLeaders = options.hasOwnProperty(\"stripListLeaders\")\n        ? options.stripListLeaders\n        : true;\n    options.gfm = options.hasOwnProperty(\"gfm\") ? options.gfm : true;\n    options.useImgAltText = options.hasOwnProperty(\"useImgAltText\")\n        ? options.useImgAltText\n        : true;\n    options.preserveLinks = options.hasOwnProperty(\"preserveLinks\")\n        ? options.preserveLinks\n        : false;\n    var output = markdown || \"\";\n    // Remove horizontal rules (stripListHeaders conflict with this rule, which is why it has been moved to the top)\n    output = output.replace(/^(-\\s*?|\\*\\s*?|_\\s*?){3,}\\s*$/gm, \"\");\n    try {\n        if (options.stripListLeaders) {\n            if (options.listUnicodeChar)\n                output = output.replace(/^([\\s\\t]*)([\\*\\-\\+]|\\d+\\.)\\s+/gm, options.listUnicodeChar + \" $1\");\n            else\n                output = output.replace(/^([\\s\\t]*)([\\*\\-\\+]|\\d+\\.)\\s+/gm, \"$1\");\n        }\n        if (options.gfm) {\n            output = output\n                // Header\n                .replace(/\\n={2,}/g, \"\\n\")\n                // Fenced codeblocks\n                .replace(/~{3}.*\\n/g, \"\")\n                // Strikethrough\n                .replace(/~~/g, \"\")\n                // Fenced codeblocks\n                .replace(/`{3}.*\\n/g, \"\");\n        }\n        if (options.preserveLinks) {\n            // Remove inline links while preserving the links\n            output = output.replace(/\\[(.*?)\\][\\[\\(](.*?)[\\]\\)]/g, \"$1 ($2)\");\n        }\n        output = output\n            // Remove HTML tags\n            .replace(/<[^>]*>/g, \"\")\n            // Remove setext-style headers\n            .replace(/^[=\\-]{2,}\\s*$/g, \"\")\n            // Remove footnotes?\n            .replace(/\\[\\^.+?\\](\\: .*?$)?/g, \"\")\n            .replace(/\\s{0,2}\\[.*?\\]: .*?$/g, \"\")\n            // Remove images\n            .replace(/\\!\\[(.*?)\\][\\[\\(].*?[\\]\\)]/g, options.useImgAltText ? \"$1\" : \"\")\n            // Remove inline links\n            .replace(/\\[(.*?)\\][\\[\\(].*?[\\]\\)]/g, \"$1\")\n            // Remove blockquotes\n            .replace(/^\\s{0,3}>\\s?/g, \"\")\n            .replace(/(^|\\n)\\s{0,3}>\\s?/g, \"\\n\\n\")\n            // Remove reference-style links?\n            .replace(/^\\s{1,2}\\[(.*?)\\]: (\\S+)( \".*?\")?\\s*$/g, \"\")\n            // Remove atx-style headers\n            .replace(/^(\\n)?\\s{0,}#{1,6}\\s+| {0,}(\\n)?\\s{0,}#{0,} {0,}(\\n)?\\s{0,}$/gm, \"$1$2$3\")\n            // Remove emphasis (repeat the line to remove double emphasis)\n            .replace(/([\\*_]{1,3})(\\S.*?\\S{0,1})\\1/g, \"$2\")\n            .replace(/([\\*_]{1,3})(\\S.*?\\S{0,1})\\1/g, \"$2\")\n            // Remove code blocks\n            .replace(/(`{3,})(.*?)\\1/gm, \"$2\")\n            // Remove inline code\n            .replace(/`(.+?)`/g, \"$1\")\n            // Replace two or more newlines with exactly two? Not entirely sure this belongs here...\n            .replace(/\\n{2,}/g, \"\\n\\n\");\n    }\n    catch (e) {\n        console.error(e);\n        return markdown;\n    }\n    return output;\n};\nexports.removeMarkdown = removeMarkdown;\n"],"names":["Object","defineProperty","dist","value","removeMarkdown_1","removeMarkdown","markdown","options","listUnicodeChar","hasOwnProperty","stripListLeaders","gfm","useImgAltText","preserveLinks","output","replace","e","console","error"],"mappings":"4HACAA,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IAChC,IAAAC,EAAAF,EAAAG,oBAAG,EA0FzBD,EAAAF,EAAAG,eA9EqB,SAAUC,EAAUC,QACrB,IAAZA,IAAsBA,EAAU,CAChCC,gBAAiB,MAErBD,EAAUA,GAAW,IACbC,kBAAkBD,EAAQE,eAAe,oBAC3CF,EAAQC,gBAEdD,EAAQG,kBAAmBH,EAAQE,eAAe,qBAC5CF,EAAQG,iBAEdH,EAAQI,KAAMJ,EAAQE,eAAe,QAASF,EAAQI,IACtDJ,EAAQK,eAAgBL,EAAQE,eAAe,kBACzCF,EAAQK,cAEdL,EAAQM,gBAAgBN,EAAQE,eAAe,kBACzCF,EAAQM,cAEd,IAAIC,EAASR,GAAY,GAEzBQ,EAASA,EAAOC,QAAQ,kCAAmC,IAC3D,IACQR,EAAQG,mBAEJI,EADAP,EAAQC,gBACCM,EAAOC,QAAQ,kCAAmCR,EAAQC,gBAAkB,OAE5EM,EAAOC,QAAQ,kCAAmC,OAE/DR,EAAQI,MACRG,EAASA,EAEJC,QAAQ,WAAY,MAEpBA,QAAQ,YAAa,IAErBA,QAAQ,MAAO,IAEfA,QAAQ,YAAa,KAE1BR,EAAQM,gBAERC,EAASA,EAAOC,QAAQ,8BAA+B,YAE3DD,EAASA,EAEJC,QAAQ,WAAY,IAEpBA,QAAQ,kBAAmB,IAE3BA,QAAQ,uBAAwB,IAChCA,QAAQ,wBAAyB,IAEjCA,QAAQ,8BAA+BR,EAAQK,cAAgB,KAAO,IAEtEG,QAAQ,4BAA6B,MAErCA,QAAQ,gBAAiB,IACzBA,QAAQ,qBAAsB,QAE9BA,QAAQ,yCAA0C,IAElDA,QAAQ,iEAAkE,UAE1EA,QAAQ,gCAAiC,MACzCA,QAAQ,gCAAiC,MAEzCA,QAAQ,mBAAoB,MAE5BA,QAAQ,WAAY,MAEpBA,QAAQ,UAAW,OAC3B,CACD,MAAOC,GAEH,OADAC,QAAQC,MAAMF,GACPV,CACV,CACD,OAAOQ,CACX"}