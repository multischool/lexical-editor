{"version":3,"file":"index.js","sources":["../../../../../../node_modules/@excalidraw/mermaid-to-excalidraw/node_modules/nanoid/index.js"],"sourcesContent":["import { randomFillSync } from 'crypto'\nimport { urlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet }\nconst POOL_SIZE_MULTIPLIER = 128\nlet pool, poolOffset\nlet fillPool = bytes => {\n  if (!pool || pool.length < bytes) {\n    pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER)\n    randomFillSync(pool)\n    poolOffset = 0\n  } else if (poolOffset + bytes > pool.length) {\n    randomFillSync(pool)\n    poolOffset = 0\n  }\n  poolOffset += bytes\n}\nexport let random = bytes => {\n  fillPool((bytes -= 0))\n  return pool.subarray(poolOffset - bytes, poolOffset)\n}\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (31 - Math.clz32((alphabet.length - 1) | 1))) - 1\n  let step = Math.ceil((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let i = step\n      while (i--) {\n        id += alphabet[bytes[i] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  fillPool((size -= 0))\n  let id = ''\n  for (let i = poolOffset - size; i < poolOffset; i++) {\n    id += urlAlphabet[pool[i] & 63]\n  }\n  return id\n}\n"],"names":["pool","poolOffset","nanoid","size","bytes","length","Buffer","allocUnsafe","randomFillSync","id","i","urlAlphabet"],"mappings":"+IAIA,IAAIA,EAAMC,EAiCCC,EAAS,CAACC,EAAO,MAhCbC,QAiCHD,GAAQ,GAhCbH,GAAQA,EAAKK,OAASD,GACzBJ,EAAOM,OAAOC,YAJW,IAICH,GAC1BI,EAAeR,GACfC,EAAa,GACJA,EAAaG,EAAQJ,EAAKK,SACnCG,EAAeR,GACfC,EAAa,GAEfA,GAAcG,EAyBd,IAAIK,EAAK,GACT,IAAK,IAAIC,EAAIT,EAAaE,EAAMO,EAAIT,EAAYS,IAC9CD,GAAME,EAAsB,GAAVX,EAAKU,IAEzB,OAAOD"}