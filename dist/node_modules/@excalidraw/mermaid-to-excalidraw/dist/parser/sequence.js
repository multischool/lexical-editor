import{SVG_TO_SHAPE_MAPPER as e}from"../constants.js";import{nanoid as t}from"../../node_modules/nanoid/index.js";import{createContainerSkeletonFromSVG as r,createLineSkeletonFromSVG as o,createArrowSkeletonFromSVG as n,createTextSkeletonFromSVG as s}from"../elementSkeleton.js";const l={0:"SOLID",1:"DOTTED",3:"SOLID_CROSS",4:"DOTTED_CROSS",5:"SOLID_OPEN",6:"DOTTED_OPEN",24:"SOLID_POINT",25:"DOTTED_POINT"},a=0,i=1,c=2,u=3,b=4,m=5,p=6,d=24,g=25,f=27,h=e=>{let t;switch(e){case a:case u:case m:case d:t="solid";break;case i:case b:case p:case g:t="dotted";break;default:t="solid"}return t},y=(n,l,a)=>{if(!n)throw"root node not found";const i=t(),c=Array.from(n.children),u=[];return c.forEach(((t,n)=>{const c=`${a?.id}-${n}`;let b;switch(t.tagName){case"line":const n=Number(t.getAttribute("x1")),a=Number(t.getAttribute("y1")),u=Number(t.getAttribute("x2")),m=Number(t.getAttribute("y2"));b=o(t,n,a,u,m,{groupId:i,id:c});break;case"text":b=s(t,l,{groupId:i,id:c});break;case"circle":b=r(t,"ellipse",{label:t.textContent?{text:t.textContent}:void 0,groupId:i,id:c});default:b=r(t,e[t.tagName],{label:t.textContent?{text:t.textContent}:void 0,groupId:i,id:c})}u.push(b)})),u},A=(e,t)=>{const r=[],o=Array.from(t.querySelectorAll('[class*="messageLine"]')),s=Object.keys(l),a=e.filter((e=>s.includes(e.type.toString())));return o.forEach(((e,t)=>{const o=a[t],s=l[o.type],i=n(e,{label:o?.message,strokeStyle:h(o.type),endArrowhead:"SOLID_OPEN"===s||"DOTTED_OPEN"===s?null:"arrow"});((e,t)=>{if(e.nextElementSibling?.classList.contains("sequenceNumber")){const r=e.nextElementSibling?.textContent;if(!r)throw new Error("sequence number not present");const o=30,n=o/2,s=10,l={type:"rectangle",x:t.startX-s,y:t.startY-n,label:{text:r,fontSize:14},bgColor:"#e9ecef",height:o,subtype:"sequence"};Object.assign(t,{sequenceNumber:l})}})(e,i),r.push(i)})),r},x=(e,t)=>{e.parse();const n=e.parser.yy,l=[],a=n.getBoxes(),i=(e=>{const t=Array.from(e.querySelectorAll(".rect")).filter((e=>"g"!==e.parentElement?.tagName)),o=[];return t.forEach((e=>{const t=r(e,"rectangle",{label:{text:""},subtype:"highlight"});o.push(t)})),o})(t),u=n.getActors(),{nodes:b,lines:m}=((e,t)=>{const n=Array.from(t.querySelectorAll(".actor-top")),s=Array.from(t.querySelectorAll(".actor-bottom")),l=[],a=[];return Object.values(e).forEach(((e,t)=>{const i=n.find((t=>t.getAttribute("name")===e.name)),c=s.find((t=>t.getAttribute("name")===e.name));if(!i||!c)throw"root not found";const u=e.description;if("participant"===e.type){const t=r(i,"rectangle",{id:`${e.name}-top`,label:{text:u},subtype:"actor"});if(!t)throw"Top Node element not found!";l.push([t]);const n=r(c,"rectangle",{id:`${e.name}-bottom`,label:{text:u},subtype:"actor"});l.push([n]);const s=i?.parentElement?.previousElementSibling;if("line"!==s?.tagName)throw"Line not found";const b=Number(s.getAttribute("x1"));if(!t.height)throw"Top node element height is null";const m=t.y+t.height,p=n.y,d=Number(s.getAttribute("x2")),g=o(s,b,m,d,p);a.push(g)}else if("actor"===e.type){const t=y(i,u,{id:`${e.name}-top`});l.push(t);const r=y(c,u,{id:`${e.name}-bottom`});l.push(r);const n=i.previousElementSibling;if("line"!==n?.tagName)throw"Line not found";const s=Number(n.getAttribute("x1")),b=Number(n.getAttribute("y1")),m=Number(n.getAttribute("x2")),p=r.find((e=>"ellipse"===e.type));if(p){const e=p.y,t=o(n,s,b,m,e);a.push(t)}}})),{nodes:l,lines:a}})(u,t),p=n.getMessages(),d=A(p,t),g=((e,t)=>{const o=Array.from(t.querySelectorAll(".note")).map((e=>e.parentElement)),n=e.filter((e=>e.type===c)),s=[];return o.forEach(((e,t)=>{if(!e)return;const o=e.firstChild,l=n[t].message,a=r(o,"rectangle",{label:{text:l},subtype:"note"});s.push(a)})),s})(p,t),h=(e=>{const t=Array.from(e.querySelectorAll("[class*=activation]")),o=[];return t.forEach((e=>{const t=r(e,"rectangle",{label:{text:""},subtype:"activation"});o.push(t)})),o})(t),x=((e,t)=>{const n=Array.from(t.querySelectorAll(".loopLine")),l=[],a=[],i=[];n.forEach((e=>{const t=Number(e.getAttribute("x1")),r=Number(e.getAttribute("y1")),n=Number(e.getAttribute("x2")),s=Number(e.getAttribute("y2")),a=o(e,t,r,n,s);a.strokeStyle="dotted",a.strokeColor="#adb5bd",a.strokeWidth=2,l.push(a)}));const c=Array.from(t.querySelectorAll(".loopText")),u=e.filter((e=>e.type===f)).map((e=>e.message));c.forEach((e=>{const t=e.textContent||"",r=s(e,t),o=t.match(/\[(.*?)\]/)?.[1]||"";u.includes(o)&&(r.x+=16),a.push(r)}));const b=Array.from(t?.querySelectorAll(".labelBox")),m=Array.from(t?.querySelectorAll(".labelText"));return b.forEach(((e,t)=>{const o=m[t]?.textContent||"",n=r(e,"rectangle",{label:{text:o}});n.strokeColor="#adb5bd",n.bgColor="#e9ecef",n.width=void 0,i.push(n)})),{lines:l,texts:a,nodes:i}})(p,t);return l.push(i),l.push(...b),l.push(g),l.push(h),{type:"sequence",lines:m,arrows:d,nodes:l,loops:x,groups:a}};export{x as parseMermaidSequenceDiagram};
//# sourceMappingURL=sequence.js.map
