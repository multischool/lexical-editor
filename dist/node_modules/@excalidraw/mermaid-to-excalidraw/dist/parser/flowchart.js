import{entityCodesToText as t,computeEdgePositions as e,getTransformAttr as r}from"../utils.js";const n=(t,e)=>{if(!t)throw new Error("Element not found");let n=t.parentElement?.parentElement;const o=t.childNodes[0];let s={x:0,y:0};if(o){const{transformX:t,transformY:e}=r(o),n=o.getBBox();s={x:Number(o.getAttribute("x"))||t+n.x||0,y:Number(o.getAttribute("y"))||e+n.y||0}}const{transformX:i,transformY:l}=r(t),a={x:i+s.x,y:l+s.y};for(;n&&n.id!==e.id;){if("root"===n.classList.value&&n.hasAttribute("transform")){const{transformX:t,transformY:e}=r(n);a.x+=t,a.y+=e}n=n.parentElement}return a},o=(r,o)=>{r.parse();const s=r.parser.yy,i=s.getVertices();Object.keys(i).forEach((e=>{i[e]=((e,r)=>{const o=r.querySelector(`[id*="flowchart-${e.id}-"]`);if(!o)return;let s;"a"===o.parentElement?.tagName.toLowerCase()&&(s=o.parentElement.getAttribute("xlink:href"));const i=n(s?o.parentElement:o,r),l=o.getBBox(),a={width:l.width,height:l.height},c=o.querySelector(".label-container")?.getAttribute("style"),d=o.querySelector(".label")?.getAttribute("style"),u={};c?.split(";").forEach((t=>{if(!t)return;const e=t.split(":")[0].trim(),r=t.split(":")[1].trim();u[e]=r}));const h={};return d?.split(";").forEach((t=>{if(!t)return;const e=t.split(":")[0].trim(),r=t.split(":")[1].trim();h[e]=r})),{id:e.id,labelType:e.labelType,text:t(e.text),type:e.type,link:s||void 0,...i,...a,containerStyle:u,labelStyle:h}})(i[e],o)}));const l=new Map,a=s.getEdges().filter((t=>o.querySelector(`[id*="L-${t.start}-${t.end}"]`))).map((r=>{const s=`${r.start}-${r.end}`,i=l.get(s)||0;return l.set(s,i+1),((r,o,s)=>{const i=s.querySelector(`[id*="L-${r.start}-${r.end}-${o}"]`);if(!i)throw new Error("Edge element not found");const l=n(i,s),a=e(i,l);return r.length=void 0,{...r,...a,text:t(r.text)}})(r,i,o)})),c=s.getSubGraphs().map((e=>((e,r)=>{const o=e.nodes.map((t=>t.startsWith("flowchart-")?t.split("-")[1]:t)),s=r.querySelector(`[id='${e.id}']`);if(!s)throw new Error("SubGraph element not found");const i=n(s,r),l=s.getBBox(),a={width:l.width,height:l.height};return e.classes=void 0,e.dir=void 0,{...e,nodeIds:o,...i,...a,text:t(e.title)}})(e,o)));return{type:"flowchart",subGraphs:c,vertices:i,edges:a}};export{o as parseMermaidFlowChartDiagram};
//# sourceMappingURL=flowchart.js.map
