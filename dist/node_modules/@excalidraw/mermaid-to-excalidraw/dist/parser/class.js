import{nanoid as t}from"../../node_modules/nanoid/index.js";import{getTransformAttr as e,computeEdgePositions as r}from"../utils.js";import{createContainerSkeletonFromSVG as s,createLineSkeletonFromSVG as n,createTextSkeleton as a,createArrowSkeletion as o}from"../elementSkeleton.js";const d=0,i=1,c=2,l=0,u=1,h=16,f=t=>{let e;switch(t){case d:e="diamond_outline";break;case c:e="diamond";break;case i:e="triangle_outline";break;case"none":e=null;break;default:e="arrow"}return e},p=(t,e,s,n)=>{const d=s.querySelector(".edgePaths")?.children;if(!d)throw new Error("No Edges found!");const i=[],c=[];return t.forEach(((t,s)=>{const{id1:p,id2:b,relation:m}=t,w=e.find((t=>t.id===p)),X=e.find((t=>t.id===b)),Y=(t=>{let e;switch(t){case l:e="solid";break;case u:e="dotted";break;default:e="solid"}return e})(m.lineType),g=f(m.type1),y=f(m.type2),k=r(d[s]),x=o(k.startX,k.startY,k.endX,k.endY,{strokeStyle:Y,startArrowhead:g,endArrowhead:y,label:t.title?{text:t.title}:void 0,start:{type:"rectangle",id:w.id},end:{type:"rectangle",id:X.id}}),A=((t,e)=>{const r=["triangle_outline","diamond","diamond_outline"],s=e.startArrowhead&&r.includes(e.startArrowhead),n=e.endArrowhead&&r.includes(e.endArrowhead);return n||s?(s&&("LR"===t?e.startX-=h:"RL"===t?e.startX+=h:"TB"===t?e.startY-=h:"BT"===t&&(e.startY+=h)),n&&("LR"===t?e.endX+=h:"RL"===t?e.endX-=h:"TB"===t?e.endY+=h:"BT"===t&&(e.endY-=h)),e):e})(n,x);i.push(A);const{relationTitle1:T,relationTitle2:B}=t,E=20,S=15,N=15;let R,L;if(T&&"none"!==T){switch(n){case"TB":R=A.startX-E,A.endX<A.startX&&(R-=N),L=A.startY+S;break;case"BT":R=A.startX+E,A.endX>A.startX&&(R+=N),L=A.startY-S;break;case"LR":R=A.startX+E,L=A.startY+S,A.endY>A.startY&&(L+=N);break;case"RL":R=A.startX-E,L=A.startY-S,A.startY>A.endY&&(L-=N);break;default:R=A.startX-E,L=A.startY+S}const t=a(R,L,T,{fontSize:16});c.push(t)}if(B&&"none"!==B){switch(n){case"TB":R=A.endX+E,A.endX<A.startX&&(R+=N),L=A.endY-S;break;case"BT":R=A.endX-E,A.endX>A.startX&&(R-=N),L=A.endY+S;break;case"LR":R=A.endX-E,L=A.endY-S,A.endY>A.startY&&(L-=N);break;case"RL":R=A.endX+E,L=A.endY+S,A.startY>A.endY&&(L+=N);break;default:R=A.endX+E,L=A.endY-S}const t=a(R,L,B,{fontSize:16});c.push(t)}})),{arrows:i,text:c}},b=(r,d)=>{r.parse();const i=r.parser.yy,c=i.getDirection(),l=[],u=[],h=[],f=[],b=i.getNamespaces(),m=i.getClasses();if(Object.keys(m).length){const r=((r,o)=>{const d=[],i=[],c=[];return Object.values(r).forEach((r=>{const{domId:l,id:u}=r,h=t(),f=o.querySelector(`[data-id=${u}]`);if(!f)throw Error(`DOM Node with id ${l} not found`);const{transformX:p,transformY:b}=e(f),m=s(f.firstChild,"rectangle",{id:u,groupId:h});m.x+=p,m.y+=b,m.metadata={classId:u},d.push(m),Array.from(f.querySelectorAll(".divider")).forEach((e=>{const r=Number(e.getAttribute("x1")),s=Number(e.getAttribute("y1")),a=Number(e.getAttribute("x2")),o=Number(e.getAttribute("y2")),d=n(e,r,s,a,o,{groupId:h,id:t()});d.startX+=p,d.startY+=b,d.endX+=p,d.endY+=b,d.metadata={classId:u},i.push(d)}));const w=f.querySelector(".label")?.children;if(!w)throw"label nodes not found";Array.from(w).forEach((r=>{const s=r.textContent;if(!s)return;const n=t(),{transformX:o,transformY:d}=e(r),i=r.getBBox(),l=a(p+o,b+d+10,s,{width:i.width,height:i.height,id:n,groupId:h,metadata:{classId:u}});c.push(l)}))})),{nodes:d,lines:i,text:c}})(m,d);l.push(r.nodes),u.push(...r.lines),h.push(...r.text),f.push(...r.nodes)}const w=i.getRelations(),{arrows:X,text:Y}=p(w,f,d,c),{notes:g,connectors:y}=((t,r,n)=>{const a=[],d=[];return t.forEach((t=>{const{id:i,text:c,class:l}=t,u=r.querySelector(`#${i}`);if(!u)throw new Error(`Node with id ${i} not found!`);const{transformX:h,transformY:f}=e(u),p=u.firstChild,b=s(p,"rectangle",{id:i,subtype:"note",label:{text:c}});if(Object.assign(b,{x:b.x+h,y:b.y+f}),a.push(b),l){const t=n.find((t=>t.id===l));if(!t)throw new Error(`class node with id ${l} not found!`);const e=b.x+(b.width||0)/2,r=b.y+(b.height||0),s=e,a=t.y,i=o(e,r,s,a,{strokeStyle:"dotted",startArrowhead:null,endArrowhead:null,start:{id:b.id,type:"rectangle"},end:{id:t.id,type:"rectangle"}});d.push(i)}})),{notes:a,connectors:d}})(i.getNotes(),d,f);return l.push(g),X.push(...y),h.push(...Y),{type:"class",nodes:l,lines:u,arrows:X,text:h,namespaces:b}};export{b as parseMermaidClassDiagram};
//# sourceMappingURL=class.js.map
