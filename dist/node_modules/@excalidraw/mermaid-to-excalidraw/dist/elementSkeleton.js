import{entityCodesToText as t}from"./utils.js";import{DEFAULT_FONT_SIZE as e}from"./constants.js";const r=(e,r)=>{const o={};r?.label&&(o.label={text:t(r.label),fontSize:16});const i=e.tagName;if("line"===i)o.startX=Number(e.getAttribute("x1")),o.startY=Number(e.getAttribute("y1")),o.endX=Number(e.getAttribute("x2")),o.endY=Number(e.getAttribute("y2"));else if("path"===i){const t=e.getAttribute("d");if(!t)throw new Error('Path element does not contain a "d" attribute');const r=t.split(/(?=[LC])/),i=r[0].substring(1).split(",").map((t=>parseFloat(t))),s=[];r.forEach((t=>{const e=t.substring(1).trim().split(" ").map((t=>{const[e,r]=t.split(",");return[parseFloat(e)-i[0],parseFloat(r)-i[1]]}));s.push(...e)}));const n=s[s.length-1];o.startX=i[0],o.startY=i[1],o.endX=n[0],o.endY=n[1],o.points=s}if(r?.label){const t=10;o.startY=o.startY-t,o.endY=o.endY-t}return o.strokeColor=e.getAttribute("stroke"),o.strokeWidth=Number(e.getAttribute("stroke-width")),o.type="arrow",o.strokeStyle=r?.strokeStyle||"solid",o.startArrowhead=r?.startArrowhead||null,o.endArrowhead=r?.endArrowhead||null,o},o=(t,e,r,o,i)=>{const s={type:"arrow"};return s.startX=t,s.startY=e,s.endX=r,s.endY=o,Object.assign(s,{...i}),s},i=(t,r,o,i)=>({type:"text",x:t,y:r,text:o,width:i?.width||20,height:i?.height||20,fontSize:i?.fontSize||e,id:i?.id,groupId:i?.groupId,metadata:i?.metadata}),s=(e,r,o)=>{const i={},s=Number(e.getAttribute("x")),n=Number(e.getAttribute("y"));i.type="text",i.text=t(r),o?.id&&(i.id=o.id),o?.groupId&&(i.groupId=o.groupId);const d=e.getBBox();i.width=d.width,i.height=d.height,i.x=s-d.width/2,i.y=n;const a=parseInt(getComputedStyle(e).fontSize);return i.fontSize=a,i},n=(e,r,o={})=>{const i={};i.type=r;const{label:s,subtype:n,id:d,groupId:a}=o;i.id=d,a&&(i.groupId=a),s&&(i.label={text:t(s.text),fontSize:16,verticalAlign:s?.verticalAlign});const u=e.getBBox();switch(i.x=u.x,i.y=u.y,i.width=u.width,i.height=u.height,i.subtype=n,n){case"highlight":const t=e.getAttribute("fill");t&&(i.bgColor=t);break;case"note":i.strokeStyle="dashed"}return i},d=(t,e,r,o,i,s)=>{const n={};return n.startX=e,n.startY=r,n.endX=o,s?.groupId&&(n.groupId=s.groupId),s?.id&&(n.id=s.id),n.endY=i,n.strokeColor=t.getAttribute("stroke"),n.strokeWidth=Number(t.getAttribute("stroke-width")),n.type="line",n};export{o as createArrowSkeletion,r as createArrowSkeletonFromSVG,n as createContainerSkeletonFromSVG,d as createLineSkeletonFromSVG,i as createTextSkeleton,s as createTextSkeletonFromSVG};
//# sourceMappingURL=elementSkeleton.js.map
