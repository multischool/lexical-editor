const t=t=>{const e=(t=n(t)).replace(/#(\d+);/g,"&#$1;").replace(/#([a-z]+);/g,"&$1;"),r=document.createElement("textarea");return r.innerHTML=e,r.value},e=t=>{const e=t.getAttribute("transform"),r=e?.match(/translate\(([ \d.-]+),\s*([\d.-]+)\)/);let n=0,a=0;return r&&(n=Number(r[1]),a=Number(r[2])),{transformX:n,transformY:a}},r=t=>{let e=t;return e=e.replace(/style.*:\S*#.*;/g,(t=>t.substring(0,t.length-1))),e=e.replace(/classDef.*:\S*#.*;/g,(t=>t.substring(0,t.length-1))),e=e.replace(/#\w+;/g,(t=>{const e=t.substring(1,t.length-1);return/^\+?\d+$/.test(e)?`ﬂ°°${e}¶ß`:`ﬂ°${e}¶ß`})),e},n=function(t){return t.replace(/ﬂ°°/g,"#").replace(/ﬂ°/g,"&").replace(/¶ß/g,";")},a=(t,e={x:0,y:0})=>{if("path"!==t.tagName.toLowerCase())throw new Error(`Invalid input: Expected an HTMLElement of tag "path", got ${t.tagName}`);const r=t.getAttribute("d");if(!r)throw new Error('Path element does not contain a "d" attribute');const n=r.split(/(?=[LM])/),a=n[0].substring(1).split(",").map((t=>parseFloat(t))),s=n[n.length-1].substring(1).split(",").map((t=>parseFloat(t))),l=n.map((t=>{const e=t.substring(1).split(",").map((t=>parseFloat(t)));return{x:e[0],y:e[1]}})).filter(((t,e,r)=>{if(0===e||e===r.length-1)return!0;if(t.x===r[e-1].x&&t.y===r[e-1].y)return!1;if(e===r.length-2&&(r[e-1].x===t.x||r[e-1].y===t.y)){const e=r[r.length-1];return Math.hypot(e.x-t.x,e.y-t.y)>20}return t.x!==r[e-1].x||t.y!==r[e-1].y})).map((t=>({x:t.x+e.x,y:t.y+e.y})));return{startX:a[0]+e.x,startY:a[1]+e.y,endX:s[0]+e.x,endY:s[1]+e.y,reflectionPoints:l}};export{a as computeEdgePositions,n as decodeEntities,r as encodeEntities,t as entityCodesToText,e as getTransformAttr};
//# sourceMappingURL=utils.js.map
