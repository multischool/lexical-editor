{"version":3,"file":"helpers.js","sources":["../../../../../../node_modules/@excalidraw/mermaid-to-excalidraw/dist/converter/helpers.js"],"sourcesContent":["import { CONTAINER_STYLE_PROPERTY, LABEL_STYLE_PROPERTY, } from \"../interfaces.js\";\nimport { removeMarkdown } from \"@excalidraw/markdown-to-text\";\n/**\n * Convert mermaid edge type to Excalidraw arrow type\n */\nconst MERMAID_EDGE_TYPE_MAPPER = {\n    arrow_circle: {\n        endArrowhead: \"dot\",\n    },\n    arrow_cross: {\n        endArrowhead: \"bar\",\n    },\n    arrow_open: {\n        endArrowhead: null,\n        startArrowhead: null,\n    },\n    double_arrow_circle: {\n        endArrowhead: \"dot\",\n        startArrowhead: \"dot\",\n    },\n    double_arrow_cross: {\n        endArrowhead: \"bar\",\n        startArrowhead: \"bar\",\n    },\n    double_arrow_point: {\n        endArrowhead: \"arrow\",\n        startArrowhead: \"arrow\",\n    },\n};\nexport const computeExcalidrawArrowType = (mermaidArrowType) => {\n    return MERMAID_EDGE_TYPE_MAPPER[mermaidArrowType];\n};\n// Get text from graph elements, fallback markdown to text\nexport const getText = (element) => {\n    let text = element.text;\n    if (element.labelType === \"markdown\") {\n        text = removeMarkdown(element.text);\n    }\n    return removeFontAwesomeIcons(text);\n};\n/**\n * Remove font awesome icons support from text\n */\nconst removeFontAwesomeIcons = (input) => {\n    const fontAwesomeRegex = /\\s?(fa|fab):[a-zA-Z0-9-]+/g;\n    return input.replace(fontAwesomeRegex, \"\");\n};\n/**\n * Compute style for vertex\n */\nexport const computeExcalidrawVertexStyle = (style) => {\n    const excalidrawProperty = {};\n    Object.keys(style).forEach((property) => {\n        switch (property) {\n            case CONTAINER_STYLE_PROPERTY.FILL: {\n                excalidrawProperty.backgroundColor = style[property];\n                excalidrawProperty.fillStyle = \"solid\";\n                break;\n            }\n            case CONTAINER_STYLE_PROPERTY.STROKE: {\n                excalidrawProperty.strokeColor = style[property];\n                break;\n            }\n            case CONTAINER_STYLE_PROPERTY.STROKE_WIDTH: {\n                excalidrawProperty.strokeWidth = Number(style[property]?.split(\"px\")[0]);\n                break;\n            }\n            case CONTAINER_STYLE_PROPERTY.STROKE_DASHARRAY: {\n                excalidrawProperty.strokeStyle = \"dashed\";\n                break;\n            }\n        }\n    });\n    return excalidrawProperty;\n};\n/**\n * Compute style for label\n */\nexport const computeExcalidrawVertexLabelStyle = (style) => {\n    const excalidrawProperty = {};\n    Object.keys(style).forEach((property) => {\n        switch (property) {\n            case LABEL_STYLE_PROPERTY.COLOR: {\n                excalidrawProperty.strokeColor = style[property];\n                break;\n            }\n        }\n    });\n    return excalidrawProperty;\n};\n"],"names":["MERMAID_EDGE_TYPE_MAPPER","arrow_circle","endArrowhead","arrow_cross","arrow_open","startArrowhead","double_arrow_circle","double_arrow_cross","double_arrow_point","computeExcalidrawArrowType","mermaidArrowType","getText","element","text","labelType","removeMarkdown","removeFontAwesomeIcons","input","replace","computeExcalidrawVertexStyle","style","excalidrawProperty","Object","keys","forEach","property","CONTAINER_STYLE_PROPERTY","FILL","backgroundColor","fillStyle","STROKE","strokeColor","STROKE_WIDTH","strokeWidth","Number","split","STROKE_DASHARRAY","strokeStyle","computeExcalidrawVertexLabelStyle","LABEL_STYLE_PROPERTY","COLOR"],"mappings":"+JAKA,MAAMA,EAA2B,CAC7BC,aAAc,CACVC,aAAc,OAElBC,YAAa,CACTD,aAAc,OAElBE,WAAY,CACRF,aAAc,KACdG,eAAgB,MAEpBC,oBAAqB,CACjBJ,aAAc,MACdG,eAAgB,OAEpBE,mBAAoB,CAChBL,aAAc,MACdG,eAAgB,OAEpBG,mBAAoB,CAChBN,aAAc,QACdG,eAAgB,UAGXI,EAA8BC,GAChCV,EAAyBU,GAGvBC,EAAWC,IACpB,IAAIC,EAAOD,EAAQC,KAInB,MAH0B,aAAtBD,EAAQE,YACRD,EAAOE,EAAeH,EAAQC,OAE3BG,EAAuBH,EAAK,EAKjCG,EAA0BC,GAErBA,EAAMC,QADY,6BACc,IAK9BC,EAAgCC,IACzC,MAAMC,EAAqB,CAAA,EAsB3B,OArBAC,OAAOC,KAAKH,GAAOI,SAASC,IACxB,OAAQA,GACJ,KAAKC,EAAyBC,KAC1BN,EAAmBO,gBAAkBR,EAAMK,GAC3CJ,EAAmBQ,UAAY,QAC/B,MAEJ,KAAKH,EAAyBI,OAC1BT,EAAmBU,YAAcX,EAAMK,GACvC,MAEJ,KAAKC,EAAyBM,aAC1BX,EAAmBY,YAAcC,OAAOd,EAAMK,IAAWU,MAAM,MAAM,IACrE,MAEJ,KAAKT,EAAyBU,iBAC1Bf,EAAmBgB,YAAc,SAGxC,IAEEhB,CAAkB,EAKhBiB,EAAqClB,IAC9C,MAAMC,EAAqB,CAAA,EAS3B,OARAC,OAAOC,KAAKH,GAAOI,SAASC,IACxB,GAAQA,IACCc,EAAqBC,MACtBnB,EAAmBU,YAAcX,EAAMK,EAG9C,IAEEJ,CAAkB"}