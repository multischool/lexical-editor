{"version":3,"file":"class.js","sources":["../../../../../../../node_modules/@excalidraw/mermaid-to-excalidraw/dist/converter/types/class.js"],"sourcesContent":["import { nanoid } from \"nanoid\";\nimport { transformToExcalidrawArrowSkeleton, transformToExcalidrawContainerSkeleton, transformToExcalidrawLineSkeleton, transformToExcalidrawTextSkeleton, } from \"../transformToExcalidrawSkeleton.js\";\nimport { GraphConverter } from \"../GraphConverter.js\";\nexport const classToExcalidrawSkeletonConvertor = new GraphConverter({\n    converter: (chart) => {\n        const elements = [];\n        Object.values(chart.nodes).forEach((node) => {\n            if (!node || !node.length) {\n                return;\n            }\n            node.forEach((element) => {\n                let excalidrawElement;\n                switch (element.type) {\n                    case \"line\":\n                        excalidrawElement = transformToExcalidrawLineSkeleton(element);\n                        break;\n                    case \"rectangle\":\n                    case \"ellipse\":\n                        excalidrawElement = transformToExcalidrawContainerSkeleton(element);\n                        break;\n                    case \"text\":\n                        excalidrawElement = transformToExcalidrawTextSkeleton(element);\n                        break;\n                    default:\n                        throw `unknown type ${element.type}`;\n                        break;\n                }\n                elements.push(excalidrawElement);\n            });\n        });\n        Object.values(chart.lines).forEach((line) => {\n            if (!line) {\n                return;\n            }\n            elements.push(transformToExcalidrawLineSkeleton(line));\n        });\n        Object.values(chart.arrows).forEach((arrow) => {\n            if (!arrow) {\n                return;\n            }\n            const excalidrawElement = transformToExcalidrawArrowSkeleton(arrow);\n            elements.push(excalidrawElement);\n        });\n        Object.values(chart.text).forEach((ele) => {\n            const excalidrawElement = transformToExcalidrawTextSkeleton(ele);\n            elements.push(excalidrawElement);\n        });\n        Object.values(chart.namespaces).forEach((namespace) => {\n            const classIds = Object.keys(namespace.classes);\n            const children = [...classIds];\n            const chartElements = [...chart.lines, ...chart.arrows, ...chart.text];\n            classIds.forEach((classId) => {\n                const childIds = chartElements\n                    .filter((ele) => ele.metadata && ele.metadata.classId === classId)\n                    .map((ele) => ele.id);\n                if (childIds.length) {\n                    children.push(...childIds);\n                }\n            });\n            const frame = {\n                type: \"frame\",\n                id: nanoid(),\n                name: namespace.id,\n                children,\n            };\n            elements.push(frame);\n        });\n        return { elements };\n    },\n});\n"],"names":["classToExcalidrawSkeletonConvertor","GraphConverter","converter","chart","elements","Object","values","nodes","forEach","node","length","element","excalidrawElement","type","transformToExcalidrawLineSkeleton","transformToExcalidrawContainerSkeleton","transformToExcalidrawTextSkeleton","push","lines","line","arrows","arrow","transformToExcalidrawArrowSkeleton","text","ele","namespaces","namespace","classIds","keys","classes","children","chartElements","classId","childIds","filter","metadata","map","id","frame","nanoid","name"],"mappings":"wUAGY,MAACA,EAAqC,IAAIC,EAAe,CACjEC,UAAYC,IACR,MAAMC,EAAW,GA8DjB,OA7DAC,OAAOC,OAAOH,EAAMI,OAAOC,SAASC,IAC3BA,GAASA,EAAKC,QAGnBD,EAAKD,SAASG,IACV,IAAIC,EACJ,OAAQD,EAAQE,MACZ,IAAK,OACDD,EAAoBE,EAAkCH,GACtD,MACJ,IAAK,YACL,IAAK,UACDC,EAAoBG,EAAuCJ,GAC3D,MACJ,IAAK,OACDC,EAAoBI,EAAkCL,GACtD,MACJ,QACI,KAAM,gBAAgBA,EAAQE,OAGtCT,EAASa,KAAKL,EAAkB,GAClC,IAENP,OAAOC,OAAOH,EAAMe,OAAOV,SAASW,IAC3BA,GAGLf,EAASa,KAAKH,EAAkCK,GAAM,IAE1Dd,OAAOC,OAAOH,EAAMiB,QAAQZ,SAASa,IACjC,IAAKA,EACD,OAEJ,MAAMT,EAAoBU,EAAmCD,GAC7DjB,EAASa,KAAKL,EAAkB,IAEpCP,OAAOC,OAAOH,EAAMoB,MAAMf,SAASgB,IAC/B,MAAMZ,EAAoBI,EAAkCQ,GAC5DpB,EAASa,KAAKL,EAAkB,IAEpCP,OAAOC,OAAOH,EAAMsB,YAAYjB,SAASkB,IACrC,MAAMC,EAAWtB,OAAOuB,KAAKF,EAAUG,SACjCC,EAAW,IAAIH,GACfI,EAAgB,IAAI5B,EAAMe,SAAUf,EAAMiB,UAAWjB,EAAMoB,MACjEI,EAASnB,SAASwB,IACd,MAAMC,EAAWF,EACZG,QAAQV,GAAQA,EAAIW,UAAYX,EAAIW,SAASH,UAAYA,IACzDI,KAAKZ,GAAQA,EAAIa,KAClBJ,EAASvB,QACToB,EAASb,QAAQgB,EACpB,IAEL,MAAMK,EAAQ,CACVzB,KAAM,QACNwB,GAAIE,IACJC,KAAMd,EAAUW,GAChBP,YAEJ1B,EAASa,KAAKqB,EAAM,IAEjB,CAAElC,WAAU"}