import{GraphConverter as e}from"../GraphConverter.js";import{getText as t,computeExcalidrawVertexStyle as r,computeExcalidrawVertexLabelStyle as s,computeExcalidrawArrowType as i}from"../helpers.js";import{VERTEX_TYPE as o}from"../../interfaces.js";const d=new e({converter:(e,d)=>{const n=[],p=d.fontSize,{getGroupIds:a,getParentId:h}=(e=>{const t={};e.subGraphs.map((r=>{r.nodeIds.forEach((s=>{t[r.id]={id:r.id,parent:null,isLeaf:!1},t[s]={id:s,parent:r.id,isLeaf:void 0!==e.vertices[s]}}))}));const r={};return[...Object.keys(e.vertices),...e.subGraphs.map((e=>e.id))].forEach((e=>{if(!t[e])return;let s=t[e];const i=[];for(s.isLeaf||i.push(`subgraph_group_${s.id}`);s.parent;)i.push(`subgraph_group_${s.parent}`),s=t[s.parent];r[e]=i})),{getGroupIds:e=>r[e]||[],getParentId:e=>t[e]?t[e].parent:null}})(e);return e.subGraphs.reverse().forEach((e=>{const r=a(e.id),s={id:e.id,type:"rectangle",groupIds:r,x:e.x,y:e.y,width:e.width,height:e.height,label:{groupIds:r,text:t(e),fontSize:p,verticalAlign:"top"}};n.push(s)})),Object.values(e.vertices).forEach((e=>{if(!e)return;const i=a(e.id),d=r(e.containerStyle),h=s(e.labelStyle);let l={id:e.id,type:"rectangle",groupIds:i,x:e.x,y:e.y,width:e.width,height:e.height,strokeWidth:2,label:{groupIds:i,text:t(e),fontSize:p,...h},link:e.link||null,...d};switch(e.type){case o.STADIUM:case o.ROUND:l={...l,roundness:{type:3}};break;case o.DOUBLECIRCLE:{const r=5;i.push(`doublecircle_${e.id}}`);const s={type:"ellipse",groupIds:i,x:e.x+r,y:e.y+r,width:e.width-2*r,height:e.height-2*r,strokeWidth:2,roundness:{type:3},label:{groupIds:i,text:t(e),fontSize:p}};l={...l,groupIds:i,type:"ellipse"},n.push(s);break}case o.CIRCLE:l.type="ellipse";break;case o.DIAMOND:l.type="diamond"}n.push(l)})),e.edges.forEach((e=>{let r=[];const s=h(e.start),o=h(e.end);s&&s===o&&(r=a(s));const{startX:d,startY:l,reflectionPoints:c}=e,u=c.map((e=>[e.x-c[0].x,e.y-c[0].y])),g=i(e.type),y={id:`${e.start}_${e.end}`,type:"arrow",groupIds:r,x:d,y:l,strokeWidth:"thick"===e.stroke?4:2,strokeStyle:"dotted"===e.stroke?"dashed":void 0,points:u,...e.text?{label:{text:t(e),fontSize:p,groupIds:r}}:{},roundness:{type:2},...g},f=n.find((t=>t.id===e.start)),I=n.find((t=>t.id===e.end));f&&I&&(y.start={id:f.id||""},y.end={id:I.id||""},n.push(y))})),{elements:n}}});export{d as FlowchartToExcalidrawSkeletonConverter};
//# sourceMappingURL=flowchart.js.map
