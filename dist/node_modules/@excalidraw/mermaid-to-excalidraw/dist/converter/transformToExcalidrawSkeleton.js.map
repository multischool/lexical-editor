{"version":3,"file":"transformToExcalidrawSkeleton.js","sources":["../../../../../../node_modules/@excalidraw/mermaid-to-excalidraw/dist/converter/transformToExcalidrawSkeleton.js"],"sourcesContent":["export const normalizeText = (text) => {\n    return text.replace(/\\\\n/g, \"\\n\");\n};\nexport const transformToExcalidrawLineSkeleton = (line) => {\n    const lineElement = {\n        type: \"line\",\n        x: line.startX,\n        y: line.startY,\n        points: [\n            [0, 0],\n            [line.endX - line.startX, line.endY - line.startY],\n        ],\n        width: line.endX - line.startX,\n        height: line.endY - line.startY,\n        strokeStyle: line.strokeStyle || \"solid\",\n        strokeColor: line.strokeColor || \"#000\",\n        strokeWidth: line.strokeWidth || 1,\n    };\n    if (line.groupId) {\n        Object.assign(lineElement, { groupIds: [line.groupId] });\n    }\n    if (line.id) {\n        Object.assign(lineElement, { id: line.id });\n    }\n    return lineElement;\n};\nexport const transformToExcalidrawTextSkeleton = (element) => {\n    const textElement = {\n        type: \"text\",\n        x: element.x,\n        y: element.y,\n        width: element.width,\n        height: element.height,\n        text: normalizeText(element.text) || \"\",\n        fontSize: element.fontSize,\n        verticalAlign: \"middle\",\n    };\n    if (element.groupId) {\n        Object.assign(textElement, { groupIds: [element.groupId] });\n    }\n    if (element.id) {\n        Object.assign(textElement, { id: element.id });\n    }\n    return textElement;\n};\nexport const transformToExcalidrawContainerSkeleton = (element) => {\n    let extraProps = {};\n    if (element.type === \"rectangle\" && element.subtype === \"activation\") {\n        extraProps = {\n            backgroundColor: \"#e9ecef\",\n            fillStyle: \"solid\",\n        };\n    }\n    const container = {\n        id: element.id,\n        type: element.type,\n        x: element.x,\n        y: element.y,\n        width: element.width,\n        height: element.height,\n        label: {\n            text: normalizeText(element?.label?.text || \"\"),\n            fontSize: element?.label?.fontSize,\n            verticalAlign: element.label?.verticalAlign || \"middle\",\n            strokeColor: element.label?.color || \"#000\",\n            groupIds: element.groupId ? [element.groupId] : [],\n        },\n        strokeStyle: element?.strokeStyle,\n        strokeWidth: element?.strokeWidth,\n        strokeColor: element?.strokeColor,\n        backgroundColor: element?.bgColor,\n        fillStyle: \"solid\",\n        ...extraProps,\n    };\n    if (element.groupId) {\n        Object.assign(container, { groupIds: [element.groupId] });\n    }\n    return container;\n};\nexport const transformToExcalidrawArrowSkeleton = (arrow) => {\n    const arrowElement = {\n        type: \"arrow\",\n        x: arrow.startX,\n        y: arrow.startY,\n        points: arrow.points || [\n            [0, 0],\n            [arrow.endX - arrow.startX, arrow.endY - arrow.startY],\n        ],\n        width: arrow.endX - arrow.startX,\n        height: arrow.endY - arrow.startY,\n        strokeStyle: arrow?.strokeStyle || \"solid\",\n        endArrowhead: arrow?.endArrowhead || null,\n        startArrowhead: arrow?.startArrowhead || null,\n        label: {\n            text: normalizeText(arrow?.label?.text || \"\"),\n            fontSize: 16,\n        },\n        roundness: {\n            type: 2,\n        },\n        start: arrow.start,\n        end: arrow.end,\n    };\n    if (arrow.groupId) {\n        Object.assign(arrowElement, { groupIds: [arrow.groupId] });\n    }\n    return arrowElement;\n};\n"],"names":["normalizeText","text","replace","transformToExcalidrawLineSkeleton","line","lineElement","type","x","startX","y","startY","points","endX","endY","width","height","strokeStyle","strokeColor","strokeWidth","groupId","Object","assign","groupIds","id","transformToExcalidrawTextSkeleton","element","textElement","fontSize","verticalAlign","transformToExcalidrawContainerSkeleton","extraProps","subtype","backgroundColor","fillStyle","container","label","color","bgColor","transformToExcalidrawArrowSkeleton","arrow","arrowElement","endArrowhead","startArrowhead","roundness","start","end"],"mappings":"AAAY,MAACA,EAAiBC,GACnBA,EAAKC,QAAQ,OAAQ,MAEnBC,EAAqCC,IAC9C,MAAMC,EAAc,CAChBC,KAAM,OACNC,EAAGH,EAAKI,OACRC,EAAGL,EAAKM,OACRC,OAAQ,CACJ,CAAC,EAAG,GACJ,CAACP,EAAKQ,KAAOR,EAAKI,OAAQJ,EAAKS,KAAOT,EAAKM,SAE/CI,MAAOV,EAAKQ,KAAOR,EAAKI,OACxBO,OAAQX,EAAKS,KAAOT,EAAKM,OACzBM,YAAaZ,EAAKY,aAAe,QACjCC,YAAab,EAAKa,aAAe,OACjCC,YAAad,EAAKc,aAAe,GAQrC,OANId,EAAKe,SACLC,OAAOC,OAAOhB,EAAa,CAAEiB,SAAU,CAAClB,EAAKe,WAE7Cf,EAAKmB,IACLH,OAAOC,OAAOhB,EAAa,CAAEkB,GAAInB,EAAKmB,KAEnClB,CAAW,EAETmB,EAAqCC,IAC9C,MAAMC,EAAc,CAChBpB,KAAM,OACNC,EAAGkB,EAAQlB,EACXE,EAAGgB,EAAQhB,EACXK,MAAOW,EAAQX,MACfC,OAAQU,EAAQV,OAChBd,KAAMD,EAAcyB,EAAQxB,OAAS,GACrC0B,SAAUF,EAAQE,SAClBC,cAAe,UAQnB,OANIH,EAAQN,SACRC,OAAOC,OAAOK,EAAa,CAAEJ,SAAU,CAACG,EAAQN,WAEhDM,EAAQF,IACRH,OAAOC,OAAOK,EAAa,CAAEH,GAAIE,EAAQF,KAEtCG,CAAW,EAETG,EAA0CJ,IACnD,IAAIK,EAAa,CAAA,EACI,cAAjBL,EAAQnB,MAA4C,eAApBmB,EAAQM,UACxCD,EAAa,CACTE,gBAAiB,UACjBC,UAAW,UAGnB,MAAMC,EAAY,CACdX,GAAIE,EAAQF,GACZjB,KAAMmB,EAAQnB,KACdC,EAAGkB,EAAQlB,EACXE,EAAGgB,EAAQhB,EACXK,MAAOW,EAAQX,MACfC,OAAQU,EAAQV,OAChBoB,MAAO,CACHlC,KAAMD,EAAcyB,GAASU,OAAOlC,MAAQ,IAC5C0B,SAAUF,GAASU,OAAOR,SAC1BC,cAAeH,EAAQU,OAAOP,eAAiB,SAC/CX,YAAaQ,EAAQU,OAAOC,OAAS,OACrCd,SAAUG,EAAQN,QAAU,CAACM,EAAQN,SAAW,IAEpDH,YAAaS,GAAST,YACtBE,YAAaO,GAASP,YACtBD,YAAaQ,GAASR,YACtBe,gBAAiBP,GAASY,QAC1BJ,UAAW,WACRH,GAKP,OAHIL,EAAQN,SACRC,OAAOC,OAAOa,EAAW,CAAEZ,SAAU,CAACG,EAAQN,WAE3Ce,CAAS,EAEPI,EAAsCC,IAC/C,MAAMC,EAAe,CACjBlC,KAAM,QACNC,EAAGgC,EAAM/B,OACTC,EAAG8B,EAAM7B,OACTC,OAAQ4B,EAAM5B,QAAU,CACpB,CAAC,EAAG,GACJ,CAAC4B,EAAM3B,KAAO2B,EAAM/B,OAAQ+B,EAAM1B,KAAO0B,EAAM7B,SAEnDI,MAAOyB,EAAM3B,KAAO2B,EAAM/B,OAC1BO,OAAQwB,EAAM1B,KAAO0B,EAAM7B,OAC3BM,YAAauB,GAAOvB,aAAe,QACnCyB,aAAcF,GAAOE,cAAgB,KACrCC,eAAgBH,GAAOG,gBAAkB,KACzCP,MAAO,CACHlC,KAAMD,EAAcuC,GAAOJ,OAAOlC,MAAQ,IAC1C0B,SAAU,IAEdgB,UAAW,CACPrC,KAAM,GAEVsC,MAAOL,EAAMK,MACbC,IAAKN,EAAMM,KAKf,OAHIN,EAAMpB,SACNC,OAAOC,OAAOmB,EAAc,CAAElB,SAAU,CAACiB,EAAMpB,WAE5CqB,CAAY"}