{"version":3,"file":"index.js","sources":["../../../node_modules/micromark-util-subtokenize/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n"],"names":["subtokenize","events","jumps","event","lineIndex","otherIndex","otherEvent","parameters","subevents","more","index","length","type","_tokenizer","_isInFirstContentOfListItem","contentType","Object","assign","subcontent","_container","undefined","end","start","slice","unshift","splice","eventIndex","token","context","startPosition","startPositions","tokenizer","parser","childEvents","gaps","stream","previous","current","adjust","breaks","push","sliceStream","next","defineSkip","_gfmTasklistFirstContentOfListItem","write","line","pop"],"mappings":"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"}