const t={A:7,a:7,C:6,c:6,H:1,h:1,L:2,l:2,M:2,m:2,Q:4,q:4,S:4,s:4,T:2,t:2,V:1,v:1,Z:0,z:0};function e(t,e){return t.type===e}function r(n){const o=[],s=function(t){const e=new Array;for(;""!==t;)if(t.match(/^([ \t\r\n,]+)/))t=t.substr(RegExp.$1.length);else if(t.match(/^([aAcChHlLmMqQsStTvVzZ])/))e[e.length]={type:0,text:RegExp.$1},t=t.substr(RegExp.$1.length);else{if(!t.match(/^(([-+]?[0-9]+(\.[0-9]*)?|[-+]?\.[0-9]+)([eE][-+]?[0-9]+)?)/))return[];e[e.length]={type:1,text:`${parseFloat(RegExp.$1)}`},t=t.substr(RegExp.$1.length)}return e[e.length]={type:2,text:""},e}(n);let h="BOD",l=0,a=s[l];for(;!e(a,2);){let x=0;const f=[];if("BOD"===h){if("M"!==a.text&&"m"!==a.text)return r("M0,0"+n);l++,x=t[a.text],h=a.text}else e(a,1)?x=t[h]:(l++,x=t[a.text],h=a.text);if(!(l+x<s.length))throw new Error("Path data ended short");for(let t=l;t<l+x;t++){const r=s[t];if(!e(r,1))throw new Error("Param not a number: "+h+","+r.text);f[f.length]=+r.text}if("number"!=typeof t[h])throw new Error("Bad segment: "+h);{const t={key:h,data:f};o.push(t),l+=x,a=s[l],"M"===h&&(h="L"),"m"===h&&(h="l")}}return o}export{r as parsePath};
//# sourceMappingURL=parser.js.map
