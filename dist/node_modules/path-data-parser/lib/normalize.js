function a(a){const t=[];let e="",h=0,c=0,n=0,o=0,M=0,r=0;for(const{key:k,data:u}of a){switch(k){case"M":t.push({key:"M",data:[...u]}),[h,c]=u,[n,o]=u;break;case"C":t.push({key:"C",data:[...u]}),h=u[4],c=u[5],M=u[2],r=u[3];break;case"L":t.push({key:"L",data:[...u]}),[h,c]=u;break;case"H":h=u[0],t.push({key:"L",data:[h,c]});break;case"V":c=u[0],t.push({key:"L",data:[h,c]});break;case"S":{let a=0,s=0;"C"===e||"S"===e?(a=h+(h-M),s=c+(c-r)):(a=h,s=c),t.push({key:"C",data:[a,s,...u]}),M=u[0],r=u[1],h=u[2],c=u[3];break}case"T":{const[a,s]=u;let n=0,o=0;"Q"===e||"T"===e?(n=h+(h-M),o=c+(c-r)):(n=h,o=c);const k=h+2*(n-h)/3,i=c+2*(o-c)/3,p=a+2*(n-a)/3,d=s+2*(o-s)/3;t.push({key:"C",data:[k,i,p,d,a,s]}),M=n,r=o,h=a,c=s;break}case"Q":{const[a,s,e,n]=u,o=h+2*(a-h)/3,k=c+2*(s-c)/3,i=e+2*(a-e)/3,p=n+2*(s-n)/3;t.push({key:"C",data:[o,k,i,p,e,n]}),M=a,r=s,h=e,c=n;break}case"A":{const a=Math.abs(u[0]),e=Math.abs(u[1]),n=u[2],o=u[3],M=u[4],r=u[5],k=u[6];if(0===a||0===e)t.push({key:"C",data:[h,c,r,k,r,k]}),h=r,c=k;else if(h!==r||c!==k){s(h,c,r,k,a,e,n,o,M).forEach((function(a){t.push({key:"C",data:a})})),h=r,c=k}break}case"Z":t.push({key:"Z",data:[]}),h=n,c=o}e=k}return t}function t(a,t,s){return[a*Math.cos(s)-t*Math.sin(s),a*Math.sin(s)+t*Math.cos(s)]}function s(a,e,h,c,n,o,M,r,k,u){const i=(p=M,Math.PI*p/180);var p;let d=[],b=0,f=0,l=0,y=0;if(u)[b,f,l,y]=u;else{[a,e]=t(a,e,-i),[h,c]=t(h,c,-i);const s=(a-h)/2,M=(e-c)/2;let u=s*s/(n*n)+M*M/(o*o);u>1&&(u=Math.sqrt(u),n*=u,o*=u);const p=n*n,d=o*o,I=p*d-p*M*M-d*s*s,P=p*M*M+d*s*s,C=(r===k?-1:1)*Math.sqrt(Math.abs(I/P));l=C*n*M/o+(a+h)/2,y=C*-o*s/n+(e+c)/2,b=Math.asin(parseFloat(((e-y)/o).toFixed(9))),f=Math.asin(parseFloat(((c-y)/o).toFixed(9))),a<l&&(b=Math.PI-b),h<l&&(f=Math.PI-f),b<0&&(b=2*Math.PI+b),f<0&&(f=2*Math.PI+f),k&&b>f&&(b-=2*Math.PI),!k&&f>b&&(f-=2*Math.PI)}let I=f-b;if(Math.abs(I)>120*Math.PI/180){const a=f,t=h,e=c;f=k&&f>b?b+120*Math.PI/180*1:b+120*Math.PI/180*-1,d=s(h=l+n*Math.cos(f),c=y+o*Math.sin(f),t,e,n,o,M,0,k,[f,a,l,y])}I=f-b;const P=Math.cos(b),C=Math.sin(b),F=Math.cos(f),L=Math.sin(f),x=Math.tan(I/4),q=4/3*n*x,Q=4/3*o*x,S=[a,e],T=[a+q*C,e-Q*P],Z=[h+q*L,c-Q*F],g=[h,c];if(T[0]=2*S[0]-T[0],T[1]=2*S[1]-T[1],u)return[T,Z,g].concat(d);{d=[T,Z,g].concat(d);const a=[];for(let s=0;s<d.length;s+=3){const e=t(d[s][0],d[s][1],i),h=t(d[s+1][0],d[s+1][1],i),c=t(d[s+2][0],d[s+2][1],i);a.push([e[0],e[1],h[0],h[1],c[0],c[1]])}return a}}export{a as normalize};
//# sourceMappingURL=normalize.js.map
