{"version":3,"file":"absolutize.js","sources":["../../../../node_modules/path-data-parser/lib/absolutize.js"],"sourcesContent":["// Translate relative commands to absolute commands\nexport function absolutize(segments) {\n    let cx = 0, cy = 0;\n    let subx = 0, suby = 0;\n    const out = [];\n    for (const { key, data } of segments) {\n        switch (key) {\n            case 'M':\n                out.push({ key: 'M', data: [...data] });\n                [cx, cy] = data;\n                [subx, suby] = data;\n                break;\n            case 'm':\n                cx += data[0];\n                cy += data[1];\n                out.push({ key: 'M', data: [cx, cy] });\n                subx = cx;\n                suby = cy;\n                break;\n            case 'L':\n                out.push({ key: 'L', data: [...data] });\n                [cx, cy] = data;\n                break;\n            case 'l':\n                cx += data[0];\n                cy += data[1];\n                out.push({ key: 'L', data: [cx, cy] });\n                break;\n            case 'C':\n                out.push({ key: 'C', data: [...data] });\n                cx = data[4];\n                cy = data[5];\n                break;\n            case 'c': {\n                const newdata = data.map((d, i) => (i % 2) ? (d + cy) : (d + cx));\n                out.push({ key: 'C', data: newdata });\n                cx = newdata[4];\n                cy = newdata[5];\n                break;\n            }\n            case 'Q':\n                out.push({ key: 'Q', data: [...data] });\n                cx = data[2];\n                cy = data[3];\n                break;\n            case 'q': {\n                const newdata = data.map((d, i) => (i % 2) ? (d + cy) : (d + cx));\n                out.push({ key: 'Q', data: newdata });\n                cx = newdata[2];\n                cy = newdata[3];\n                break;\n            }\n            case 'A':\n                out.push({ key: 'A', data: [...data] });\n                cx = data[5];\n                cy = data[6];\n                break;\n            case 'a':\n                cx += data[5];\n                cy += data[6];\n                out.push({ key: 'A', data: [data[0], data[1], data[2], data[3], data[4], cx, cy] });\n                break;\n            case 'H':\n                out.push({ key: 'H', data: [...data] });\n                cx = data[0];\n                break;\n            case 'h':\n                cx += data[0];\n                out.push({ key: 'H', data: [cx] });\n                break;\n            case 'V':\n                out.push({ key: 'V', data: [...data] });\n                cy = data[0];\n                break;\n            case 'v':\n                cy += data[0];\n                out.push({ key: 'V', data: [cy] });\n                break;\n            case 'S':\n                out.push({ key: 'S', data: [...data] });\n                cx = data[2];\n                cy = data[3];\n                break;\n            case 's': {\n                const newdata = data.map((d, i) => (i % 2) ? (d + cy) : (d + cx));\n                out.push({ key: 'S', data: newdata });\n                cx = newdata[2];\n                cy = newdata[3];\n                break;\n            }\n            case 'T':\n                out.push({ key: 'T', data: [...data] });\n                cx = data[0];\n                cy = data[1];\n                break;\n            case 't':\n                cx += data[0];\n                cy += data[1];\n                out.push({ key: 'T', data: [cx, cy] });\n                break;\n            case 'Z':\n            case 'z':\n                out.push({ key: 'Z', data: [] });\n                cx = subx;\n                cy = suby;\n                break;\n        }\n    }\n    return out;\n}\n"],"names":["absolutize","segments","cx","cy","subx","suby","out","key","data","push","newdata","map","d","i"],"mappings":"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"}