{"version":3,"file":"continuous.js","sources":["../../../../node_modules/d3-scale/src/continuous.js"],"sourcesContent":["import {bisect} from \"d3-array\";\nimport {interpolate as interpolateValue, interpolateNumber, interpolateRound} from \"d3-interpolate\";\nimport constant from \"./constant.js\";\nimport number from \"./number.js\";\n\nvar unit = [0, 1];\n\nexport function identity(x) {\n  return x;\n}\n\nfunction normalize(a, b) {\n  return (b -= (a = +a))\n      ? function(x) { return (x - a) / b; }\n      : constant(isNaN(b) ? NaN : 0.5);\n}\n\nfunction clamper(a, b) {\n  var t;\n  if (a > b) t = a, a = b, b = t;\n  return function(x) { return Math.max(a, Math.min(b, x)); };\n}\n\n// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\nfunction bimap(domain, range, interpolate) {\n  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);\n  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\n  return function(x) { return r0(d0(x)); };\n}\n\nfunction polymap(domain, range, interpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1;\n\n  // Reverse descending domains.\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = normalize(domain[i], domain[i + 1]);\n    r[i] = interpolate(range[i], range[i + 1]);\n  }\n\n  return function(x) {\n    var i = bisect(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nexport function copy(source, target) {\n  return target\n      .domain(source.domain())\n      .range(source.range())\n      .interpolate(source.interpolate())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nexport function transformer() {\n  var domain = unit,\n      range = unit,\n      interpolate = interpolateValue,\n      transform,\n      untransform,\n      unknown,\n      clamp = identity,\n      piecewise,\n      output,\n      input;\n\n  function rescale() {\n    var n = Math.min(domain.length, range.length);\n    if (clamp !== identity) clamp = clamper(domain[0], domain[n - 1]);\n    piecewise = n > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));\n  }\n\n  scale.invert = function(y) {\n    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = Array.from(_), interpolate = interpolateRound, rescale();\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;\n  };\n\n  scale.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t, u) {\n    transform = t, untransform = u;\n    return rescale();\n  };\n}\n\nexport default function continuous() {\n  return transformer()(identity, identity);\n}\n"],"names":["unit","identity","x","normalize","a","b","constant","isNaN","NaN","bimap","domain","range","interpolate","d0","d1","r0","r1","polymap","j","Math","min","length","d","Array","r","i","slice","reverse","bisect","copy","source","target","clamp","unknown","transformer","transform","untransform","piecewise","output","input","interpolateValue","rescale","t","n","max","scale","map","invert","y","interpolateNumber","_","arguments","from","number","rangeRound","interpolateRound","u","continuous"],"mappings":"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"}