{"version":3,"file":"floating-ui.core.mjs.js","sources":["../../../../../node_modules/@floating-ui/core/dist/floating-ui.core.mjs"],"sourcesContent":["import { getSideAxis, getAlignmentAxis, getAxisLength, getSide, getAlignment, evaluate, getPaddingObject, rectToClientRect, min, clamp, placements, getAlignmentSides, getOppositeAlignmentPlacement, getOppositePlacement, getExpandedPlacements, getOppositeAxisPlacements, sides, max, getOppositeAxis } from '@floating-ui/utils';\nexport { rectToClientRect } from '@floating-ui/utils';\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const sideAxis = getSideAxis(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const alignLength = getAxisLength(alignmentAxis);\n  const side = getSide(placement);\n  const isVertical = sideAxis === 'y';\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getPaddingObject(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    x,\n    y,\n    width: rects.floating.width,\n    height: rects.floating.height\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements,\n      middlewareData\n    } = state;\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = evaluate(options, state) || {};\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = getPaddingObject(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getAlignmentAxis(placement);\n    const length = getAxisLength(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // If the padding is large enough that it causes the arrow to no longer be\n    // centered, modify the padding so that it is centered.\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n    const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min$1 = minPadding;\n    const max = clientSize - arrowDimensions[length] - maxPadding;\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = clamp(min$1, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. To ensure `shift()` continues to take action,\n    // a single reset is performed when this is true.\n    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max : 0;\n    return {\n      [axis]: coords[axis] + alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset - alignmentOffset,\n        ...(shouldAddOffset && {\n          alignmentOffset\n        })\n      },\n      reset: shouldAddOffset\n    };\n  }\n});\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = placements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const placements$1 = alignment !== undefined || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements$1[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements$1[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements$1[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ?\n        // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n        // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n      // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$arrow, _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n\n      // If a reset by the arrow was caused due to an alignment offset being\n      // added, we should skip any logic now since `flip()` has already done its\n      // work.\n      // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643\n      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      const side = getSide(placement);\n      const initialSideAxis = getSideAxis(initialPlacement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== 'none';\n      if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const sides = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$filter2;\n                const placement = (_overflowsData$filter2 = overflowsData.filter(d => {\n                  if (hasFallbackAxisSideDirection) {\n                    const currentSideAxis = getSideAxis(d.placement);\n                    return currentSideAxis === initialSideAxis ||\n                    // Create a bias to the `y` side axis due to horizontal\n                    // reading directions favoring greater width.\n                    currentSideAxis === 'y';\n                  }\n                  return true;\n                }).map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$filter2[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(state) {\n      const {\n        rects\n      } = state;\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n    prevRect = rect;\n  }\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = evaluate(options, state);\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getPaddingObject(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getSideAxis(placement) === 'y') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n// For type backwards-compatibility, the `OffsetOptions` type was also\n// Derivable.\n\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getSideAxis(placement) === 'y';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state);\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: rawValue.mainAxis || 0,\n    crossAxis: rawValue.crossAxis || 0,\n    alignmentAxis: rawValue.alignmentAxis\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (options) {\n  if (options === void 0) {\n    options = 0;\n  }\n  return {\n    name: 'offset',\n    options,\n    async fn(state) {\n      var _middlewareData$offse, _middlewareData$arrow;\n      const {\n        x,\n        y,\n        placement,\n        middlewareData\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n\n      // If the placement is the same and the arrow caused an alignment offset\n      // then we don't need to change the positioning coordinates.\n      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: {\n          ...diffCoords,\n          placement\n        }\n      };\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const crossAxis = getSideAxis(getSide(placement));\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = clamp(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = clamp(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y,\n          enabled: {\n            [mainAxis]: checkMainAxis,\n            [crossAxis]: checkCrossAxis\n          }\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const crossAxis = getSideAxis(placement);\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = evaluate(offset, state);\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      var _state$middlewareData, _state$middlewareData2;\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const isYAxis = getSideAxis(placement) === 'y';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const maximumClippingHeight = height - overflow.top - overflow.bottom;\n      const maximumClippingWidth = width - overflow.left - overflow.right;\n      const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);\n      const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if ((_state$middlewareData = state.middlewareData.shift) != null && _state$middlewareData.enabled.x) {\n        availableWidth = maximumClippingWidth;\n      }\n      if ((_state$middlewareData2 = state.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {\n        availableHeight = maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isYAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, shift, size };\n"],"names":["computeCoordsFromPlacement","_ref","placement","rtl","reference","floating","sideAxis","getSideAxis","alignmentAxis","getAlignmentAxis","alignLength","getAxisLength","side","getSide","isVertical","commonX","x","width","commonY","y","height","commonAlign","coords","getAlignment","computePosition","async","config","strategy","middleware","platform","validMiddleware","filter","Boolean","isRTL","rects","getElementRects","statefulPlacement","middlewareData","resetCount","i","length","name","fn","nextX","nextY","data","reset","initialPlacement","elements","detectOverflow","state","options","_await$platform$isEle","boundary","rootBoundary","elementContext","altBoundary","padding","evaluate","paddingObject","getPaddingObject","element","clippingClientRect","rectToClientRect","getClippingRect","isElement","contextElement","getDocumentElement","rect","offsetParent","getOffsetParent","offsetScale","getScale","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","top","bottom","left","right","arrow","axis","arrowDimensions","getDimensions","isYAxis","minProp","maxProp","clientProp","endDiff","startDiff","arrowOffsetParent","clientSize","centerToReference","largestPossiblePadding","minPadding","min","maxPadding","min$1","max","center","offset","clamp","shouldAddOffset","alignmentOffset","centerOffset","autoPlacement","_middlewareData$autoP","_middlewareData$autoP2","_placementsThatFitOnE","crossAxis","alignment","allowedPlacements","placements","autoAlignment","detectOverflowOptions","placements$1","undefined","getOppositeAlignmentPlacement","getPlacementList","overflow","currentIndex","index","currentPlacement","alignmentSides","getAlignmentSides","currentOverflows","allOverflows","overflows","nextPlacement","placementsSortedByMostSpace","map","d","slice","reduce","acc","v","sort","a","b","resetPlacement","every","flip","_middlewareData$arrow","_middlewareData$flip","mainAxis","checkMainAxis","checkCrossAxis","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","flipAlignment","initialSideAxis","isBasePlacement","getOppositePlacement","getExpandedPlacements","hasFallbackAxisSideDirection","push","getOppositeAxisPlacements","overflowsData","sides","_middlewareData$flip2","_overflowsData$filter","nextIndex","_overflowsData$filter2","currentSideAxis","getSideOffsets","isAnySideFullyClipped","some","hide","offsets","referenceHiddenOffsets","referenceHidden","escapedOffsets","escaped","getBoundingRect","minX","minY","inline","nativeClientRects","Array","from","getClientRects","clientRects","sortedRects","groups","prevRect","getRectsByLine","fallback","resetRects","getBoundingClientRect","find","firstRect","lastRect","isTop","isLeftSide","maxRight","minLeft","measureRects","_middlewareData$offse","diffCoords","mainAxisMulti","includes","crossAxisMulti","rawValue","convertValueToCoords","shift","limiter","getOppositeAxis","mainAxisCoord","crossAxisCoord","maxSide","limitedCoords","enabled","limitShift","rawOffset","computedOffset","len","limitMin","limitMax","_middlewareData$offse2","isOriginSide","size","_state$middlewareData","_state$middlewareData2","apply","heightSide","widthSide","maximumClippingHeight","maximumClippingWidth","overflowAvailableHeight","overflowAvailableWidth","noShift","availableHeight","availableWidth","xMin","xMax","yMin","yMax","nextDimensions"],"mappings":"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"}