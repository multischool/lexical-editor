{"version":3,"file":"floating-ui.dom.mjs.js","sources":["../../../../../node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs"],"sourcesContent":["import { rectToClientRect, detectOverflow as detectOverflow$1, offset as offset$1, autoPlacement as autoPlacement$1, shift as shift$1, flip as flip$1, size as size$1, hide as hide$1, arrow as arrow$1, inline as inline$1, limitShift as limitShift$1, computePosition as computePosition$1 } from '@floating-ui/core';\nimport { round, createCoords, max, min, floor } from '@floating-ui/utils';\nimport { getComputedStyle, isHTMLElement, isElement, getWindow, isWebKit, getFrameElement, getNodeScroll, getDocumentElement, isTopLayer, getNodeName, isOverflowElement, getOverflowAncestors, getParentNode, isLastTraversableNode, isContainingBlock, isTableElement, getContainingBlock } from '@floating-ui/utils/dom';\nexport { getOverflowAncestors } from '@floating-ui/utils/dom';\n\nfunction getCssDimensions(element) {\n  const css = getComputedStyle(element);\n  // In testing environments, the `width` and `height` properties are empty\n  // strings for SVG elements, returning NaN. Fallback to `0` in this case.\n  let width = parseFloat(css.width) || 0;\n  let height = parseFloat(css.height) || 0;\n  const hasOffset = isHTMLElement(element);\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\n  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;\n  if (shouldFallback) {\n    width = offsetWidth;\n    height = offsetHeight;\n  }\n  return {\n    width,\n    height,\n    $: shouldFallback\n  };\n}\n\nfunction unwrapElement(element) {\n  return !isElement(element) ? element.contextElement : element;\n}\n\nfunction getScale(element) {\n  const domElement = unwrapElement(element);\n  if (!isHTMLElement(domElement)) {\n    return createCoords(1);\n  }\n  const rect = domElement.getBoundingClientRect();\n  const {\n    width,\n    height,\n    $\n  } = getCssDimensions(domElement);\n  let x = ($ ? round(rect.width) : rect.width) / width;\n  let y = ($ ? round(rect.height) : rect.height) / height;\n\n  // 0, NaN, or Infinity should always fallback to 1.\n\n  if (!x || !Number.isFinite(x)) {\n    x = 1;\n  }\n  if (!y || !Number.isFinite(y)) {\n    y = 1;\n  }\n  return {\n    x,\n    y\n  };\n}\n\nconst noOffsets = /*#__PURE__*/createCoords(0);\nfunction getVisualOffsets(element) {\n  const win = getWindow(element);\n  if (!isWebKit() || !win.visualViewport) {\n    return noOffsets;\n  }\n  return {\n    x: win.visualViewport.offsetLeft,\n    y: win.visualViewport.offsetTop\n  };\n}\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {\n    return false;\n  }\n  return isFixed;\n}\n\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n  const clientRect = element.getBoundingClientRect();\n  const domElement = unwrapElement(element);\n  let scale = createCoords(1);\n  if (includeScale) {\n    if (offsetParent) {\n      if (isElement(offsetParent)) {\n        scale = getScale(offsetParent);\n      }\n    } else {\n      scale = getScale(element);\n    }\n  }\n  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);\n  let x = (clientRect.left + visualOffsets.x) / scale.x;\n  let y = (clientRect.top + visualOffsets.y) / scale.y;\n  let width = clientRect.width / scale.x;\n  let height = clientRect.height / scale.y;\n  if (domElement) {\n    const win = getWindow(domElement);\n    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;\n    let currentWin = win;\n    let currentIFrame = getFrameElement(currentWin);\n    while (currentIFrame && offsetParent && offsetWin !== currentWin) {\n      const iframeScale = getScale(currentIFrame);\n      const iframeRect = currentIFrame.getBoundingClientRect();\n      const css = getComputedStyle(currentIFrame);\n      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n      x *= iframeScale.x;\n      y *= iframeScale.y;\n      width *= iframeScale.x;\n      height *= iframeScale.y;\n      x += left;\n      y += top;\n      currentWin = getWindow(currentIFrame);\n      currentIFrame = getFrameElement(currentWin);\n    }\n  }\n  return rectToClientRect({\n    width,\n    height,\n    x,\n    y\n  });\n}\n\n// If <html> has a CSS width greater than the viewport, then this will be\n// incorrect for RTL.\nfunction getWindowScrollBarX(element, rect) {\n  const leftScroll = getNodeScroll(element).scrollLeft;\n  if (!rect) {\n    return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;\n  }\n  return rect.left + leftScroll;\n}\n\nfunction getHTMLOffset(documentElement, scroll, ignoreScrollbarX) {\n  if (ignoreScrollbarX === void 0) {\n    ignoreScrollbarX = false;\n  }\n  const htmlRect = documentElement.getBoundingClientRect();\n  const x = htmlRect.left + scroll.scrollLeft - (ignoreScrollbarX ? 0 :\n  // RTL <body> scrollbar.\n  getWindowScrollBarX(documentElement, htmlRect));\n  const y = htmlRect.top + scroll.scrollTop;\n  return {\n    x,\n    y\n  };\n}\n\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n  let {\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  } = _ref;\n  const isFixed = strategy === 'fixed';\n  const documentElement = getDocumentElement(offsetParent);\n  const topLayer = elements ? isTopLayer(elements.floating) : false;\n  if (offsetParent === documentElement || topLayer && isFixed) {\n    return rect;\n  }\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let scale = createCoords(1);\n  const offsets = createCoords(0);\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent);\n      scale = getScale(offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    }\n  }\n  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll, true) : createCoords(0);\n  return {\n    width: rect.width * scale.x,\n    height: rect.height * scale.y,\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y\n  };\n}\n\nfunction getClientRects(element) {\n  return Array.from(element.getClientRects());\n}\n\n// Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable.\nfunction getDocumentRect(element) {\n  const html = getDocumentElement(element);\n  const scroll = getNodeScroll(element);\n  const body = element.ownerDocument.body;\n  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n  let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n  const y = -scroll.scrollTop;\n  if (getComputedStyle(body).direction === 'rtl') {\n    x += max(html.clientWidth, body.clientWidth) - width;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\nfunction getViewportRect(element, strategy) {\n  const win = getWindow(element);\n  const html = getDocumentElement(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    const visualViewportBased = isWebKit();\n    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\n// Returns the inner client rect, subtracting scrollbars if present.\nfunction getInnerBoundingClientRect(element, strategy) {\n  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');\n  const top = clientRect.top + element.clientTop;\n  const left = clientRect.left + element.clientLeft;\n  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);\n  const width = element.clientWidth * scale.x;\n  const height = element.clientHeight * scale.y;\n  const x = left * scale.x;\n  const y = top * scale.y;\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n  let rect;\n  if (clippingAncestor === 'viewport') {\n    rect = getViewportRect(element, strategy);\n  } else if (clippingAncestor === 'document') {\n    rect = getDocumentRect(getDocumentElement(element));\n  } else if (isElement(clippingAncestor)) {\n    rect = getInnerBoundingClientRect(clippingAncestor, strategy);\n  } else {\n    const visualOffsets = getVisualOffsets(element);\n    rect = {\n      x: clippingAncestor.x - visualOffsets.x,\n      y: clippingAncestor.y - visualOffsets.y,\n      width: clippingAncestor.width,\n      height: clippingAncestor.height\n    };\n  }\n  return rectToClientRect(rect);\n}\nfunction hasFixedPositionAncestor(element, stopNode) {\n  const parentNode = getParentNode(element);\n  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {\n    return false;\n  }\n  return getComputedStyle(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);\n}\n\n// A \"clipping ancestor\" is an `overflow` element with the characteristic of\n// clipping (or hiding) child elements. This returns all clipping ancestors\n// of the given element up the tree.\nfunction getClippingElementAncestors(element, cache) {\n  const cachedResult = cache.get(element);\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let result = getOverflowAncestors(element, [], false).filter(el => isElement(el) && getNodeName(el) !== 'body');\n  let currentContainingBlockComputedStyle = null;\n  const elementIsFixed = getComputedStyle(element).position === 'fixed';\n  let currentNode = elementIsFixed ? getParentNode(element) : element;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    const computedStyle = getComputedStyle(currentNode);\n    const currentNodeIsContaining = isContainingBlock(currentNode);\n    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {\n      currentContainingBlockComputedStyle = null;\n    }\n    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && ['absolute', 'fixed'].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n    if (shouldDropCurrentNode) {\n      // Drop non-containing blocks.\n      result = result.filter(ancestor => ancestor !== currentNode);\n    } else {\n      // Record last containing block for next iteration.\n      currentContainingBlockComputedStyle = computedStyle;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  cache.set(element, result);\n  return result;\n}\n\n// Gets the maximum area that the element is visible in due to any number of\n// clipping ancestors.\nfunction getClippingRect(_ref) {\n  let {\n    element,\n    boundary,\n    rootBoundary,\n    strategy\n  } = _ref;\n  const elementClippingAncestors = boundary === 'clippingAncestors' ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\n  const firstClippingAncestor = clippingAncestors[0];\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n  return {\n    width: clippingRect.right - clippingRect.left,\n    height: clippingRect.bottom - clippingRect.top,\n    x: clippingRect.left,\n    y: clippingRect.top\n  };\n}\n\nfunction getDimensions(element) {\n  const {\n    width,\n    height\n  } = getCssDimensions(element);\n  return {\n    width,\n    height\n  };\n}\n\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  const isFixed = strategy === 'fixed';\n  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = createCoords(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isOffsetParentAnElement) {\n      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } else if (documentElement) {\n      // If the <body> scrollbar appears on the left (e.g. RTL systems). Use\n      // Firefox with layout.scrollbar.side = 3 in about:config to test this.\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);\n  const x = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;\n  const y = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;\n  return {\n    x,\n    y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\nfunction isStaticPositioned(element) {\n  return getComputedStyle(element).position === 'static';\n}\n\nfunction getTrueOffsetParent(element, polyfill) {\n  if (!isHTMLElement(element) || getComputedStyle(element).position === 'fixed') {\n    return null;\n  }\n  if (polyfill) {\n    return polyfill(element);\n  }\n  let rawOffsetParent = element.offsetParent;\n\n  // Firefox returns the <html> element as the offsetParent if it's non-static,\n  // while Chrome and Safari return the <body> element. The <body> element must\n  // be used to perform the correct calculations even if the <html> element is\n  // non-static.\n  if (getDocumentElement(element) === rawOffsetParent) {\n    rawOffsetParent = rawOffsetParent.ownerDocument.body;\n  }\n  return rawOffsetParent;\n}\n\n// Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\nfunction getOffsetParent(element, polyfill) {\n  const win = getWindow(element);\n  if (isTopLayer(element)) {\n    return win;\n  }\n  if (!isHTMLElement(element)) {\n    let svgOffsetParent = getParentNode(element);\n    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {\n      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {\n        return svgOffsetParent;\n      }\n      svgOffsetParent = getParentNode(svgOffsetParent);\n    }\n    return win;\n  }\n  let offsetParent = getTrueOffsetParent(element, polyfill);\n  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {\n    offsetParent = getTrueOffsetParent(offsetParent, polyfill);\n  }\n  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {\n    return win;\n  }\n  return offsetParent || getContainingBlock(element) || win;\n}\n\nconst getElementRects = async function (data) {\n  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n  const getDimensionsFn = this.getDimensions;\n  const floatingDimensions = await getDimensionsFn(data.floating);\n  return {\n    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),\n    floating: {\n      x: 0,\n      y: 0,\n      width: floatingDimensions.width,\n      height: floatingDimensions.height\n    }\n  };\n};\n\nfunction isRTL(element) {\n  return getComputedStyle(element).direction === 'rtl';\n}\n\nconst platform = {\n  convertOffsetParentRelativeRectToViewportRelativeRect,\n  getDocumentElement,\n  getClippingRect,\n  getOffsetParent,\n  getElementRects,\n  getClientRects,\n  getDimensions,\n  getScale,\n  isElement,\n  isRTL\n};\n\nfunction rectsAreEqual(a, b) {\n  return a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height;\n}\n\n// https://samthor.au/2021/observing-dom/\nfunction observeMove(element, onMove) {\n  let io = null;\n  let timeoutId;\n  const root = getDocumentElement(element);\n  function cleanup() {\n    var _io;\n    clearTimeout(timeoutId);\n    (_io = io) == null || _io.disconnect();\n    io = null;\n  }\n  function refresh(skip, threshold) {\n    if (skip === void 0) {\n      skip = false;\n    }\n    if (threshold === void 0) {\n      threshold = 1;\n    }\n    cleanup();\n    const elementRectForRootMargin = element.getBoundingClientRect();\n    const {\n      left,\n      top,\n      width,\n      height\n    } = elementRectForRootMargin;\n    if (!skip) {\n      onMove();\n    }\n    if (!width || !height) {\n      return;\n    }\n    const insetTop = floor(top);\n    const insetRight = floor(root.clientWidth - (left + width));\n    const insetBottom = floor(root.clientHeight - (top + height));\n    const insetLeft = floor(left);\n    const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n    const options = {\n      rootMargin,\n      threshold: max(0, min(1, threshold)) || 1\n    };\n    let isFirstUpdate = true;\n    function handleObserve(entries) {\n      const ratio = entries[0].intersectionRatio;\n      if (ratio !== threshold) {\n        if (!isFirstUpdate) {\n          return refresh();\n        }\n        if (!ratio) {\n          // If the reference is clipped, the ratio is 0. Throttle the refresh\n          // to prevent an infinite loop of updates.\n          timeoutId = setTimeout(() => {\n            refresh(false, 1e-7);\n          }, 1000);\n        } else {\n          refresh(false, ratio);\n        }\n      }\n      if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())) {\n        // It's possible that even though the ratio is reported as 1, the\n        // element is not actually fully within the IntersectionObserver's root\n        // area anymore. This can happen under performance constraints. This may\n        // be a bug in the browser's IntersectionObserver implementation. To\n        // work around this, we compare the element's bounding rect now with\n        // what it was at the time we created the IntersectionObserver. If they\n        // are not equal then the element moved, so we refresh.\n        refresh();\n      }\n      isFirstUpdate = false;\n    }\n\n    // Older browsers don't support a `document` as the root and will throw an\n    // error.\n    try {\n      io = new IntersectionObserver(handleObserve, {\n        ...options,\n        // Handle <iframe>s\n        root: root.ownerDocument\n      });\n    } catch (e) {\n      io = new IntersectionObserver(handleObserve, options);\n    }\n    io.observe(element);\n  }\n  refresh(true);\n  return cleanup;\n}\n\n/**\n * Automatically updates the position of the floating element when necessary.\n * Should only be called when the floating element is mounted on the DOM or\n * visible on the screen.\n * @returns cleanup function that should be invoked when the floating element is\n * removed from the DOM or hidden from the screen.\n * @see https://floating-ui.com/docs/autoUpdate\n */\nfunction autoUpdate(reference, floating, update, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    ancestorScroll = true,\n    ancestorResize = true,\n    elementResize = typeof ResizeObserver === 'function',\n    layoutShift = typeof IntersectionObserver === 'function',\n    animationFrame = false\n  } = options;\n  const referenceEl = unwrapElement(reference);\n  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];\n  ancestors.forEach(ancestor => {\n    ancestorScroll && ancestor.addEventListener('scroll', update, {\n      passive: true\n    });\n    ancestorResize && ancestor.addEventListener('resize', update);\n  });\n  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n  let reobserveFrame = -1;\n  let resizeObserver = null;\n  if (elementResize) {\n    resizeObserver = new ResizeObserver(_ref => {\n      let [firstEntry] = _ref;\n      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n        // Prevent update loops when using the `size` middleware.\n        // https://github.com/floating-ui/floating-ui/issues/1740\n        resizeObserver.unobserve(floating);\n        cancelAnimationFrame(reobserveFrame);\n        reobserveFrame = requestAnimationFrame(() => {\n          var _resizeObserver;\n          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);\n        });\n      }\n      update();\n    });\n    if (referenceEl && !animationFrame) {\n      resizeObserver.observe(referenceEl);\n    }\n    resizeObserver.observe(floating);\n  }\n  let frameId;\n  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n  if (animationFrame) {\n    frameLoop();\n  }\n  function frameLoop() {\n    const nextRefRect = getBoundingClientRect(reference);\n    if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {\n      update();\n    }\n    prevRefRect = nextRefRect;\n    frameId = requestAnimationFrame(frameLoop);\n  }\n  update();\n  return () => {\n    var _resizeObserver2;\n    ancestors.forEach(ancestor => {\n      ancestorScroll && ancestor.removeEventListener('scroll', update);\n      ancestorResize && ancestor.removeEventListener('resize', update);\n    });\n    cleanupIo == null || cleanupIo();\n    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();\n    resizeObserver = null;\n    if (animationFrame) {\n      cancelAnimationFrame(frameId);\n    }\n  };\n}\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nconst detectOverflow = detectOverflow$1;\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = offset$1;\n\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = autoPlacement$1;\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = shift$1;\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = flip$1;\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = size$1;\n\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = hide$1;\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = arrow$1;\n\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = inline$1;\n\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = limitShift$1;\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n */\nconst computePosition = (reference, floating, options) => {\n  // This caches the expensive `getClippingElementAncestors` function so that\n  // multiple lifecycle resets re-use the same result. It only lives for a\n  // single call. If other functions become expensive, we can add them as well.\n  const cache = new Map();\n  const mergedOptions = {\n    platform,\n    ...options\n  };\n  const platformWithCache = {\n    ...mergedOptions.platform,\n    _c: cache\n  };\n  return computePosition$1(reference, floating, {\n    ...mergedOptions,\n    platform: platformWithCache\n  });\n};\n\nexport { arrow, autoPlacement, autoUpdate, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, platform, shift, size };\n"],"names":["getCssDimensions","element","css","getComputedStyle","width","parseFloat","height","hasOffset","isHTMLElement","offsetWidth","offsetHeight","shouldFallback","round","$","unwrapElement","isElement","contextElement","getScale","domElement","createCoords","rect","getBoundingClientRect","x","y","Number","isFinite","noOffsets","getVisualOffsets","win","getWindow","isWebKit","visualViewport","offsetLeft","offsetTop","includeScale","isFixedStrategy","offsetParent","clientRect","scale","visualOffsets","isFixed","floatingOffsetParent","shouldAddVisualOffsets","left","top","offsetWin","currentWin","currentIFrame","getFrameElement","iframeScale","iframeRect","clientLeft","paddingLeft","clientTop","paddingTop","rectToClientRect","getWindowScrollBarX","leftScroll","getNodeScroll","scrollLeft","getDocumentElement","getHTMLOffset","documentElement","scroll","ignoreScrollbarX","htmlRect","scrollTop","getClientRectFromClippingAncestor","clippingAncestor","strategy","html","clientWidth","clientHeight","visualViewportBased","getViewportRect","body","ownerDocument","max","scrollWidth","scrollHeight","direction","getDocumentRect","getInnerBoundingClientRect","hasFixedPositionAncestor","stopNode","parentNode","getParentNode","isLastTraversableNode","position","getRectRelativeToOffsetParent","isOffsetParentAnElement","offsets","getNodeName","isOverflowElement","offsetRect","htmlOffset","isStaticPositioned","getTrueOffsetParent","polyfill","rawOffsetParent","getOffsetParent","isTopLayer","svgOffsetParent","isTableElement","isContainingBlock","getContainingBlock","platform","convertOffsetParentRelativeRectToViewportRelativeRect","_ref","elements","topLayer","floating","getClippingRect","boundary","rootBoundary","clippingAncestors","cache","cachedResult","get","result","getOverflowAncestors","filter","el","currentContainingBlockComputedStyle","elementIsFixed","currentNode","computedStyle","currentNodeIsContaining","includes","ancestor","set","getClippingElementAncestors","this","_c","concat","firstClippingAncestor","clippingRect","reduce","accRect","right","min","bottom","getElementRects","async","data","getOffsetParentFn","getDimensionsFn","getDimensions","floatingDimensions","reference","getClientRects","Array","from","isRTL","rectsAreEqual","a","b","autoUpdate","update","options","ancestorScroll","ancestorResize","elementResize","ResizeObserver","layoutShift","IntersectionObserver","animationFrame","referenceEl","ancestors","forEach","addEventListener","passive","cleanupIo","onMove","timeoutId","io","root","cleanup","_io","clearTimeout","disconnect","refresh","skip","threshold","elementRectForRootMargin","rootMargin","floor","isFirstUpdate","handleObserve","entries","ratio","intersectionRatio","setTimeout","e","observe","observeMove","frameId","reobserveFrame","resizeObserver","firstEntry","target","unobserve","cancelAnimationFrame","requestAnimationFrame","_resizeObserver","prevRefRect","frameLoop","nextRefRect","_resizeObserver2","removeEventListener","offset","offset$1","shift","shift$1","flip","flip$1","size","size$1","hide","hide$1","arrow","arrow$1","limitShift","limitShift$1","computePosition","Map","mergedOptions","platformWithCache","computePosition$1"],"mappings":"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"}