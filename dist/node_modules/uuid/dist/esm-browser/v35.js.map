{"version":3,"file":"v35.js","sources":["../../../../../node_modules/uuid/dist/esm-browser/v35.js"],"sourcesContent":["import { unsafeStringify } from './stringify.js';\nimport parse from './parse.js';\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nexport const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function v35(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    var _namespace;\n\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n\n    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return unsafeStringify(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}"],"names":["DNS","URL","v35","name","version","hashfunc","generateUUID","value","namespace","buf","offset","_namespace","str","unescape","encodeURIComponent","bytes","i","length","push","charCodeAt","stringToBytes","parse","TypeError","Uint8Array","set","unsafeStringify","err"],"mappings":"2EAeY,MAACA,EAAM,uCACNC,EAAM,uCACJ,SAASC,EAAIC,EAAMC,EAASC,GACzC,SAASC,EAAaC,EAAOC,EAAWC,EAAKC,GAC3C,IAAIC,EAUJ,GARqB,iBAAVJ,IACTA,EAnBN,SAAuBK,GACrBA,EAAMC,SAASC,mBAAmBF,IAElC,MAAMG,EAAQ,GAEd,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAIK,SAAUD,EAChCD,EAAMG,KAAKN,EAAIO,WAAWH,IAG5B,OAAOD,CACT,CAScK,CAAcb,IAGC,iBAAdC,IACTA,EAAYa,EAAMb,IAG8E,MAAhE,QAA5BG,EAAaH,SAAsC,IAAfG,OAAwB,EAASA,EAAWM,QACpF,MAAMK,UAAU,oEAMlB,IAAIP,EAAQ,IAAIQ,WAAW,GAAKhB,EAAMU,QAOtC,GANAF,EAAMS,IAAIhB,GACVO,EAAMS,IAAIjB,EAAOC,EAAUS,QAC3BF,EAAQV,EAASU,GACjBA,EAAM,GAAgB,GAAXA,EAAM,GAAYX,EAC7BW,EAAM,GAAgB,GAAXA,EAAM,GAAY,IAEzBN,EAAK,CACPC,EAASA,GAAU,EAEnB,IAAK,IAAIM,EAAI,EAAGA,EAAI,KAAMA,EACxBP,EAAIC,EAASM,GAAKD,EAAMC,GAG1B,OAAOP,CACR,CAED,OAAOgB,EAAgBV,EACxB,CAGD,IACET,EAAaH,KAAOA,CACxB,CAAI,MAAOuB,GAAO,CAKhB,OAFApB,EAAaN,IAAMA,EACnBM,EAAaL,IAAMA,EACZK,CACT"}