{"version":3,"file":"useMergeRef.js","sources":["../../../../../node_modules/use-callback-ref/dist/es2015/useMergeRef.js"],"sourcesContent":["import * as React from 'react';\nimport { assignRef } from './assignRef';\nimport { useCallbackRef } from './useRef';\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\nvar currentValues = new WeakMap();\n/**\n * Merges two or more refs together providing a single interface to set their value\n * @param {RefObject|Ref} refs\n * @returns {MutableRefObject} - a new ref, which translates all changes to {refs}\n *\n * @see {@link mergeRefs} a version without buit-in memoization\n * @see https://github.com/theKashey/use-callback-ref#usemergerefs\n * @example\n * const Component = React.forwardRef((props, ref) => {\n *   const ownRef = useRef();\n *   const domRef = useMergeRefs([ref, ownRef]); // ðŸ‘ˆ merge together\n *   return <div ref={domRef}>...</div>\n * }\n */\nexport function useMergeRefs(refs, defaultValue) {\n    var callbackRef = useCallbackRef(defaultValue || null, function (newValue) {\n        return refs.forEach(function (ref) { return assignRef(ref, newValue); });\n    });\n    // handle refs changes - added or removed\n    useIsomorphicLayoutEffect(function () {\n        var oldValue = currentValues.get(callbackRef);\n        if (oldValue) {\n            var prevRefs_1 = new Set(oldValue);\n            var nextRefs_1 = new Set(refs);\n            var current_1 = callbackRef.current;\n            prevRefs_1.forEach(function (ref) {\n                if (!nextRefs_1.has(ref)) {\n                    assignRef(ref, null);\n                }\n            });\n            nextRefs_1.forEach(function (ref) {\n                if (!prevRefs_1.has(ref)) {\n                    assignRef(ref, current_1);\n                }\n            });\n        }\n        currentValues.set(callbackRef, refs);\n    }, [refs]);\n    return callbackRef;\n}\n"],"names":["useIsomorphicLayoutEffect","window","React","useLayoutEffect","useEffect","currentValues","WeakMap","useMergeRefs","refs","defaultValue","callbackRef","useCallbackRef","newValue","forEach","ref","assignRef","oldValue","get","prevRefs_1","Set","nextRefs_1","current_1","current","has","set"],"mappings":"gHAGA,IAAIA,EAA8C,oBAAXC,OAAyBC,EAAMC,gBAAkBD,EAAME,UAC1FC,EAAgB,IAAIC,QAejB,SAASC,EAAaC,EAAMC,GAC/B,IAAIC,EAAcC,EAAeF,GAAgB,MAAM,SAAUG,GAC7D,OAAOJ,EAAKK,SAAQ,SAAUC,GAAO,OAAOC,EAAUD,EAAKF,EAAU,GAC7E,IAqBI,OAnBAZ,GAA0B,WACtB,IAAIgB,EAAWX,EAAcY,IAAIP,GACjC,GAAIM,EAAU,CACV,IAAIE,EAAa,IAAIC,IAAIH,GACrBI,EAAa,IAAID,IAAIX,GACrBa,EAAYX,EAAYY,QAC5BJ,EAAWL,SAAQ,SAAUC,GACpBM,EAAWG,IAAIT,IAChBC,EAAUD,EAAK,KAEnC,IACYM,EAAWP,SAAQ,SAAUC,GACpBI,EAAWK,IAAIT,IAChBC,EAAUD,EAAKO,EAEnC,GACS,CACDhB,EAAcmB,IAAId,EAAaF,EACvC,GAAO,CAACA,IACGE,CACX"}