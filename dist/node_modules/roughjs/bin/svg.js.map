{"version":3,"file":"svg.js","sources":["../../../../node_modules/roughjs/bin/svg.js"],"sourcesContent":["import { SVGNS } from './core';\nimport { RoughGenerator } from './generator';\nexport class RoughSVG {\n    constructor(svg, config) {\n        this.svg = svg;\n        this.gen = new RoughGenerator(config);\n    }\n    draw(drawable) {\n        const sets = drawable.sets || [];\n        const o = drawable.options || this.getDefaultOptions();\n        const doc = this.svg.ownerDocument || window.document;\n        const g = doc.createElementNS(SVGNS, 'g');\n        const precision = drawable.options.fixedDecimalPlaceDigits;\n        for (const drawing of sets) {\n            let path = null;\n            switch (drawing.type) {\n                case 'path': {\n                    path = doc.createElementNS(SVGNS, 'path');\n                    path.setAttribute('d', this.opsToPath(drawing, precision));\n                    path.setAttribute('stroke', o.stroke);\n                    path.setAttribute('stroke-width', o.strokeWidth + '');\n                    path.setAttribute('fill', 'none');\n                    if (o.strokeLineDash) {\n                        path.setAttribute('stroke-dasharray', o.strokeLineDash.join(' ').trim());\n                    }\n                    if (o.strokeLineDashOffset) {\n                        path.setAttribute('stroke-dashoffset', `${o.strokeLineDashOffset}`);\n                    }\n                    break;\n                }\n                case 'fillPath': {\n                    path = doc.createElementNS(SVGNS, 'path');\n                    path.setAttribute('d', this.opsToPath(drawing, precision));\n                    path.setAttribute('stroke', 'none');\n                    path.setAttribute('stroke-width', '0');\n                    path.setAttribute('fill', o.fill || '');\n                    if (drawable.shape === 'curve' || drawable.shape === 'polygon') {\n                        path.setAttribute('fill-rule', 'evenodd');\n                    }\n                    break;\n                }\n                case 'fillSketch': {\n                    path = this.fillSketch(doc, drawing, o);\n                    break;\n                }\n            }\n            if (path) {\n                g.appendChild(path);\n            }\n        }\n        return g;\n    }\n    fillSketch(doc, drawing, o) {\n        let fweight = o.fillWeight;\n        if (fweight < 0) {\n            fweight = o.strokeWidth / 2;\n        }\n        const path = doc.createElementNS(SVGNS, 'path');\n        path.setAttribute('d', this.opsToPath(drawing, o.fixedDecimalPlaceDigits));\n        path.setAttribute('stroke', o.fill || '');\n        path.setAttribute('stroke-width', fweight + '');\n        path.setAttribute('fill', 'none');\n        if (o.fillLineDash) {\n            path.setAttribute('stroke-dasharray', o.fillLineDash.join(' ').trim());\n        }\n        if (o.fillLineDashOffset) {\n            path.setAttribute('stroke-dashoffset', `${o.fillLineDashOffset}`);\n        }\n        return path;\n    }\n    get generator() {\n        return this.gen;\n    }\n    getDefaultOptions() {\n        return this.gen.defaultOptions;\n    }\n    opsToPath(drawing, fixedDecimalPlaceDigits) {\n        return this.gen.opsToPath(drawing, fixedDecimalPlaceDigits);\n    }\n    line(x1, y1, x2, y2, options) {\n        const d = this.gen.line(x1, y1, x2, y2, options);\n        return this.draw(d);\n    }\n    rectangle(x, y, width, height, options) {\n        const d = this.gen.rectangle(x, y, width, height, options);\n        return this.draw(d);\n    }\n    ellipse(x, y, width, height, options) {\n        const d = this.gen.ellipse(x, y, width, height, options);\n        return this.draw(d);\n    }\n    circle(x, y, diameter, options) {\n        const d = this.gen.circle(x, y, diameter, options);\n        return this.draw(d);\n    }\n    linearPath(points, options) {\n        const d = this.gen.linearPath(points, options);\n        return this.draw(d);\n    }\n    polygon(points, options) {\n        const d = this.gen.polygon(points, options);\n        return this.draw(d);\n    }\n    arc(x, y, width, height, start, stop, closed = false, options) {\n        const d = this.gen.arc(x, y, width, height, start, stop, closed, options);\n        return this.draw(d);\n    }\n    curve(points, options) {\n        const d = this.gen.curve(points, options);\n        return this.draw(d);\n    }\n    path(d, options) {\n        const drawing = this.gen.path(d, options);\n        return this.draw(drawing);\n    }\n}\n"],"names":["RoughSVG","constructor","svg","config","this","gen","RoughGenerator","draw","drawable","sets","o","options","getDefaultOptions","doc","ownerDocument","window","document","g","createElementNS","SVGNS","precision","fixedDecimalPlaceDigits","drawing","path","type","setAttribute","opsToPath","stroke","strokeWidth","strokeLineDash","join","trim","strokeLineDashOffset","fill","shape","fillSketch","appendChild","fweight","fillWeight","fillLineDash","fillLineDashOffset","generator","defaultOptions","line","x1","y1","x2","y2","d","rectangle","x","y","width","height","ellipse","circle","diameter","linearPath","points","polygon","arc","start","stop","closed","curve"],"mappings":"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"}