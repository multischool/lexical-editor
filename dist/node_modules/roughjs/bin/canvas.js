import{RoughGenerator as e}from"./generator.js";class t{constructor(t,s){this.canvas=t,this.ctx=this.canvas.getContext("2d"),this.gen=new e(s)}draw(e){const t=e.sets||[],s=e.options||this.getDefaultOptions(),i=this.ctx,n=e.options.fixedDecimalPlaceDigits;for(const r of t)switch(r.type){case"path":i.save(),i.strokeStyle="none"===s.stroke?"transparent":s.stroke,i.lineWidth=s.strokeWidth,s.strokeLineDash&&i.setLineDash(s.strokeLineDash),s.strokeLineDashOffset&&(i.lineDashOffset=s.strokeLineDashOffset),this._drawToContext(i,r,n),i.restore();break;case"fillPath":{i.save(),i.fillStyle=s.fill||"";const t="curve"===e.shape||"polygon"===e.shape||"path"===e.shape?"evenodd":"nonzero";this._drawToContext(i,r,n,t),i.restore();break}case"fillSketch":this.fillSketch(i,r,s)}}fillSketch(e,t,s){let i=s.fillWeight;i<0&&(i=s.strokeWidth/2),e.save(),s.fillLineDash&&e.setLineDash(s.fillLineDash),s.fillLineDashOffset&&(e.lineDashOffset=s.fillLineDashOffset),e.strokeStyle=s.fill||"",e.lineWidth=i,this._drawToContext(e,t,s.fixedDecimalPlaceDigits),e.restore()}_drawToContext(e,t,s,i="nonzero"){e.beginPath();for(const i of t.ops){const t="number"==typeof s&&s>=0?i.data.map((e=>+e.toFixed(s))):i.data;switch(i.op){case"move":e.moveTo(t[0],t[1]);break;case"bcurveTo":e.bezierCurveTo(t[0],t[1],t[2],t[3],t[4],t[5]);break;case"lineTo":e.lineTo(t[0],t[1])}}"fillPath"===t.type?e.fill(i):e.stroke()}get generator(){return this.gen}getDefaultOptions(){return this.gen.defaultOptions}line(e,t,s,i,n){const r=this.gen.line(e,t,s,i,n);return this.draw(r),r}rectangle(e,t,s,i,n){const r=this.gen.rectangle(e,t,s,i,n);return this.draw(r),r}ellipse(e,t,s,i,n){const r=this.gen.ellipse(e,t,s,i,n);return this.draw(r),r}circle(e,t,s,i){const n=this.gen.circle(e,t,s,i);return this.draw(n),n}linearPath(e,t){const s=this.gen.linearPath(e,t);return this.draw(s),s}polygon(e,t){const s=this.gen.polygon(e,t);return this.draw(s),s}arc(e,t,s,i,n,r,a=!1,o){const h=this.gen.arc(e,t,s,i,n,r,a,o);return this.draw(h),h}curve(e,t){const s=this.gen.curve(e,t);return this.draw(s),s}path(e,t){const s=this.gen.path(e,t);return this.draw(s),s}}export{t as RoughCanvas};
//# sourceMappingURL=canvas.js.map
