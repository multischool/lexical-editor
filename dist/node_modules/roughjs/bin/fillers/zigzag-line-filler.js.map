{"version":3,"file":"zigzag-line-filler.js","sources":["../../../../../node_modules/roughjs/bin/fillers/zigzag-line-filler.js"],"sourcesContent":["import { lineLength } from '../geometry';\nimport { polygonHachureLines } from './scan-line-hachure';\nexport class ZigZagLineFiller {\n    constructor(helper) {\n        this.helper = helper;\n    }\n    fillPolygons(polygonList, o) {\n        const gap = o.hachureGap < 0 ? (o.strokeWidth * 4) : o.hachureGap;\n        const zo = o.zigzagOffset < 0 ? gap : o.zigzagOffset;\n        o = Object.assign({}, o, { hachureGap: gap + zo });\n        const lines = polygonHachureLines(polygonList, o);\n        return { type: 'fillSketch', ops: this.zigzagLines(lines, zo, o) };\n    }\n    zigzagLines(lines, zo, o) {\n        const ops = [];\n        lines.forEach((line) => {\n            const length = lineLength(line);\n            const count = Math.round(length / (2 * zo));\n            let p1 = line[0];\n            let p2 = line[1];\n            if (p1[0] > p2[0]) {\n                p1 = line[1];\n                p2 = line[0];\n            }\n            const alpha = Math.atan((p2[1] - p1[1]) / (p2[0] - p1[0]));\n            for (let i = 0; i < count; i++) {\n                const lstart = i * 2 * zo;\n                const lend = (i + 1) * 2 * zo;\n                const dz = Math.sqrt(2 * Math.pow(zo, 2));\n                const start = [p1[0] + (lstart * Math.cos(alpha)), p1[1] + lstart * Math.sin(alpha)];\n                const end = [p1[0] + (lend * Math.cos(alpha)), p1[1] + (lend * Math.sin(alpha))];\n                const middle = [start[0] + dz * Math.cos(alpha + Math.PI / 4), start[1] + dz * Math.sin(alpha + Math.PI / 4)];\n                ops.push(...this.helper.doubleLineOps(start[0], start[1], middle[0], middle[1], o), ...this.helper.doubleLineOps(middle[0], middle[1], end[0], end[1], o));\n            }\n        });\n        return ops;\n    }\n}\n"],"names":["ZigZagLineFiller","constructor","helper","this","fillPolygons","polygonList","o","gap","hachureGap","strokeWidth","zo","zigzagOffset","Object","assign","lines","polygonHachureLines","type","ops","zigzagLines","forEach","line","length","lineLength","count","Math","round","p1","p2","alpha","atan","i","lstart","lend","dz","sqrt","pow","start","cos","sin","end","middle","PI","push","doubleLineOps"],"mappings":"yGAEO,MAAMA,EACT,WAAAC,CAAYC,GACRC,KAAKD,OAASA,CACjB,CACD,YAAAE,CAAaC,EAAaC,GACtB,MAAMC,EAAMD,EAAEE,WAAa,EAAqB,EAAhBF,EAAEG,YAAmBH,EAAEE,WACjDE,EAAKJ,EAAEK,aAAe,EAAIJ,EAAMD,EAAEK,aACxCL,EAAIM,OAAOC,OAAO,GAAIP,EAAG,CAAEE,WAAYD,EAAMG,IAC7C,MAAMI,EAAQC,EAAoBV,EAAaC,GAC/C,MAAO,CAAEU,KAAM,aAAcC,IAAKd,KAAKe,YAAYJ,EAAOJ,EAAIJ,GACjE,CACD,WAAAY,CAAYJ,EAAOJ,EAAIJ,GACnB,MAAMW,EAAM,GAqBZ,OApBAH,EAAMK,SAASC,IACX,MAAMC,EAASC,EAAWF,GACpBG,EAAQC,KAAKC,MAAMJ,GAAU,EAAIX,IACvC,IAAIgB,EAAKN,EAAK,GACVO,EAAKP,EAAK,GACVM,EAAG,GAAKC,EAAG,KACXD,EAAKN,EAAK,GACVO,EAAKP,EAAK,IAEd,MAAMQ,EAAQJ,KAAKK,MAAMF,EAAG,GAAKD,EAAG,KAAOC,EAAG,GAAKD,EAAG,KACtD,IAAK,IAAII,EAAI,EAAGA,EAAIP,EAAOO,IAAK,CAC5B,MAAMC,EAAa,EAAJD,EAAQpB,EACjBsB,EAAiB,GAATF,EAAI,GAASpB,EACrBuB,EAAKT,KAAKU,KAAK,EAAIV,KAAKW,IAAIzB,EAAI,IAChC0B,EAAQ,CAACV,EAAG,GAAMK,EAASP,KAAKa,IAAIT,GAASF,EAAG,GAAKK,EAASP,KAAKc,IAAIV,IACvEW,EAAM,CAACb,EAAG,GAAMM,EAAOR,KAAKa,IAAIT,GAASF,EAAG,GAAMM,EAAOR,KAAKc,IAAIV,IAClEY,EAAS,CAACJ,EAAM,GAAKH,EAAKT,KAAKa,IAAIT,EAAQJ,KAAKiB,GAAK,GAAIL,EAAM,GAAKH,EAAKT,KAAKc,IAAIV,EAAQJ,KAAKiB,GAAK,IAC1GxB,EAAIyB,QAAQvC,KAAKD,OAAOyC,cAAcP,EAAM,GAAIA,EAAM,GAAII,EAAO,GAAIA,EAAO,GAAIlC,MAAOH,KAAKD,OAAOyC,cAAcH,EAAO,GAAIA,EAAO,GAAID,EAAI,GAAIA,EAAI,GAAIjC,GAC1J,KAEEW,CACV"}