import{lineLength as t}from"../geometry.js";import{polygonHachureLines as s}from"./scan-line-hachure.js";class h{constructor(t){this.helper=t}fillPolygons(t,h){const e=h.hachureGap<0?4*h.strokeWidth:h.hachureGap,a=h.zigzagOffset<0?e:h.zigzagOffset;h=Object.assign({},h,{hachureGap:e+a});const o=s(t,h);return{type:"fillSketch",ops:this.zigzagLines(o,a,h)}}zigzagLines(s,h,e){const a=[];return s.forEach((s=>{const o=t(s),r=Math.round(o/(2*h));let i=s[0],n=s[1];i[0]>n[0]&&(i=s[1],n=s[0]);const c=Math.atan((n[1]-i[1])/(n[0]-i[0]));for(let t=0;t<r;t++){const s=2*t*h,o=2*(t+1)*h,r=Math.sqrt(2*Math.pow(h,2)),n=[i[0]+s*Math.cos(c),i[1]+s*Math.sin(c)],p=[i[0]+o*Math.cos(c),i[1]+o*Math.sin(c)],l=[n[0]+r*Math.cos(c+Math.PI/4),n[1]+r*Math.sin(c+Math.PI/4)];a.push(...this.helper.doubleLineOps(n[0],n[1],l[0],l[1],e),...this.helper.doubleLineOps(l[0],l[1],p[0],p[1],e))}})),a}}export{h as ZigZagLineFiller};
//# sourceMappingURL=zigzag-line-filler.js.map
