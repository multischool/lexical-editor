import{lineLength as t}from"../geometry.js";import{polygonHachureLines as e}from"./scan-line-hachure.js";class s{constructor(t){this.helper=t}fillPolygons(t,s){s=Object.assign({},s,{hachureAngle:0});const o=e(t,s);return this.dotsOnLines(o,s)}dotsOnLines(e,s){const o=[];let r=s.hachureGap;r<0&&(r=4*s.strokeWidth),r=Math.max(r,.1);let h=s.fillWeight;h<0&&(h=s.strokeWidth/2);const n=r/4;for(const i of e){const e=t(i),l=e/r,c=Math.ceil(l)-1,a=e-c*r,p=(i[0][0]+i[1][0])/2-r/4,m=Math.min(i[0][1],i[1][1]);for(let t=0;t<c;t++){const e=m+a+t*r,i=p-n+2*Math.random()*n,l=e-n+2*Math.random()*n,c=this.helper.ellipse(i,l,h,h,s);o.push(...c.ops)}}return{type:"fillSketch",ops:o}}}export{s as DotFiller};
//# sourceMappingURL=dot-filler.js.map
