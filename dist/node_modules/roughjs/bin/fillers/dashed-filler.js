import{lineLength as t}from"../geometry.js";import{polygonHachureLines as h}from"./scan-line-hachure.js";class s{constructor(t){this.helper=t}fillPolygons(t,s){const a=h(t,s);return{type:"fillSketch",ops:this.dashedLine(a,s)}}dashedLine(h,s){const a=s.dashOffset<0?s.hachureGap<0?4*s.strokeWidth:s.hachureGap:s.dashOffset,e=s.dashGap<0?s.hachureGap<0?4*s.strokeWidth:s.hachureGap:s.dashGap,o=[];return h.forEach((h=>{const r=t(h),c=Math.floor(r/(a+e)),n=(r+e-c*(a+e))/2;let i=h[0],p=h[1];i[0]>p[0]&&(i=h[1],p=h[0]);const l=Math.atan((p[1]-i[1])/(p[0]-i[0]));for(let t=0;t<c;t++){const h=t*(a+e),r=h+a,c=[i[0]+h*Math.cos(l)+n*Math.cos(l),i[1]+h*Math.sin(l)+n*Math.sin(l)],p=[i[0]+r*Math.cos(l)+n*Math.cos(l),i[1]+r*Math.sin(l)+n*Math.sin(l)];o.push(...this.helper.doubleLineOps(c[0],c[1],p[0],p[1],s))}})),o}}export{s as DashedFiller};
//# sourceMappingURL=dashed-filler.js.map
