{"version":3,"file":"dashed-filler.js","sources":["../../../../../node_modules/roughjs/bin/fillers/dashed-filler.js"],"sourcesContent":["import { lineLength } from '../geometry';\nimport { polygonHachureLines } from './scan-line-hachure';\nexport class DashedFiller {\n    constructor(helper) {\n        this.helper = helper;\n    }\n    fillPolygons(polygonList, o) {\n        const lines = polygonHachureLines(polygonList, o);\n        return { type: 'fillSketch', ops: this.dashedLine(lines, o) };\n    }\n    dashedLine(lines, o) {\n        const offset = o.dashOffset < 0 ? (o.hachureGap < 0 ? (o.strokeWidth * 4) : o.hachureGap) : o.dashOffset;\n        const gap = o.dashGap < 0 ? (o.hachureGap < 0 ? (o.strokeWidth * 4) : o.hachureGap) : o.dashGap;\n        const ops = [];\n        lines.forEach((line) => {\n            const length = lineLength(line);\n            const count = Math.floor(length / (offset + gap));\n            const startOffset = (length + gap - (count * (offset + gap))) / 2;\n            let p1 = line[0];\n            let p2 = line[1];\n            if (p1[0] > p2[0]) {\n                p1 = line[1];\n                p2 = line[0];\n            }\n            const alpha = Math.atan((p2[1] - p1[1]) / (p2[0] - p1[0]));\n            for (let i = 0; i < count; i++) {\n                const lstart = i * (offset + gap);\n                const lend = lstart + offset;\n                const start = [p1[0] + (lstart * Math.cos(alpha)) + (startOffset * Math.cos(alpha)), p1[1] + lstart * Math.sin(alpha) + (startOffset * Math.sin(alpha))];\n                const end = [p1[0] + (lend * Math.cos(alpha)) + (startOffset * Math.cos(alpha)), p1[1] + (lend * Math.sin(alpha)) + (startOffset * Math.sin(alpha))];\n                ops.push(...this.helper.doubleLineOps(start[0], start[1], end[0], end[1], o));\n            }\n        });\n        return ops;\n    }\n}\n"],"names":["DashedFiller","constructor","helper","this","fillPolygons","polygonList","o","lines","polygonHachureLines","type","ops","dashedLine","offset","dashOffset","hachureGap","strokeWidth","gap","dashGap","forEach","line","length","lineLength","count","Math","floor","startOffset","p1","p2","alpha","atan","i","lstart","lend","start","cos","sin","end","push","doubleLineOps"],"mappings":"yGAEO,MAAMA,EACT,WAAAC,CAAYC,GACRC,KAAKD,OAASA,CACjB,CACD,YAAAE,CAAaC,EAAaC,GACtB,MAAMC,EAAQC,EAAoBH,EAAaC,GAC/C,MAAO,CAAEG,KAAM,aAAcC,IAAKP,KAAKQ,WAAWJ,EAAOD,GAC5D,CACD,UAAAK,CAAWJ,EAAOD,GACd,MAAMM,EAASN,EAAEO,WAAa,EAAKP,EAAEQ,WAAa,EAAqB,EAAhBR,EAAES,YAAmBT,EAAEQ,WAAcR,EAAEO,WACxFG,EAAMV,EAAEW,QAAU,EAAKX,EAAEQ,WAAa,EAAqB,EAAhBR,EAAES,YAAmBT,EAAEQ,WAAcR,EAAEW,QAClFP,EAAM,GAoBZ,OAnBAH,EAAMW,SAASC,IACX,MAAMC,EAASC,EAAWF,GACpBG,EAAQC,KAAKC,MAAMJ,GAAUR,EAASI,IACtCS,GAAeL,EAASJ,EAAOM,GAASV,EAASI,IAAS,EAChE,IAAIU,EAAKP,EAAK,GACVQ,EAAKR,EAAK,GACVO,EAAG,GAAKC,EAAG,KACXD,EAAKP,EAAK,GACVQ,EAAKR,EAAK,IAEd,MAAMS,EAAQL,KAAKM,MAAMF,EAAG,GAAKD,EAAG,KAAOC,EAAG,GAAKD,EAAG,KACtD,IAAK,IAAII,EAAI,EAAGA,EAAIR,EAAOQ,IAAK,CAC5B,MAAMC,EAASD,GAAKlB,EAASI,GACvBgB,EAAOD,EAASnB,EAChBqB,EAAQ,CAACP,EAAG,GAAMK,EAASR,KAAKW,IAAIN,GAAWH,EAAcF,KAAKW,IAAIN,GAASF,EAAG,GAAKK,EAASR,KAAKY,IAAIP,GAAUH,EAAcF,KAAKY,IAAIP,IAC1IQ,EAAM,CAACV,EAAG,GAAMM,EAAOT,KAAKW,IAAIN,GAAWH,EAAcF,KAAKW,IAAIN,GAASF,EAAG,GAAMM,EAAOT,KAAKY,IAAIP,GAAWH,EAAcF,KAAKY,IAAIP,IAC5IlB,EAAI2B,QAAQlC,KAAKD,OAAOoC,cAAcL,EAAM,GAAIA,EAAM,GAAIG,EAAI,GAAIA,EAAI,GAAI9B,GAC7E,KAEEI,CACV"}